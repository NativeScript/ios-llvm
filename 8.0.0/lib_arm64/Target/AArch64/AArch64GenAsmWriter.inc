/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64InstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 's', 'h', 'a', '1', 's', 'u', '0', 9, 0,
  /* 9 */ 's', 'h', 'a', '5', '1', '2', 's', 'u', '0', 9, 0,
  /* 20 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', 9, 0,
  /* 31 */ 'l', 'd', '1', 9, 0,
  /* 36 */ 't', 'r', 'n', '1', 9, 0,
  /* 42 */ 'z', 'i', 'p', '1', 9, 0,
  /* 48 */ 'u', 'z', 'p', '1', 9, 0,
  /* 54 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 61 */ 's', 'm', '3', 's', 's', '1', 9, 0,
  /* 69 */ 's', 't', '1', 9, 0,
  /* 74 */ 's', 'h', 'a', '1', 's', 'u', '1', 9, 0,
  /* 83 */ 's', 'h', 'a', '5', '1', '2', 's', 'u', '1', 9, 0,
  /* 94 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', 9, 0,
  /* 105 */ 's', 'm', '3', 'p', 'a', 'r', 't', 'w', '1', 9, 0,
  /* 116 */ 'r', 'a', 'x', '1', 9, 0,
  /* 122 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 129 */ 'l', 'd', '2', 9, 0,
  /* 134 */ 's', 'h', 'a', '5', '1', '2', 'h', '2', 9, 0,
  /* 144 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', 9, 0,
  /* 154 */ 's', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 162 */ 'u', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 170 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 180 */ 'f', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 188 */ 's', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 196 */ 'u', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 204 */ 's', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 212 */ 'u', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 220 */ 's', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 228 */ 'u', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 236 */ 's', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 244 */ 'u', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 252 */ 's', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 260 */ 'u', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 268 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 278 */ 'p', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 286 */ 's', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 294 */ 'u', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 302 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 312 */ 'f', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 320 */ 's', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 328 */ 'u', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 336 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 344 */ 'r', 's', 'u', 'b', 'h', 'n', '2', 9, 0,
  /* 353 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', 9, 0,
  /* 362 */ 's', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 371 */ 'u', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 380 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 390 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 400 */ 't', 'r', 'n', '2', 9, 0,
  /* 406 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 414 */ 's', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 422 */ 'u', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 430 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 440 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 451 */ 's', 'q', 'x', 't', 'u', 'n', '2', 9, 0,
  /* 460 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 469 */ 'z', 'i', 'p', '2', 9, 0,
  /* 475 */ 'u', 'z', 'p', '2', 9, 0,
  /* 481 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 488 */ 's', 't', '2', 9, 0,
  /* 493 */ 's', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 501 */ 'u', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 509 */ 's', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 517 */ 'u', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 525 */ 's', 'm', '3', 'p', 'a', 'r', 't', 'w', '2', 9, 0,
  /* 536 */ 'l', 'd', '3', 9, 0,
  /* 541 */ 'e', 'o', 'r', '3', 9, 0,
  /* 547 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 554 */ 's', 't', '3', 9, 0,
  /* 559 */ 'r', 'e', 'v', '6', '4', 9, 0,
  /* 566 */ 'l', 'd', '4', 9, 0,
  /* 571 */ 's', 't', '4', 9, 0,
  /* 576 */ 's', 'e', 't', 'f', '1', '6', 9, 0,
  /* 584 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 591 */ 's', 'e', 't', 'f', '8', 9, 0,
  /* 598 */ 's', 'm', '3', 't', 't', '1', 'a', 9, 0,
  /* 607 */ 's', 'm', '3', 't', 't', '2', 'a', 9, 0,
  /* 616 */ 'b', 'r', 'a', 'a', 9, 0,
  /* 622 */ 'l', 'd', 'r', 'a', 'a', 9, 0,
  /* 629 */ 'b', 'l', 'r', 'a', 'a', 9, 0,
  /* 636 */ 's', 'a', 'b', 'a', 9, 0,
  /* 642 */ 'u', 'a', 'b', 'a', 9, 0,
  /* 648 */ 'p', 'a', 'c', 'd', 'a', 9, 0,
  /* 655 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 663 */ 'f', 'a', 'd', 'd', 'a', 9, 0,
  /* 670 */ 'a', 'u', 't', 'd', 'a', 9, 0,
  /* 677 */ 'p', 'a', 'c', 'g', 'a', 9, 0,
  /* 684 */ 'p', 'a', 'c', 'i', 'a', 9, 0,
  /* 691 */ 'a', 'u', 't', 'i', 'a', 9, 0,
  /* 698 */ 'b', 'r', 'k', 'a', 9, 0,
  /* 704 */ 'f', 'c', 'm', 'l', 'a', 9, 0,
  /* 711 */ 'f', 'm', 'l', 'a', 9, 0,
  /* 717 */ 'f', 'n', 'm', 'l', 'a', 9, 0,
  /* 724 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 733 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 742 */ 'b', 'r', 'k', 'p', 'a', 9, 0,
  /* 749 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 756 */ 's', 'w', 'p', 'a', 9, 0,
  /* 762 */ 'f', 'e', 'x', 'p', 'a', 9, 0,
  /* 769 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 777 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 785 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 792 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 799 */ 's', 's', 'r', 'a', 9, 0,
  /* 805 */ 'u', 's', 'r', 'a', 9, 0,
  /* 811 */ 'c', 'a', 's', 'a', 9, 0,
  /* 817 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 825 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 833 */ 'c', 'l', 'a', 's', 't', 'a', 9, 0,
  /* 841 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 850 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 859 */ 'p', 'a', 'c', 'd', 'z', 'a', 9, 0,
  /* 867 */ 'a', 'u', 't', 'd', 'z', 'a', 9, 0,
  /* 875 */ 'p', 'a', 'c', 'i', 'z', 'a', 9, 0,
  /* 883 */ 'a', 'u', 't', 'i', 'z', 'a', 9, 0,
  /* 891 */ 'l', 'd', '1', 'b', 9, 0,
  /* 897 */ 'l', 'd', 'f', 'f', '1', 'b', 9, 0,
  /* 905 */ 'l', 'd', 'n', 'f', '1', 'b', 9, 0,
  /* 913 */ 'l', 'd', 'n', 't', '1', 'b', 9, 0,
  /* 921 */ 's', 't', 'n', 't', '1', 'b', 9, 0,
  /* 929 */ 's', 't', '1', 'b', 9, 0,
  /* 935 */ 's', 'm', '3', 't', 't', '1', 'b', 9, 0,
  /* 944 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 952 */ 'l', 'd', '2', 'b', 9, 0,
  /* 958 */ 's', 't', '2', 'b', 9, 0,
  /* 964 */ 's', 'm', '3', 't', 't', '2', 'b', 9, 0,
  /* 973 */ 'l', 'd', '3', 'b', 9, 0,
  /* 979 */ 's', 't', '3', 'b', 9, 0,
  /* 985 */ 'l', 'd', '4', 'b', 9, 0,
  /* 991 */ 's', 't', '4', 'b', 9, 0,
  /* 997 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 1006 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 1016 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 1026 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 1033 */ 'b', 'r', 'a', 'b', 9, 0,
  /* 1039 */ 'l', 'd', 'r', 'a', 'b', 9, 0,
  /* 1046 */ 'b', 'l', 'r', 'a', 'b', 9, 0,
  /* 1053 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 1062 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 1071 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 1078 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 1087 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 1097 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 1107 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 1116 */ 's', 'q', 'd', 'e', 'c', 'b', 9, 0,
  /* 1124 */ 'u', 'q', 'd', 'e', 'c', 'b', 9, 0,
  /* 1132 */ 's', 'q', 'i', 'n', 'c', 'b', 9, 0,
  /* 1140 */ 'u', 'q', 'i', 'n', 'c', 'b', 9, 0,
  /* 1148 */ 'p', 'a', 'c', 'd', 'b', 9, 0,
  /* 1155 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 1163 */ 'a', 'u', 't', 'd', 'b', 9, 0,
  /* 1170 */ 'p', 'r', 'f', 'b', 9, 0,
  /* 1176 */ 'p', 'a', 'c', 'i', 'b', 9, 0,
  /* 1183 */ 'a', 'u', 't', 'i', 'b', 9, 0,
  /* 1190 */ 'b', 'r', 'k', 'b', 9, 0,
  /* 1196 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 1206 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 1217 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 1228 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 1236 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 1246 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 1256 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 1264 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 1274 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 1285 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 1296 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 1305 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 1315 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 1325 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 1332 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 1341 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 1350 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 1357 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 1366 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 1376 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 1386 */ 'd', 'm', 'b', 9, 0,
  /* 1391 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 1400 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 1409 */ 'b', 'r', 'k', 'p', 'b', 9, 0,
  /* 1416 */ 's', 'w', 'p', 'b', 9, 0,
  /* 1422 */ 'l', 'd', '1', 'r', 'q', 'b', 9, 0,
  /* 1430 */ 'l', 'd', '1', 'r', 'b', 9, 0,
  /* 1437 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 1444 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 1452 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 1458 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 1466 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 1474 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 1481 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 1489 */ 'l', 'd', 'a', 'p', 'r', 'b', 9, 0,
  /* 1497 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 1504 */ 's', 't', 'r', 'b', 9, 0,
  /* 1510 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 1517 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 1524 */ 's', 't', 'l', 'u', 'r', 'b', 9, 0,
  /* 1532 */ 'l', 'd', 'a', 'p', 'u', 'r', 'b', 9, 0,
  /* 1541 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 1548 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 1556 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 1563 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 1571 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 1578 */ 'l', 'd', '1', 's', 'b', 9, 0,
  /* 1585 */ 'l', 'd', 'f', 'f', '1', 's', 'b', 9, 0,
  /* 1594 */ 'l', 'd', 'n', 'f', '1', 's', 'b', 9, 0,
  /* 1603 */ 'c', 'a', 's', 'b', 9, 0,
  /* 1609 */ 'd', 's', 'b', 9, 0,
  /* 1614 */ 'i', 's', 'b', 9, 0,
  /* 1619 */ 'f', 'm', 's', 'b', 9, 0,
  /* 1625 */ 'f', 'n', 'm', 's', 'b', 9, 0,
  /* 1632 */ 'l', 'd', '1', 'r', 's', 'b', 9, 0,
  /* 1640 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 1647 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 1655 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 1663 */ 'l', 'd', 'a', 'p', 'u', 'r', 's', 'b', 9, 0,
  /* 1673 */ 't', 's', 'b', 9, 0,
  /* 1678 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 1686 */ 'c', 'n', 't', 'b', 9, 0,
  /* 1692 */ 'c', 'l', 'a', 's', 't', 'b', 9, 0,
  /* 1700 */ 's', 'x', 't', 'b', 9, 0,
  /* 1706 */ 'u', 'x', 't', 'b', 9, 0,
  /* 1712 */ 'f', 's', 'u', 'b', 9, 0,
  /* 1718 */ 's', 'h', 's', 'u', 'b', 9, 0,
  /* 1725 */ 'u', 'h', 's', 'u', 'b', 9, 0,
  /* 1732 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 1739 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 1747 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 1754 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 1761 */ 'r', 'e', 'v', 'b', 9, 0,
  /* 1767 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 1776 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 1785 */ 'p', 'a', 'c', 'd', 'z', 'b', 9, 0,
  /* 1793 */ 'a', 'u', 't', 'd', 'z', 'b', 9, 0,
  /* 1801 */ 'p', 'a', 'c', 'i', 'z', 'b', 9, 0,
  /* 1809 */ 'a', 'u', 't', 'i', 'z', 'b', 9, 0,
  /* 1817 */ 's', 'h', 'a', '1', 'c', 9, 0,
  /* 1824 */ 's', 'b', 'c', 9, 0,
  /* 1829 */ 'a', 'd', 'c', 9, 0,
  /* 1834 */ 'b', 'i', 'c', 9, 0,
  /* 1839 */ 'a', 'e', 's', 'i', 'm', 'c', 9, 0,
  /* 1847 */ 'a', 'e', 's', 'm', 'c', 9, 0,
  /* 1854 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 1861 */ 'h', 'v', 'c', 9, 0,
  /* 1866 */ 's', 'v', 'c', 9, 0,
  /* 1871 */ 'l', 'd', '1', 'd', 9, 0,
  /* 1877 */ 'l', 'd', 'f', 'f', '1', 'd', 9, 0,
  /* 1885 */ 'l', 'd', 'n', 'f', '1', 'd', 9, 0,
  /* 1893 */ 'l', 'd', 'n', 't', '1', 'd', 9, 0,
  /* 1901 */ 's', 't', 'n', 't', '1', 'd', 9, 0,
  /* 1909 */ 's', 't', '1', 'd', 9, 0,
  /* 1915 */ 'l', 'd', '2', 'd', 9, 0,
  /* 1921 */ 's', 't', '2', 'd', 9, 0,
  /* 1927 */ 'l', 'd', '3', 'd', 9, 0,
  /* 1933 */ 's', 't', '3', 'd', 9, 0,
  /* 1939 */ 'l', 'd', '4', 'd', 9, 0,
  /* 1945 */ 's', 't', '4', 'd', 9, 0,
  /* 1951 */ 'f', 'm', 'a', 'd', 9, 0,
  /* 1957 */ 'f', 'n', 'm', 'a', 'd', 9, 0,
  /* 1964 */ 'f', 't', 'm', 'a', 'd', 9, 0,
  /* 1971 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 1977 */ 's', 'a', 'b', 'd', 9, 0,
  /* 1983 */ 'u', 'a', 'b', 'd', 9, 0,
  /* 1989 */ 'x', 'p', 'a', 'c', 'd', 9, 0,
  /* 1996 */ 's', 'q', 'd', 'e', 'c', 'd', 9, 0,
  /* 2004 */ 'u', 'q', 'd', 'e', 'c', 'd', 9, 0,
  /* 2012 */ 's', 'q', 'i', 'n', 'c', 'd', 9, 0,
  /* 2020 */ 'u', 'q', 'i', 'n', 'c', 'd', 9, 0,
  /* 2028 */ 'f', 'c', 'a', 'd', 'd', 9, 0,
  /* 2035 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 2042 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 2048 */ 's', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 2056 */ 'u', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 2064 */ 's', 'h', 'a', 'd', 'd', 9, 0,
  /* 2071 */ 'u', 'h', 'a', 'd', 'd', 9, 0,
  /* 2078 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 2085 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 2093 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 2101 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 2109 */ 'p', 'r', 'f', 'd', 9, 0,
  /* 2115 */ 'n', 'a', 'n', 'd', 9, 0,
  /* 2121 */ 'l', 'd', '1', 'r', 'q', 'd', 9, 0,
  /* 2129 */ 'l', 'd', '1', 'r', 'd', 9, 0,
  /* 2136 */ 'a', 's', 'r', 'd', 9, 0,
  /* 2142 */ 'a', 'e', 's', 'd', 9, 0,
  /* 2148 */ 'c', 'n', 't', 'd', 9, 0,
  /* 2154 */ 's', 'm', '4', 'e', 9, 0,
  /* 2160 */ 's', 'p', 'l', 'i', 'c', 'e', 9, 0,
  /* 2168 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 2175 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 2182 */ 'c', 'm', 'p', 'g', 'e', 9, 0,
  /* 2189 */ 'f', 's', 'c', 'a', 'l', 'e', 9, 0,
  /* 2197 */ 'w', 'h', 'i', 'l', 'e', 'l', 'e', 9, 0,
  /* 2206 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 2213 */ 'c', 'm', 'p', 'l', 'e', 9, 0,
  /* 2220 */ 'f', 'c', 'm', 'n', 'e', 9, 0,
  /* 2227 */ 'c', 't', 'e', 'r', 'm', 'n', 'e', 9, 0,
  /* 2236 */ 'c', 'm', 'p', 'n', 'e', 9, 0,
  /* 2243 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 2251 */ 'u', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 2259 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 2267 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 2274 */ 'a', 'e', 's', 'e', 9, 0,
  /* 2280 */ 'p', 'f', 'a', 'l', 's', 'e', 9, 0,
  /* 2288 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 2297 */ 'u', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 2306 */ 'p', 't', 'r', 'u', 'e', 9, 0,
  /* 2313 */ 'u', 'd', 'f', 9, 0,
  /* 2318 */ 'b', 'i', 'f', 9, 0,
  /* 2323 */ 'r', 'm', 'i', 'f', 9, 0,
  /* 2329 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 2336 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 2343 */ 's', 'u', 'b', 'g', 9, 0,
  /* 2349 */ 'a', 'd', 'd', 'g', 9, 0,
  /* 2355 */ 'l', 'd', 'g', 9, 0,
  /* 2360 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 2366 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 2373 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 2380 */ 'i', 'r', 'g', 9, 0,
  /* 2385 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 2392 */ 'l', 'd', '1', 'h', 9, 0,
  /* 2398 */ 'l', 'd', 'f', 'f', '1', 'h', 9, 0,
  /* 2406 */ 'l', 'd', 'n', 'f', '1', 'h', 9, 0,
  /* 2414 */ 'l', 'd', 'n', 't', '1', 'h', 9, 0,
  /* 2422 */ 's', 't', 'n', 't', '1', 'h', 9, 0,
  /* 2430 */ 's', 't', '1', 'h', 9, 0,
  /* 2436 */ 's', 'h', 'a', '5', '1', '2', 'h', 9, 0,
  /* 2445 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 2453 */ 'l', 'd', '2', 'h', 9, 0,
  /* 2459 */ 's', 't', '2', 'h', 9, 0,
  /* 2465 */ 'l', 'd', '3', 'h', 9, 0,
  /* 2471 */ 's', 't', '3', 'h', 9, 0,
  /* 2477 */ 'l', 'd', '4', 'h', 9, 0,
  /* 2483 */ 's', 't', '4', 'h', 9, 0,
  /* 2489 */ 's', 'h', 'a', '2', '5', '6', 'h', 9, 0,
  /* 2498 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 2507 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 2517 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 2527 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 2537 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 2544 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 2553 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 2562 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 2569 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 2578 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 2588 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 2598 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 2607 */ 's', 'q', 'd', 'e', 'c', 'h', 9, 0,
  /* 2615 */ 'u', 'q', 'd', 'e', 'c', 'h', 9, 0,
  /* 2623 */ 's', 'q', 'i', 'n', 'c', 'h', 9, 0,
  /* 2631 */ 'u', 'q', 'i', 'n', 'c', 'h', 9, 0,
  /* 2639 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 2647 */ 'p', 'r', 'f', 'h', 9, 0,
  /* 2653 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 2663 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 2674 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 2685 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 2693 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 2703 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 2713 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 2721 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 2731 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 2742 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 2753 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 2762 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 2772 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 2782 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 2789 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 2798 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 2807 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 2814 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 2823 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 2832 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 2842 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 2849 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 2856 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 2866 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 2876 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 2885 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 2894 */ 's', 'w', 'p', 'h', 9, 0,
  /* 2900 */ 'l', 'd', '1', 'r', 'q', 'h', 9, 0,
  /* 2908 */ 'l', 'd', '1', 'r', 'h', 9, 0,
  /* 2915 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 2922 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 2930 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 2936 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 2944 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 2952 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 2959 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 2967 */ 'l', 'd', 'a', 'p', 'r', 'h', 9, 0,
  /* 2975 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 2982 */ 's', 't', 'r', 'h', 9, 0,
  /* 2988 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 2995 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 3002 */ 's', 't', 'l', 'u', 'r', 'h', 9, 0,
  /* 3010 */ 'l', 'd', 'a', 'p', 'u', 'r', 'h', 9, 0,
  /* 3019 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 3026 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 3034 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 3041 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 3049 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 3056 */ 'l', 'd', '1', 's', 'h', 9, 0,
  /* 3063 */ 'l', 'd', 'f', 'f', '1', 's', 'h', 9, 0,
  /* 3072 */ 'l', 'd', 'n', 'f', '1', 's', 'h', 9, 0,
  /* 3081 */ 'c', 'a', 's', 'h', 9, 0,
  /* 3087 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 3097 */ 'l', 'd', '1', 'r', 's', 'h', 9, 0,
  /* 3105 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 3112 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 3120 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 3128 */ 'l', 'd', 'a', 'p', 'u', 'r', 's', 'h', 9, 0,
  /* 3138 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 3146 */ 'c', 'n', 't', 'h', 9, 0,
  /* 3152 */ 's', 'x', 't', 'h', 9, 0,
  /* 3158 */ 'u', 'x', 't', 'h', 9, 0,
  /* 3164 */ 'r', 'e', 'v', 'h', 9, 0,
  /* 3170 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 3179 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 3188 */ 'x', 'p', 'a', 'c', 'i', 9, 0,
  /* 3195 */ 'p', 'u', 'n', 'p', 'k', 'h', 'i', 9, 0,
  /* 3204 */ 's', 'u', 'n', 'p', 'k', 'h', 'i', 9, 0,
  /* 3213 */ 'u', 'u', 'n', 'p', 'k', 'h', 'i', 9, 0,
  /* 3222 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 3228 */ 'c', 'm', 'p', 'h', 'i', 9, 0,
  /* 3235 */ 's', 'l', 'i', 9, 0,
  /* 3240 */ 'g', 'm', 'i', 9, 0,
  /* 3245 */ 'm', 'v', 'n', 'i', 9, 0,
  /* 3251 */ 's', 'r', 'i', 9, 0,
  /* 3256 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 3264 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 3270 */ 'b', 'r', 'k', 9, 0,
  /* 3275 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 3281 */ 's', 'a', 'b', 'a', 'l', 9, 0,
  /* 3288 */ 'u', 'a', 'b', 'a', 'l', 9, 0,
  /* 3295 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 3304 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 3313 */ 'f', 'm', 'l', 'a', 'l', 9, 0,
  /* 3320 */ 's', 'm', 'l', 'a', 'l', 9, 0,
  /* 3327 */ 'u', 'm', 'l', 'a', 'l', 9, 0,
  /* 3334 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 3344 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 3354 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 3362 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 3369 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 3378 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 3387 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 3394 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 3403 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 3413 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 3423 */ 't', 'b', 'l', 9, 0,
  /* 3428 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 3436 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 3444 */ 's', 's', 'u', 'b', 'l', 9, 0,
  /* 3451 */ 'u', 's', 'u', 'b', 'l', 9, 0,
  /* 3458 */ 's', 'a', 'b', 'd', 'l', 9, 0,
  /* 3465 */ 'u', 'a', 'b', 'd', 'l', 9, 0,
  /* 3472 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 3480 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 3488 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 3496 */ 's', 'a', 'd', 'd', 'l', 9, 0,
  /* 3503 */ 'u', 'a', 'd', 'd', 'l', 9, 0,
  /* 3510 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 3517 */ 'f', 't', 's', 's', 'e', 'l', 9, 0,
  /* 3525 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 3532 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 3539 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 3547 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 3555 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 3562 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 3569 */ 's', 's', 'h', 'l', 9, 0,
  /* 3575 */ 'u', 's', 'h', 'l', 9, 0,
  /* 3581 */ 's', 's', 'h', 'l', 'l', 9, 0,
  /* 3588 */ 'u', 's', 'h', 'l', 'l', 9, 0,
  /* 3595 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 3604 */ 'p', 'm', 'u', 'l', 'l', 9, 0,
  /* 3611 */ 's', 'm', 'u', 'l', 'l', 9, 0,
  /* 3618 */ 'u', 'm', 'u', 'l', 'l', 9, 0,
  /* 3625 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 3634 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 3643 */ 'a', 'd', 'd', 'p', 'l', 9, 0,
  /* 3650 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 3657 */ 's', 'w', 'p', 'l', 9, 0,
  /* 3663 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 3671 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 3679 */ 'c', 'a', 's', 'l', 9, 0,
  /* 3685 */ 'b', 's', 'l', 9, 0,
  /* 3690 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 3699 */ 'f', 'm', 'l', 's', 'l', 9, 0,
  /* 3706 */ 's', 'm', 'l', 's', 'l', 9, 0,
  /* 3713 */ 'u', 'm', 'l', 's', 'l', 9, 0,
  /* 3720 */ 's', 'y', 's', 'l', 9, 0,
  /* 3726 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 3734 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 3741 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 3747 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 3754 */ 'p', 'm', 'u', 'l', 9, 0,
  /* 3760 */ 'f', 't', 's', 'm', 'u', 'l', 9, 0,
  /* 3768 */ 'a', 'd', 'd', 'v', 'l', 9, 0,
  /* 3775 */ 'r', 'd', 'v', 'l', 9, 0,
  /* 3781 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 3790 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 3799 */ 's', 'h', 'a', '1', 'm', 9, 0,
  /* 3806 */ 's', 'b', 'f', 'm', 9, 0,
  /* 3812 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 3818 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 3824 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 3832 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 3840 */ 'd', 'u', 'p', 'm', 9, 0,
  /* 3846 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 3854 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 3861 */ 'r', 's', 'u', 'b', 'h', 'n', 9, 0,
  /* 3869 */ 'r', 'a', 'd', 'd', 'h', 'n', 9, 0,
  /* 3877 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 3883 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 3891 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 3899 */ 'b', 'r', 'k', 'n', 9, 0,
  /* 3905 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 3911 */ 'e', 'o', 'n', 9, 0,
  /* 3916 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 3924 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 3932 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 3941 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 3950 */ 'o', 'r', 'n', 9, 0,
  /* 3955 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 3963 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 3970 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 3977 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 3984 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 3993 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 4003 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 4011 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 4017 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 4025 */ 'w', 'h', 'i', 'l', 'e', 'l', 'o', 9, 0,
  /* 4034 */ 'p', 'u', 'n', 'p', 'k', 'l', 'o', 9, 0,
  /* 4043 */ 's', 'u', 'n', 'p', 'k', 'l', 'o', 9, 0,
  /* 4052 */ 'u', 'u', 'n', 'p', 'k', 'l', 'o', 9, 0,
  /* 4061 */ 'c', 'm', 'p', 'l', 'o', 9, 0,
  /* 4068 */ 'f', 'c', 'm', 'u', 'o', 9, 0,
  /* 4075 */ 's', 'h', 'a', '1', 'p', 9, 0,
  /* 4082 */ 's', 'u', 'b', 'p', 9, 0,
  /* 4088 */ 's', 'q', 'd', 'e', 'c', 'p', 9, 0,
  /* 4096 */ 'u', 'q', 'd', 'e', 'c', 'p', 9, 0,
  /* 4104 */ 's', 'q', 'i', 'n', 'c', 'p', 9, 0,
  /* 4112 */ 'u', 'q', 'i', 'n', 'c', 'p', 9, 0,
  /* 4120 */ 'f', 'a', 'd', 'd', 'p', 9, 0,
  /* 4127 */ 'l', 'd', 'p', 9, 0,
  /* 4132 */ 's', 't', 'g', 'p', 9, 0,
  /* 4138 */ 's', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 4146 */ 'u', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 4154 */ 's', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 4162 */ 'u', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 4170 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 4177 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 4183 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', 9, 0,
  /* 4192 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', 9, 0,
  /* 4201 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 4207 */ 'f', 'm', 'i', 'n', 'p', 9, 0,
  /* 4214 */ 's', 'm', 'i', 'n', 'p', 9, 0,
  /* 4221 */ 'u', 'm', 'i', 'n', 'p', 9, 0,
  /* 4228 */ 's', 't', 'n', 'p', 9, 0,
  /* 4234 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 4240 */ 'c', 'a', 's', 'p', 9, 0,
  /* 4246 */ 'c', 'n', 't', 'p', 9, 0,
  /* 4252 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 4260 */ 's', 't', 'p', 9, 0,
  /* 4265 */ 'f', 'd', 'u', 'p', 9, 0,
  /* 4271 */ 's', 'w', 'p', 9, 0,
  /* 4276 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 4283 */ 'f', 'm', 'a', 'x', 'p', 9, 0,
  /* 4290 */ 's', 'm', 'a', 'x', 'p', 9, 0,
  /* 4297 */ 'u', 'm', 'a', 'x', 'p', 9, 0,
  /* 4304 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 4310 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 4317 */ 's', 't', 'x', 'p', 9, 0,
  /* 4323 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 4330 */ 'c', 't', 'e', 'r', 'm', 'e', 'q', 9, 0,
  /* 4339 */ 'c', 'm', 'p', 'e', 'q', 9, 0,
  /* 4346 */ 'l', 'd', '1', 'r', 9, 0,
  /* 4352 */ 'l', 'd', '2', 'r', 9, 0,
  /* 4358 */ 'l', 'd', '3', 'r', 9, 0,
  /* 4364 */ 'l', 'd', '4', 'r', 9, 0,
  /* 4370 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 4376 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 4383 */ 'x', 'a', 'r', 9, 0,
  /* 4388 */ 'f', 's', 'u', 'b', 'r', 9, 0,
  /* 4395 */ 'a', 'd', 'r', 9, 0,
  /* 4400 */ 'l', 'd', 'r', 9, 0,
  /* 4405 */ 'r', 'd', 'f', 'f', 'r', 9, 0,
  /* 4412 */ 'w', 'r', 'f', 'f', 'r', 9, 0,
  /* 4419 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 4426 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 4433 */ 's', 's', 'h', 'r', 9, 0,
  /* 4439 */ 'u', 's', 'h', 'r', 9, 0,
  /* 4445 */ 'b', 'l', 'r', 9, 0,
  /* 4450 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 4457 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 4464 */ 'l', 's', 'l', 'r', 9, 0,
  /* 4470 */ 's', 't', 'l', 'r', 9, 0,
  /* 4476 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 4483 */ 'n', 'o', 'r', 9, 0,
  /* 4488 */ 'r', 'o', 'r', 9, 0,
  /* 4493 */ 'l', 'd', 'a', 'p', 'r', 9, 0,
  /* 4500 */ 'o', 'r', 'r', 9, 0,
  /* 4505 */ 'a', 's', 'r', 'r', 9, 0,
  /* 4511 */ 'l', 's', 'r', 'r', 9, 0,
  /* 4517 */ 'a', 's', 'r', 9, 0,
  /* 4522 */ 'l', 's', 'r', 9, 0,
  /* 4527 */ 'm', 's', 'r', 9, 0,
  /* 4532 */ 'i', 'n', 's', 'r', 9, 0,
  /* 4538 */ 'l', 'd', 't', 'r', 9, 0,
  /* 4544 */ 's', 't', 'r', 9, 0,
  /* 4549 */ 's', 't', 't', 'r', 9, 0,
  /* 4555 */ 'e', 'x', 't', 'r', 9, 0,
  /* 4561 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 4567 */ 's', 't', 'l', 'u', 'r', 9, 0,
  /* 4574 */ 'l', 'd', 'a', 'p', 'u', 'r', 9, 0,
  /* 4582 */ 's', 't', 'u', 'r', 9, 0,
  /* 4588 */ 'f', 'd', 'i', 'v', 'r', 9, 0,
  /* 4595 */ 's', 'd', 'i', 'v', 'r', 9, 0,
  /* 4602 */ 'u', 'd', 'i', 'v', 'r', 9, 0,
  /* 4609 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 4616 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 4622 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 4629 */ 's', 't', 'x', 'r', 9, 0,
  /* 4635 */ 'c', 'a', 's', 9, 0,
  /* 4640 */ 'b', 'r', 'k', 'a', 's', 9, 0,
  /* 4647 */ 'b', 'r', 'k', 'p', 'a', 's', 9, 0,
  /* 4655 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 4663 */ 'f', 'a', 'b', 's', 9, 0,
  /* 4669 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 4676 */ 'b', 'r', 'k', 'b', 's', 9, 0,
  /* 4683 */ 'b', 'r', 'k', 'p', 'b', 's', 9, 0,
  /* 4691 */ 's', 'u', 'b', 's', 9, 0,
  /* 4697 */ 's', 'b', 'c', 's', 9, 0,
  /* 4703 */ 'a', 'd', 'c', 's', 9, 0,
  /* 4709 */ 'b', 'i', 'c', 's', 9, 0,
  /* 4715 */ 'a', 'd', 'd', 's', 9, 0,
  /* 4721 */ 'n', 'a', 'n', 'd', 's', 9, 0,
  /* 4728 */ 'p', 't', 'r', 'u', 'e', 's', 9, 0,
  /* 4736 */ 'c', 'm', 'h', 's', 9, 0,
  /* 4742 */ 'c', 'm', 'p', 'h', 's', 9, 0,
  /* 4749 */ 'c', 'l', 's', 9, 0,
  /* 4754 */ 'w', 'h', 'i', 'l', 'e', 'l', 's', 9, 0,
  /* 4763 */ 'f', 'm', 'l', 's', 9, 0,
  /* 4769 */ 'f', 'n', 'm', 'l', 's', 9, 0,
  /* 4776 */ 'c', 'm', 'p', 'l', 's', 9, 0,
  /* 4783 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 4791 */ 'i', 'n', 's', 9, 0,
  /* 4796 */ 'b', 'r', 'k', 'n', 's', 9, 0,
  /* 4803 */ 'o', 'r', 'n', 's', 9, 0,
  /* 4809 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 4817 */ 's', 'u', 'b', 'p', 's', 9, 0,
  /* 4824 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 4832 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 4840 */ 'r', 'd', 'f', 'f', 'r', 's', 9, 0,
  /* 4848 */ 'm', 'r', 's', 9, 0,
  /* 4853 */ 'e', 'o', 'r', 's', 9, 0,
  /* 4859 */ 'n', 'o', 'r', 's', 9, 0,
  /* 4865 */ 'o', 'r', 'r', 's', 9, 0,
  /* 4871 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 4880 */ 's', 'y', 's', 9, 0,
  /* 4885 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 4893 */ 'f', 'j', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 4902 */ 'c', 'o', 'm', 'p', 'a', 'c', 't', 9, 0,
  /* 4911 */ 'r', 'e', 't', 9, 0,
  /* 4916 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 4923 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 4930 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 4937 */ 'c', 'm', 'p', 'g', 't', 9, 0,
  /* 4944 */ 'r', 'b', 'i', 't', 9, 0,
  /* 4950 */ 'w', 'h', 'i', 'l', 'e', 'l', 't', 9, 0,
  /* 4959 */ 'h', 'l', 't', 9, 0,
  /* 4964 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 4971 */ 'c', 'm', 'p', 'l', 't', 9, 0,
  /* 4978 */ 'c', 'n', 't', 9, 0,
  /* 4983 */ 'h', 'i', 'n', 't', 9, 0,
  /* 4989 */ 's', 'd', 'o', 't', 9, 0,
  /* 4995 */ 'u', 'd', 'o', 't', 9, 0,
  /* 5001 */ 'c', 'n', 'o', 't', 9, 0,
  /* 5007 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 5014 */ 'p', 't', 'e', 's', 't', 9, 0,
  /* 5021 */ 'p', 'f', 'i', 'r', 's', 't', 9, 0,
  /* 5029 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 5036 */ 'f', 'c', 'v', 't', 9, 0,
  /* 5042 */ 'p', 'n', 'e', 'x', 't', 9, 0,
  /* 5049 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 5057 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 5065 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 5073 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 5081 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 5089 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 5097 */ 'f', 'a', 'd', 'd', 'v', 9, 0,
  /* 5104 */ 's', 'a', 'd', 'd', 'v', 9, 0,
  /* 5111 */ 'u', 'a', 'd', 'd', 'v', 9, 0,
  /* 5118 */ 'a', 'n', 'd', 'v', 9, 0,
  /* 5124 */ 'r', 'e', 'v', 9, 0,
  /* 5129 */ 'l', 'd', 'g', 'v', 9, 0,
  /* 5135 */ 's', 't', 'g', 'v', 9, 0,
  /* 5141 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 5147 */ 's', 'd', 'i', 'v', 9, 0,
  /* 5153 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 5159 */ 's', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 5167 */ 'u', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 5175 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', 9, 0,
  /* 5184 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', 9, 0,
  /* 5193 */ 'f', 'm', 'i', 'n', 'v', 9, 0,
  /* 5200 */ 's', 'm', 'i', 'n', 'v', 9, 0,
  /* 5207 */ 'u', 'm', 'i', 'n', 'v', 9, 0,
  /* 5214 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 5221 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 5227 */ 's', 'm', 'o', 'v', 9, 0,
  /* 5233 */ 'u', 'm', 'o', 'v', 9, 0,
  /* 5239 */ 'e', 'o', 'r', 'v', 9, 0,
  /* 5245 */ 'f', 'm', 'a', 'x', 'v', 9, 0,
  /* 5252 */ 's', 'm', 'a', 'x', 'v', 9, 0,
  /* 5259 */ 'u', 'm', 'a', 'x', 'v', 9, 0,
  /* 5266 */ 'l', 'd', '1', 'w', 9, 0,
  /* 5272 */ 'l', 'd', 'f', 'f', '1', 'w', 9, 0,
  /* 5280 */ 'l', 'd', 'n', 'f', '1', 'w', 9, 0,
  /* 5288 */ 'l', 'd', 'n', 't', '1', 'w', 9, 0,
  /* 5296 */ 's', 't', 'n', 't', '1', 'w', 9, 0,
  /* 5304 */ 's', 't', '1', 'w', 9, 0,
  /* 5310 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 5318 */ 'l', 'd', '2', 'w', 9, 0,
  /* 5324 */ 's', 't', '2', 'w', 9, 0,
  /* 5330 */ 'l', 'd', '3', 'w', 9, 0,
  /* 5336 */ 's', 't', '3', 'w', 9, 0,
  /* 5342 */ 'l', 'd', '4', 'w', 9, 0,
  /* 5348 */ 's', 't', '4', 'w', 9, 0,
  /* 5354 */ 's', 's', 'u', 'b', 'w', 9, 0,
  /* 5361 */ 'u', 's', 'u', 'b', 'w', 9, 0,
  /* 5368 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 5377 */ 's', 'q', 'd', 'e', 'c', 'w', 9, 0,
  /* 5385 */ 'u', 'q', 'd', 'e', 'c', 'w', 9, 0,
  /* 5393 */ 's', 'q', 'i', 'n', 'c', 'w', 9, 0,
  /* 5401 */ 'u', 'q', 'i', 'n', 'c', 'w', 9, 0,
  /* 5409 */ 's', 'a', 'd', 'd', 'w', 9, 0,
  /* 5416 */ 'u', 'a', 'd', 'd', 'w', 9, 0,
  /* 5423 */ 'p', 'r', 'f', 'w', 9, 0,
  /* 5429 */ 'l', 'd', '1', 'r', 'q', 'w', 9, 0,
  /* 5437 */ 'l', 'd', '1', 'r', 'w', 9, 0,
  /* 5444 */ 'l', 'd', '1', 's', 'w', 9, 0,
  /* 5451 */ 'l', 'd', 'f', 'f', '1', 's', 'w', 9, 0,
  /* 5460 */ 'l', 'd', 'n', 'f', '1', 's', 'w', 9, 0,
  /* 5469 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 5476 */ 'l', 'd', '1', 'r', 's', 'w', 9, 0,
  /* 5484 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 5491 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 5499 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 5507 */ 'l', 'd', 'a', 'p', 'u', 'r', 's', 'w', 9, 0,
  /* 5517 */ 'c', 'n', 't', 'w', 9, 0,
  /* 5523 */ 's', 'x', 't', 'w', 9, 0,
  /* 5529 */ 'u', 'x', 't', 'w', 9, 0,
  /* 5535 */ 'r', 'e', 'v', 'w', 9, 0,
  /* 5541 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 5549 */ 'f', 'r', 'i', 'n', 't', '3', '2', 'x', 9, 0,
  /* 5559 */ 'f', 'r', 'i', 'n', 't', '6', '4', 'x', 9, 0,
  /* 5569 */ 'b', 'c', 'a', 'x', 9, 0,
  /* 5575 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 5581 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 5589 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 5597 */ 't', 'b', 'x', 9, 0,
  /* 5602 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 5611 */ 'i', 'n', 'd', 'e', 'x', 9, 0,
  /* 5618 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 5625 */ 'm', 'o', 'v', 'p', 'r', 'f', 'x', 9, 0,
  /* 5634 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 5641 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 5649 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 5657 */ 's', 'm', '4', 'e', 'k', 'e', 'y', 9, 0,
  /* 5666 */ 'f', 'c', 'p', 'y', 9, 0,
  /* 5672 */ 'f', 'r', 'i', 'n', 't', '3', '2', 'z', 9, 0,
  /* 5682 */ 'f', 'r', 'i', 'n', 't', '6', '4', 'z', 9, 0,
  /* 5692 */ 'b', 'r', 'a', 'a', 'z', 9, 0,
  /* 5699 */ 'b', 'l', 'r', 'a', 'a', 'z', 9, 0,
  /* 5707 */ 'b', 'r', 'a', 'b', 'z', 9, 0,
  /* 5714 */ 'b', 'l', 'r', 'a', 'b', 'z', 9, 0,
  /* 5722 */ 'c', 'b', 'z', 9, 0,
  /* 5727 */ 't', 'b', 'z', 9, 0,
  /* 5732 */ 'c', 'l', 'z', 9, 0,
  /* 5737 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 5743 */ 't', 'b', 'n', 'z', 9, 0,
  /* 5749 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 5757 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 5763 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 5777 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 5808 */ 'b', '.', 0,
  /* 5811 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 5835 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 5860 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 5883 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 5906 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 5928 */ 'p', 'a', 'c', 'i', 'a', '1', '7', '1', '6', 0,
  /* 5938 */ 'a', 'u', 't', 'i', 'a', '1', '7', '1', '6', 0,
  /* 5948 */ 'p', 'a', 'c', 'i', 'b', '1', '7', '1', '6', 0,
  /* 5958 */ 'a', 'u', 't', 'i', 'b', '1', '7', '1', '6', 0,
  /* 5968 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 5981 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 5988 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 5998 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 6008 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 6023 */ 's', 't', '2', 'g', 9, '[', 0,
  /* 6030 */ 's', 't', 'z', '2', 'g', 9, '[', 0,
  /* 6038 */ 's', 't', 'g', 9, '[', 0,
  /* 6044 */ 's', 't', 'z', 'g', 9, '[', 0,
  /* 6051 */ 'e', 'r', 'e', 't', 'a', 'a', 0,
  /* 6058 */ 'e', 'r', 'e', 't', 'a', 'b', 0,
  /* 6065 */ 's', 'b', 0,
  /* 6068 */ 'x', 'a', 'f', 'l', 'a', 'g', 0,
  /* 6075 */ 'a', 'x', 'f', 'l', 'a', 'g', 0,
  /* 6082 */ 'x', 'p', 'a', 'c', 'l', 'r', 'i', 0,
  /* 6090 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 6104 */ 'p', 'a', 'c', 'i', 'a', 's', 'p', 0,
  /* 6112 */ 'a', 'u', 't', 'i', 'a', 's', 'p', 0,
  /* 6120 */ 'p', 'a', 'c', 'i', 'b', 's', 'p', 0,
  /* 6128 */ 'a', 'u', 't', 'i', 'b', 's', 'p', 0,
  /* 6136 */ 's', 'e', 't', 'f', 'f', 'r', 0,
  /* 6143 */ 'd', 'r', 'p', 's', 0,
  /* 6148 */ 'e', 'r', 'e', 't', 0,
  /* 6153 */ 'c', 'f', 'i', 'n', 'v', 0,
  /* 6159 */ 'p', 'a', 'c', 'i', 'a', 'z', 0,
  /* 6166 */ 'a', 'u', 't', 'i', 'a', 'z', 0,
  /* 6173 */ 'p', 'a', 'c', 'i', 'b', 'z', 0,
  /* 6180 */ 'a', 'u', 't', 'i', 'b', 'z', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    5989U,	// DBG_VALUE
    5999U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    5982U,	// BUNDLE
    6009U,	// LIFETIME_START
    5969U,	// LIFETIME_END
    0U,	// STACKMAP
    6091U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    5861U,	// PATCHABLE_FUNCTION_ENTER
    5778U,	// PATCHABLE_RET
    5907U,	// PATCHABLE_FUNCTION_EXIT
    5884U,	// PATCHABLE_TAIL_CALL
    5836U,	// PATCHABLE_EVENT_CALL
    5812U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_FCEIL
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// CATCHRET
    0U,	// CLEANUPRET
    0U,	// SEH_AddFP
    0U,	// SEH_EpilogEnd
    0U,	// SEH_EpilogStart
    0U,	// SEH_Nop
    0U,	// SEH_PrologEnd
    0U,	// SEH_SaveFPLR
    0U,	// SEH_SaveFPLR_X
    0U,	// SEH_SaveFReg
    0U,	// SEH_SaveFRegP
    0U,	// SEH_SaveFRegP_X
    0U,	// SEH_SaveFReg_X
    0U,	// SEH_SaveReg
    0U,	// SEH_SaveRegP
    0U,	// SEH_SaveRegP_X
    0U,	// SEH_SaveReg_X
    0U,	// SEH_SetFP
    0U,	// SEH_StackAlloc
    12857U,	// ABS_ZPmZ_B
    21049U,	// ABS_ZPmZ_D
    2181591609U,	// ABS_ZPmZ_H
    37433U,	// ABS_ZPmZ_S
    68203065U,	// ABSv16i8
    2248200761U,	// ABSv1i64
    68727353U,	// ABSv2i32
    2216735289U,	// ABSv2i64
    69775929U,	// ABSv4i16
    2217783865U,	// ABSv4i32
    70824505U,	// ABSv8i16
    2218832441U,	// ABSv8i8
    100717152U,	// ADCSWr
    100717152U,	// ADCSXr
    100714278U,	// ADCWr
    100714278U,	// ADCXr
    100714798U,	// ADDG
    2216210207U,	// ADDHNv2i64_v2i32
    2284904803U,	// ADDHNv2i64_v4i32
    69775135U,	// ADDHNv4i32_v4i16
    137945443U,	// ADDHNv4i32_v8i16
    2282807651U,	// ADDHNv8i16_v16i8
    2218831647U,	// ADDHNv8i16_v8i8
    100716092U,	// ADDPL_XXI
    68202522U,	// ADDPv16i8
    2216210458U,	// ADDPv2i32
    2216734746U,	// ADDPv2i64
    2214645786U,	// ADDPv2i64p
    69775386U,	// ADDPv4i16
    70299674U,	// ADDPv4i32
    2218307610U,	// ADDPv8i16
    2218831898U,	// ADDPv8i8
    100717164U,	// ADDSWri
    0U,	// ADDSWrr
    100717164U,	// ADDSWrs
    100717164U,	// ADDSWrx
    100717164U,	// ADDSXri
    0U,	// ADDSXrr
    100717164U,	// ADDSXrs
    100717164U,	// ADDSXrx
    100717164U,	// ADDSXrx64
    100716217U,	// ADDVL_XXI
    67163115U,	// ADDVv16i8v
    67163115U,	// ADDVv4i16v
    2214646763U,	// ADDVv4i32v
    67163115U,	// ADDVv8i16v
    2214646763U,	// ADDVv8i8v
    100714479U,	// ADDWri
    0U,	// ADDWrr
    100714479U,	// ADDWrs
    100714479U,	// ADDWrx
    100714479U,	// ADDXri
    0U,	// ADDXrr
    100714479U,	// ADDXrs
    100714479U,	// ADDXrx
    100714479U,	// ADDXrx64
    167782383U,	// ADD_ZI_B
    201345007U,	// ADD_ZI_D
    239626223U,	// ADD_ZI_H
    268470255U,	// ADD_ZI_S
    302000111U,	// ADD_ZPmZ_B
    302008303U,	// ADD_ZPmZ_D
    2186307567U,	// ADD_ZPmZ_H
    302024687U,	// ADD_ZPmZ_S
    167782383U,	// ADD_ZZZ_B
    201345007U,	// ADD_ZZZ_D
    2387109871U,	// ADD_ZZZ_H
    268470255U,	// ADD_ZZZ_S
    0U,	// ADDlowTLS
    68200431U,	// ADDv16i8
    100714479U,	// ADDv1i64
    2216208367U,	// ADDv2i32
    2216732655U,	// ADDv2i64
    69773295U,	// ADDv4i16
    70297583U,	// ADDv4i32
    2218305519U,	// ADDv8i16
    2218829807U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    2248200492U,	// ADR
    335597707U,	// ADRP
    207114540U,	// ADR_LSL_ZZZ_D_0
    207114540U,	// ADR_LSL_ZZZ_D_1
    207114540U,	// ADR_LSL_ZZZ_D_2
    207114540U,	// ADR_LSL_ZZZ_D_3
    274239788U,	// ADR_LSL_ZZZ_S_0
    274239788U,	// ADR_LSL_ZZZ_S_1
    274239788U,	// ADR_LSL_ZZZ_S_2
    274239788U,	// ADR_LSL_ZZZ_S_3
    207114540U,	// ADR_SXTW_ZZZ_D_0
    207114540U,	// ADR_SXTW_ZZZ_D_1
    207114540U,	// ADR_SXTW_ZZZ_D_2
    207114540U,	// ADR_SXTW_ZZZ_D_3
    207114540U,	// ADR_UXTW_ZZZ_D_0
    207114540U,	// ADR_UXTW_ZZZ_D_1
    207114540U,	// ADR_UXTW_ZZZ_D_2
    207114540U,	// ADR_UXTW_ZZZ_D_3
    135325791U,	// AESDrr
    135325923U,	// AESErr
    68200240U,	// AESIMCrr
    0U,	// AESIMCrrTied
    68200248U,	// AESMCrr
    0U,	// AESMCrrTied
    100717171U,	// ANDSWri
    0U,	// ANDSWrr
    100717171U,	// ANDSWrs
    100717171U,	// ANDSXri
    0U,	// ANDSXrr
    100717171U,	// ANDSXrs
    302002803U,	// ANDS_PPzPP
    302044159U,	// ANDV_VPZ_B
    302044159U,	// ANDV_VPZ_D
    302044159U,	// ANDV_VPZ_H
    302044159U,	// ANDV_VPZ_S
    100714565U,	// ANDWri
    0U,	// ANDWrr
    100714565U,	// ANDWrs
    100714565U,	// ANDXri
    0U,	// ANDXrr
    100714565U,	// ANDXrs
    302000197U,	// AND_PPzPP
    201345093U,	// AND_ZI
    302000197U,	// AND_ZPmZ_B
    302008389U,	// AND_ZPmZ_D
    2186307653U,	// AND_ZPmZ_H
    302024773U,	// AND_ZPmZ_S
    201345093U,	// AND_ZZZ
    68200517U,	// ANDv16i8
    2218829893U,	// ANDv8i8
    302000217U,	// ASRD_ZPmI_B
    302008409U,	// ASRD_ZPmI_D
    2186307673U,	// ASRD_ZPmI_H
    302024793U,	// ASRD_ZPmI_S
    302002586U,	// ASRR_ZPmZ_B
    302010778U,	// ASRR_ZPmZ_D
    2186310042U,	// ASRR_ZPmZ_H
    302027162U,	// ASRR_ZPmZ_S
    100716966U,	// ASRVWr
    100716966U,	// ASRVXr
    302002598U,	// ASR_WIDE_ZPmZ_B
    2186310054U,	// ASR_WIDE_ZPmZ_H
    302027174U,	// ASR_WIDE_ZPmZ_S
    167784870U,	// ASR_WIDE_ZZZ_B
    2387112358U,	// ASR_WIDE_ZZZ_H
    268472742U,	// ASR_WIDE_ZZZ_S
    302002598U,	// ASR_ZPmI_B
    302010790U,	// ASR_ZPmI_D
    2186310054U,	// ASR_ZPmI_H
    302027174U,	// ASR_ZPmI_S
    302002598U,	// ASR_ZPmZ_B
    302010790U,	// ASR_ZPmZ_D
    2186310054U,	// ASR_ZPmZ_H
    302027174U,	// ASR_ZPmZ_S
    167784870U,	// ASR_ZZI_B
    201347494U,	// ASR_ZZI_D
    239628710U,	// ASR_ZZI_H
    268472742U,	// ASR_ZZI_S
    2248196767U,	// AUTDA
    2248197260U,	// AUTDB
    6341476U,	// AUTDZA
    6342402U,	// AUTDZB
    2248196788U,	// AUTIA
    5939U,	// AUTIA1716
    6113U,	// AUTIASP
    6167U,	// AUTIAZ
    2248197280U,	// AUTIB
    5959U,	// AUTIB1716
    6129U,	// AUTIBSP
    6181U,	// AUTIBZ
    6341492U,	// AUTIZA
    6342418U,	// AUTIZB
    6076U,	// AXFLAG
    66431U,	// B
    68203970U,	// BCAX
    369151712U,	// BFMWri
    369151712U,	// BFMXri
    0U,	// BICSWrr
    100717158U,	// BICSWrs
    0U,	// BICSXrr
    100717158U,	// BICSXrs
    302002790U,	// BICS_PPzPP
    0U,	// BICWrr
    100714283U,	// BICWrs
    0U,	// BICXrr
    100714283U,	// BICXrs
    301999915U,	// BIC_PPzPP
    301999915U,	// BIC_ZPmZ_B
    302008107U,	// BIC_ZPmZ_D
    2186307371U,	// BIC_ZPmZ_H
    302024491U,	// BIC_ZPmZ_S
    201344811U,	// BIC_ZZZ
    68200235U,	// BICv16i8
    404285227U,	// BICv2i32
    405333803U,	// BICv4i16
    405858091U,	// BICv4i32
    406382379U,	// BICv8i16
    2218829611U,	// BICv8i8
    68200719U,	// BIFv16i8
    2218830095U,	// BIFv8i8
    135328594U,	// BITv16i8
    2285957970U,	// BITv8i8
    68961U,	// BL
    6345054U,	// BLR
    2248196726U,	// BLRAA
    6346308U,	// BLRAAZ
    2248197143U,	// BLRAB
    6346323U,	// BLRABZ
    6345000U,	// BR
    2248196713U,	// BRAA
    6346301U,	// BRAAZ
    2248197130U,	// BRAB
    6346316U,	// BRABZ
    76999U,	// BRK
    302002721U,	// BRKAS_PPzP
    8891U,	// BRKA_PPmP
    301998779U,	// BRKA_PPzP
    302002757U,	// BRKBS_PPzP
    9383U,	// BRKB_PPmP
    301999271U,	// BRKB_PPzP
    302002877U,	// BRKNS_PPzP
    302001980U,	// BRKN_PPzP
    302002728U,	// BRKPAS_PPzPP
    301998823U,	// BRKPA_PPzPP
    302002764U,	// BRKPBS_PPzPP
    301999490U,	// BRKPB_PPzPP
    135327334U,	// BSLv16i8
    2285956710U,	// BSLv8i8
    87729U,	// Bcc
    2516673584U,	// CASAB
    2516675075U,	// CASAH
    2516673769U,	// CASALB
    2516675226U,	// CASALH
    2516675900U,	// CASALW
    2516675900U,	// CASALX
    2516673324U,	// CASAW
    2516673324U,	// CASAX
    2516674116U,	// CASB
    2516675594U,	// CASH
    2516673863U,	// CASLB
    2516675320U,	// CASLH
    2516676192U,	// CASLW
    2516676192U,	// CASLX
    101659U,	// CASPALW
    109851U,	// CASPALX
    99054U,	// CASPAW
    107246U,	// CASPAX
    101955U,	// CASPLW
    110147U,	// CASPLX
    102545U,	// CASPW
    110737U,	// CASPX
    2516677148U,	// CASW
    2516677148U,	// CASX
    0U,	// CATCHPAD
    436262506U,	// CBNZW
    436262506U,	// CBNZX
    436262491U,	// CBZW
    436262491U,	// CBZX
    100716354U,	// CCMNWi
    100716354U,	// CCMNWr
    100716354U,	// CCMNXi
    100716354U,	// CCMNXr
    100716620U,	// CCMPWi
    100716620U,	// CCMPWr
    100716620U,	// CCMPXi
    100716620U,	// CCMPXr
    6154U,	// CFINV
    302039874U,	// CLASTA_RPZ_B
    302039874U,	// CLASTA_RPZ_D
    302039874U,	// CLASTA_RPZ_H
    302039874U,	// CLASTA_RPZ_S
    302039874U,	// CLASTA_VPZ_B
    302039874U,	// CLASTA_VPZ_D
    302039874U,	// CLASTA_VPZ_H
    302039874U,	// CLASTA_VPZ_S
    301998914U,	// CLASTA_ZPZ_B
    302007106U,	// CLASTA_ZPZ_D
    2387632962U,	// CLASTA_ZPZ_H
    302023490U,	// CLASTA_ZPZ_S
    302040733U,	// CLASTB_RPZ_B
    302040733U,	// CLASTB_RPZ_D
    302040733U,	// CLASTB_RPZ_H
    302040733U,	// CLASTB_RPZ_S
    302040733U,	// CLASTB_VPZ_B
    302040733U,	// CLASTB_VPZ_D
    302040733U,	// CLASTB_VPZ_H
    302040733U,	// CLASTB_VPZ_S
    301999773U,	// CLASTB_ZPZ_B
    302007965U,	// CLASTB_ZPZ_D
    2387633821U,	// CLASTB_ZPZ_H
    302024349U,	// CLASTB_ZPZ_S
    6346227U,	// CLREX
    2248200846U,	// CLSWr
    2248200846U,	// CLSXr
    12942U,	// CLS_ZPmZ_B
    21134U,	// CLS_ZPmZ_D
    2181591694U,	// CLS_ZPmZ_H
    37518U,	// CLS_ZPmZ_S
    68203150U,	// CLSv16i8
    68727438U,	// CLSv2i32
    69776014U,	// CLSv4i16
    2217783950U,	// CLSv4i32
    70824590U,	// CLSv8i16
    2218832526U,	// CLSv8i8
    2248201829U,	// CLZWr
    2248201829U,	// CLZXr
    13925U,	// CLZ_ZPmZ_B
    22117U,	// CLZ_ZPmZ_D
    2181592677U,	// CLZ_ZPmZ_H
    38501U,	// CLZ_ZPmZ_S
    68204133U,	// CLZv16i8
    68728421U,	// CLZv2i32
    69776997U,	// CLZv4i16
    2217784933U,	// CLZv4i32
    70825573U,	// CLZv8i16
    2218833509U,	// CLZv8i8
    68202725U,	// CMEQv16i8
    68202725U,	// CMEQv16i8rz
    100716773U,	// CMEQv1i64
    2248200421U,	// CMEQv1i64rz
    2216210661U,	// CMEQv2i32
    68727013U,	// CMEQv2i32rz
    2216734949U,	// CMEQv2i64
    2216734949U,	// CMEQv2i64rz
    69775589U,	// CMEQv4i16
    69775589U,	// CMEQv4i16rz
    70299877U,	// CMEQv4i32
    2217783525U,	// CMEQv4i32rz
    2218307813U,	// CMEQv8i16
    70824165U,	// CMEQv8i16rz
    2218832101U,	// CMEQv8i8
    2218832101U,	// CMEQv8i8rz
    68200577U,	// CMGEv16i8
    68200577U,	// CMGEv16i8rz
    100714625U,	// CMGEv1i64
    2248198273U,	// CMGEv1i64rz
    2216208513U,	// CMGEv2i32
    68724865U,	// CMGEv2i32rz
    2216732801U,	// CMGEv2i64
    2216732801U,	// CMGEv2i64rz
    69773441U,	// CMGEv4i16
    69773441U,	// CMGEv4i16rz
    70297729U,	// CMGEv4i32
    2217781377U,	// CMGEv4i32rz
    2218305665U,	// CMGEv8i16
    70822017U,	// CMGEv8i16rz
    2218829953U,	// CMGEv8i8
    2218829953U,	// CMGEv8i8rz
    68203332U,	// CMGTv16i8
    68203332U,	// CMGTv16i8rz
    100717380U,	// CMGTv1i64
    2248201028U,	// CMGTv1i64rz
    2216211268U,	// CMGTv2i32
    68727620U,	// CMGTv2i32rz
    2216735556U,	// CMGTv2i64
    2216735556U,	// CMGTv2i64rz
    69776196U,	// CMGTv4i16
    69776196U,	// CMGTv4i16rz
    70300484U,	// CMGTv4i32
    2217784132U,	// CMGTv4i32rz
    2218308420U,	// CMGTv8i16
    70824772U,	// CMGTv8i16rz
    2218832708U,	// CMGTv8i8
    2218832708U,	// CMGTv8i8rz
    68201623U,	// CMHIv16i8
    100715671U,	// CMHIv1i64
    2216209559U,	// CMHIv2i32
    2216733847U,	// CMHIv2i64
    69774487U,	// CMHIv4i16
    70298775U,	// CMHIv4i32
    2218306711U,	// CMHIv8i16
    2218830999U,	// CMHIv8i8
    68203137U,	// CMHSv16i8
    100717185U,	// CMHSv1i64
    2216211073U,	// CMHSv2i32
    2216735361U,	// CMHSv2i64
    69776001U,	// CMHSv4i16
    70300289U,	// CMHSv4i32
    2218308225U,	// CMHSv8i16
    2218832513U,	// CMHSv8i8
    68200608U,	// CMLEv16i8rz
    2248198304U,	// CMLEv1i64rz
    68724896U,	// CMLEv2i32rz
    2216732832U,	// CMLEv2i64rz
    69773472U,	// CMLEv4i16rz
    2217781408U,	// CMLEv4i32rz
    70822048U,	// CMLEv8i16rz
    2218829984U,	// CMLEv8i8rz
    68203366U,	// CMLTv16i8rz
    2248201062U,	// CMLTv1i64rz
    68727654U,	// CMLTv2i32rz
    2216735590U,	// CMLTv2i64rz
    69776230U,	// CMLTv4i16rz
    2217784166U,	// CMLTv4i32rz
    70824806U,	// CMLTv8i16rz
    2218832742U,	// CMLTv8i8rz
    302002420U,	// CMPEQ_PPzZI_B
    302010612U,	// CMPEQ_PPzZI_D
    2622517492U,	// CMPEQ_PPzZI_H
    302026996U,	// CMPEQ_PPzZI_S
    302002420U,	// CMPEQ_PPzZZ_B
    302010612U,	// CMPEQ_PPzZZ_D
    2622517492U,	// CMPEQ_PPzZZ_H
    302026996U,	// CMPEQ_PPzZZ_S
    302002420U,	// CMPEQ_WIDE_PPzZZ_B
    2622517492U,	// CMPEQ_WIDE_PPzZZ_H
    302026996U,	// CMPEQ_WIDE_PPzZZ_S
    302000263U,	// CMPGE_PPzZI_B
    302008455U,	// CMPGE_PPzZI_D
    2622515335U,	// CMPGE_PPzZI_H
    302024839U,	// CMPGE_PPzZI_S
    302000263U,	// CMPGE_PPzZZ_B
    302008455U,	// CMPGE_PPzZZ_D
    2622515335U,	// CMPGE_PPzZZ_H
    302024839U,	// CMPGE_PPzZZ_S
    302000263U,	// CMPGE_WIDE_PPzZZ_B
    2622515335U,	// CMPGE_WIDE_PPzZZ_H
    302024839U,	// CMPGE_WIDE_PPzZZ_S
    302003018U,	// CMPGT_PPzZI_B
    302011210U,	// CMPGT_PPzZI_D
    2622518090U,	// CMPGT_PPzZI_H
    302027594U,	// CMPGT_PPzZI_S
    302003018U,	// CMPGT_PPzZZ_B
    302011210U,	// CMPGT_PPzZZ_D
    2622518090U,	// CMPGT_PPzZZ_H
    302027594U,	// CMPGT_PPzZZ_S
    302003018U,	// CMPGT_WIDE_PPzZZ_B
    2622518090U,	// CMPGT_WIDE_PPzZZ_H
    302027594U,	// CMPGT_WIDE_PPzZZ_S
    302001309U,	// CMPHI_PPzZI_B
    302009501U,	// CMPHI_PPzZI_D
    2622516381U,	// CMPHI_PPzZI_H
    302025885U,	// CMPHI_PPzZI_S
    302001309U,	// CMPHI_PPzZZ_B
    302009501U,	// CMPHI_PPzZZ_D
    2622516381U,	// CMPHI_PPzZZ_H
    302025885U,	// CMPHI_PPzZZ_S
    302001309U,	// CMPHI_WIDE_PPzZZ_B
    2622516381U,	// CMPHI_WIDE_PPzZZ_H
    302025885U,	// CMPHI_WIDE_PPzZZ_S
    302002823U,	// CMPHS_PPzZI_B
    302011015U,	// CMPHS_PPzZI_D
    2622517895U,	// CMPHS_PPzZI_H
    302027399U,	// CMPHS_PPzZI_S
    302002823U,	// CMPHS_PPzZZ_B
    302011015U,	// CMPHS_PPzZZ_D
    2622517895U,	// CMPHS_PPzZZ_H
    302027399U,	// CMPHS_PPzZZ_S
    302002823U,	// CMPHS_WIDE_PPzZZ_B
    2622517895U,	// CMPHS_WIDE_PPzZZ_H
    302027399U,	// CMPHS_WIDE_PPzZZ_S
    302000294U,	// CMPLE_PPzZI_B
    302008486U,	// CMPLE_PPzZI_D
    2622515366U,	// CMPLE_PPzZI_H
    302024870U,	// CMPLE_PPzZI_S
    302000294U,	// CMPLE_WIDE_PPzZZ_B
    2622515366U,	// CMPLE_WIDE_PPzZZ_H
    302024870U,	// CMPLE_WIDE_PPzZZ_S
    302002142U,	// CMPLO_PPzZI_B
    302010334U,	// CMPLO_PPzZI_D
    2622517214U,	// CMPLO_PPzZI_H
    302026718U,	// CMPLO_PPzZI_S
    302002142U,	// CMPLO_WIDE_PPzZZ_B
    2622517214U,	// CMPLO_WIDE_PPzZZ_H
    302026718U,	// CMPLO_WIDE_PPzZZ_S
    302002857U,	// CMPLS_PPzZI_B
    302011049U,	// CMPLS_PPzZI_D
    2622517929U,	// CMPLS_PPzZI_H
    302027433U,	// CMPLS_PPzZI_S
    302002857U,	// CMPLS_WIDE_PPzZZ_B
    2622517929U,	// CMPLS_WIDE_PPzZZ_H
    302027433U,	// CMPLS_WIDE_PPzZZ_S
    302003052U,	// CMPLT_PPzZI_B
    302011244U,	// CMPLT_PPzZI_D
    2622518124U,	// CMPLT_PPzZI_H
    302027628U,	// CMPLT_PPzZI_S
    302003052U,	// CMPLT_WIDE_PPzZZ_B
    2622518124U,	// CMPLT_WIDE_PPzZZ_H
    302027628U,	// CMPLT_WIDE_PPzZZ_S
    302000317U,	// CMPNE_PPzZI_B
    302008509U,	// CMPNE_PPzZI_D
    2622515389U,	// CMPNE_PPzZI_H
    302024893U,	// CMPNE_PPzZI_S
    302000317U,	// CMPNE_PPzZZ_B
    302008509U,	// CMPNE_PPzZZ_D
    2622515389U,	// CMPNE_PPzZZ_H
    302024893U,	// CMPNE_PPzZZ_S
    302000317U,	// CMPNE_WIDE_PPzZZ_B
    2622515389U,	// CMPNE_WIDE_PPzZZ_H
    302024893U,	// CMPNE_WIDE_PPzZZ_S
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    68203430U,	// CMTSTv16i8
    100717478U,	// CMTSTv1i64
    2216211366U,	// CMTSTv2i32
    2216735654U,	// CMTSTv2i64
    69776294U,	// CMTSTv4i16
    70300582U,	// CMTSTv4i32
    2218308518U,	// CMTSTv8i16
    2218832806U,	// CMTSTv8i8
    13194U,	// CNOT_ZPmZ_B
    21386U,	// CNOT_ZPmZ_D
    2181591946U,	// CNOT_ZPmZ_H
    37770U,	// CNOT_ZPmZ_S
    503367319U,	// CNTB_XPiI
    503367781U,	// CNTD_XPiI
    503368779U,	// CNTH_XPiI
    302043287U,	// CNTP_XPP_B
    302043287U,	// CNTP_XPP_D
    302043287U,	// CNTP_XPP_H
    302043287U,	// CNTP_XPP_S
    503371150U,	// CNTW_XPiI
    13171U,	// CNT_ZPmZ_B
    21363U,	// CNT_ZPmZ_D
    2181591923U,	// CNT_ZPmZ_H
    37747U,	// CNT_ZPmZ_S
    68203379U,	// CNTv16i8
    2218832755U,	// CNTv8i8
    302011175U,	// COMPACT_ZPZ_D
    302027559U,	// COMPACT_ZPZ_S
    13860U,	// CPY_ZPmI_B
    22052U,	// CPY_ZPmI_D
    2181592612U,	// CPY_ZPmI_H
    38436U,	// CPY_ZPmI_S
    13860U,	// CPY_ZPmR_B
    22052U,	// CPY_ZPmR_D
    34108964U,	// CPY_ZPmR_H
    38436U,	// CPY_ZPmR_S
    13860U,	// CPY_ZPmV_B
    22052U,	// CPY_ZPmV_D
    34108964U,	// CPY_ZPmV_H
    38436U,	// CPY_ZPmV_S
    302003748U,	// CPY_ZPzI_B
    302011940U,	// CPY_ZPzI_D
    2622518820U,	// CPY_ZPzI_H
    302028324U,	// CPY_ZPzI_S
    67163239U,	// CPYi16
    2214646887U,	// CPYi32
    67163239U,	// CPYi64
    2214646887U,	// CPYi8
    100713393U,	// CRC32Brr
    100713556U,	// CRC32CBrr
    100715047U,	// CRC32CHrr
    100717817U,	// CRC32CWrr
    100718051U,	// CRC32CXrr
    100714894U,	// CRC32Hrr
    100717759U,	// CRC32Wrr
    100717990U,	// CRC32Xrr
    100715960U,	// CSELWr
    100715960U,	// CSELXr
    100714303U,	// CSINCWr
    100714303U,	// CSINCXr
    100717663U,	// CSINVWr
    100717663U,	// CSINVXr
    100714822U,	// CSNEGWr
    100714822U,	// CSNEGXr
    2248200427U,	// CTERMEQ_WW
    2248200427U,	// CTERMEQ_XX
    2248198324U,	// CTERMNE_WW
    2248198324U,	// CTERMNE_XX
    0U,	// CompilerBarrier
    73783U,	// DCPS1
    74210U,	// DCPS2
    74276U,	// DCPS3
    536921183U,	// DECB_XPiI
    536922063U,	// DECD_XPiI
    536889295U,	// DECD_ZPiI
    536922674U,	// DECH_XPiI
    6842930U,	// DECH_ZPiI
    2315309051U,	// DECP_XP_B
    2348863483U,	// DECP_XP_D
    2717962235U,	// DECP_XP_H
    2415972347U,	// DECP_XP_S
    2147504123U,	// DECP_ZP_D
    604532731U,	// DECP_ZP_H
    2147520507U,	// DECP_ZP_S
    536925444U,	// DECW_XPiI
    536909060U,	// DECW_ZPiI
    116075U,	// DMB
    6144U,	// DRPS
    116298U,	// DSB
    637554433U,	// DUPM_ZI
    671101099U,	// DUP_ZI_B
    704663723U,	// DUP_ZI_D
    7368875U,	// DUP_ZI_H
    738234539U,	// DUP_ZI_S
    2248159403U,	// DUP_ZR_B
    2248167595U,	// DUP_ZR_D
    611872939U,	// DUP_ZR_H
    2248183979U,	// DUP_ZR_S
    167784619U,	// DUP_ZZI_B
    201347243U,	// DUP_ZZI_D
    776499371U,	// DUP_ZZI_H
    127147U,	// DUP_ZZI_Q
    268472491U,	// DUP_ZZI_S
    2249240747U,	// DUPv16i8gpr
    2215686315U,	// DUPv16i8lane
    2249765035U,	// DUPv2i32gpr
    2216210603U,	// DUPv2i32lane
    2250289323U,	// DUPv2i64gpr
    69251243U,	// DUPv2i64lane
    2250813611U,	// DUPv4i16gpr
    69775531U,	// DUPv4i16lane
    2251337899U,	// DUPv4i32gpr
    2217783467U,	// DUPv4i32lane
    2251862187U,	// DUPv8i16gpr
    70824107U,	// DUPv8i16lane
    2252386475U,	// DUPv8i8gpr
    2218832043U,	// DUPv8i8lane
    0U,	// EMITBKEY
    0U,	// EONWrr
    100716360U,	// EONWrs
    0U,	// EONXrr
    100716360U,	// EONXrs
    68198942U,	// EOR3
    302002934U,	// EORS_PPzPP
    302044280U,	// EORV_VPZ_B
    302044280U,	// EORV_VPZ_D
    302044280U,	// EORV_VPZ_H
    302044280U,	// EORV_VPZ_S
    100716927U,	// EORWri
    0U,	// EORWrr
    100716927U,	// EORWrs
    100716927U,	// EORXri
    0U,	// EORXrr
    100716927U,	// EORXrs
    302002559U,	// EOR_PPzPP
    201347455U,	// EOR_ZI
    302002559U,	// EOR_ZPmZ_B
    302010751U,	// EOR_ZPmZ_D
    2186310015U,	// EOR_ZPmZ_H
    302027135U,	// EOR_ZPmZ_S
    201347455U,	// EOR_ZZZ
    68202879U,	// EORv16i8
    2218832255U,	// EORv8i8
    6149U,	// ERET
    6052U,	// ERETAA
    6059U,	// ERETAB
    100717004U,	// EXTRWrri
    100717004U,	// EXTRXrri
    167785397U,	// EXT_ZZI
    68203445U,	// EXTv16i8
    2218832821U,	// EXTv8i8
    0U,	// F128CSEL
    100714420U,	// FABD16
    100714420U,	// FABD32
    100714420U,	// FABD64
    302008244U,	// FABD_ZPmZ_D
    2186307508U,	// FABD_ZPmZ_H
    302024628U,	// FABD_ZPmZ_S
    2216208308U,	// FABDv2f32
    2216732596U,	// FABDv2f64
    69773236U,	// FABDv4f16
    70297524U,	// FABDv4f32
    2218305460U,	// FABDv8f16
    2248200760U,	// FABSDr
    2248200760U,	// FABSHr
    2248200760U,	// FABSSr
    21048U,	// FABS_ZPmZ_D
    2181591608U,	// FABS_ZPmZ_H
    37432U,	// FABS_ZPmZ_S
    68727352U,	// FABSv2f32
    2216735288U,	// FABSv2f64
    69775928U,	// FABSv4f16
    2217783864U,	// FABSv4f32
    70824504U,	// FABSv8f16
    100714617U,	// FACGE16
    100714617U,	// FACGE32
    100714617U,	// FACGE64
    302008441U,	// FACGE_PPzZZ_D
    2622515321U,	// FACGE_PPzZZ_H
    302024825U,	// FACGE_PPzZZ_S
    2216208505U,	// FACGEv2f32
    2216732793U,	// FACGEv2f64
    69773433U,	// FACGEv4f16
    70297721U,	// FACGEv4f32
    2218305657U,	// FACGEv8f16
    100717372U,	// FACGT16
    100717372U,	// FACGT32
    100717372U,	// FACGT64
    302011196U,	// FACGT_PPzZZ_D
    2622518076U,	// FACGT_PPzZZ_H
    302027580U,	// FACGT_PPzZZ_S
    2216211260U,	// FACGTv2f32
    2216735548U,	// FACGTv2f64
    69776188U,	// FACGTv4f16
    70300476U,	// FACGTv4f32
    2218308412U,	// FACGTv8f16
    302039704U,	// FADDA_VPZ_D
    302039704U,	// FADDA_VPZ_H
    302039704U,	// FADDA_VPZ_S
    100714491U,	// FADDDrr
    100714491U,	// FADDHrr
    2216210457U,	// FADDPv2f32
    2216734745U,	// FADDPv2f64
    2214645785U,	// FADDPv2i16p
    67162137U,	// FADDPv2i32p
    2214645785U,	// FADDPv2i64p
    69775385U,	// FADDPv4f16
    70299673U,	// FADDPv4f32
    2218307609U,	// FADDPv8f16
    100714491U,	// FADDSrr
    302044138U,	// FADDV_VPZ_D
    302044138U,	// FADDV_VPZ_H
    302044138U,	// FADDV_VPZ_S
    302008315U,	// FADD_ZPmI_D
    2186307579U,	// FADD_ZPmI_H
    302024699U,	// FADD_ZPmI_S
    302008315U,	// FADD_ZPmZ_D
    2186307579U,	// FADD_ZPmZ_H
    302024699U,	// FADD_ZPmZ_S
    201345019U,	// FADD_ZZZ_D
    2387109883U,	// FADD_ZZZ_H
    268470267U,	// FADD_ZZZ_S
    2216208379U,	// FADDv2f32
    2216732667U,	// FADDv2f64
    69773307U,	// FADDv4f16
    70297595U,	// FADDv4f32
    2218305531U,	// FADDv8f16
    302008301U,	// FCADD_ZPmZ_D
    2186307565U,	// FCADD_ZPmZ_H
    302024685U,	// FCADD_ZPmZ_S
    2216208365U,	// FCADDv2f32
    2216732653U,	// FCADDv2f64
    69773293U,	// FCADDv4f16
    70297581U,	// FCADDv4f32
    2218305517U,	// FCADDv8f16
    100716619U,	// FCCMPDrr
    100714708U,	// FCCMPEDrr
    100714708U,	// FCCMPEHrr
    100714708U,	// FCCMPESrr
    100716619U,	// FCCMPHrr
    100716619U,	// FCCMPSrr
    100716772U,	// FCMEQ16
    100716772U,	// FCMEQ32
    100716772U,	// FCMEQ64
    302010596U,	// FCMEQ_PPzZ0_D
    2622517476U,	// FCMEQ_PPzZ0_H
    302026980U,	// FCMEQ_PPzZ0_S
    302010596U,	// FCMEQ_PPzZZ_D
    2622517476U,	// FCMEQ_PPzZZ_H
    302026980U,	// FCMEQ_PPzZZ_S
    100716772U,	// FCMEQv1i16rz
    100716772U,	// FCMEQv1i32rz
    100716772U,	// FCMEQv1i64rz
    2216210660U,	// FCMEQv2f32
    2216734948U,	// FCMEQv2f64
    2216210660U,	// FCMEQv2i32rz
    69251300U,	// FCMEQv2i64rz
    69775588U,	// FCMEQv4f16
    70299876U,	// FCMEQv4f32
    2217259236U,	// FCMEQv4i16rz
    70299876U,	// FCMEQv4i32rz
    2218307812U,	// FCMEQv8f16
    2218307812U,	// FCMEQv8i16rz
    100714624U,	// FCMGE16
    100714624U,	// FCMGE32
    100714624U,	// FCMGE64
    302008448U,	// FCMGE_PPzZ0_D
    2622515328U,	// FCMGE_PPzZ0_H
    302024832U,	// FCMGE_PPzZ0_S
    302008448U,	// FCMGE_PPzZZ_D
    2622515328U,	// FCMGE_PPzZZ_H
    302024832U,	// FCMGE_PPzZZ_S
    100714624U,	// FCMGEv1i16rz
    100714624U,	// FCMGEv1i32rz
    100714624U,	// FCMGEv1i64rz
    2216208512U,	// FCMGEv2f32
    2216732800U,	// FCMGEv2f64
    2216208512U,	// FCMGEv2i32rz
    69249152U,	// FCMGEv2i64rz
    69773440U,	// FCMGEv4f16
    70297728U,	// FCMGEv4f32
    2217257088U,	// FCMGEv4i16rz
    70297728U,	// FCMGEv4i32rz
    2218305664U,	// FCMGEv8f16
    2218305664U,	// FCMGEv8i16rz
    100717379U,	// FCMGT16
    100717379U,	// FCMGT32
    100717379U,	// FCMGT64
    302011203U,	// FCMGT_PPzZ0_D
    2622518083U,	// FCMGT_PPzZ0_H
    302027587U,	// FCMGT_PPzZ0_S
    302011203U,	// FCMGT_PPzZZ_D
    2622518083U,	// FCMGT_PPzZZ_H
    302027587U,	// FCMGT_PPzZZ_S
    100717379U,	// FCMGTv1i16rz
    100717379U,	// FCMGTv1i32rz
    100717379U,	// FCMGTv1i64rz
    2216211267U,	// FCMGTv2f32
    2216735555U,	// FCMGTv2f64
    2216211267U,	// FCMGTv2i32rz
    69251907U,	// FCMGTv2i64rz
    69776195U,	// FCMGTv4f16
    70300483U,	// FCMGTv4f32
    2217259843U,	// FCMGTv4i16rz
    70300483U,	// FCMGTv4i32rz
    2218308419U,	// FCMGTv8f16
    2218308419U,	// FCMGTv8i16rz
    302006977U,	// FCMLA_ZPmZZ_D
    2186306241U,	// FCMLA_ZPmZZ_H
    302023361U,	// FCMLA_ZPmZZ_S
    243294913U,	// FCMLA_ZZZI_H
    2952823489U,	// FCMLA_ZZZI_S
    2283332289U,	// FCMLAv2f32
    2283856577U,	// FCMLAv2f64
    136897217U,	// FCMLAv4f16
    136897217U,	// FCMLAv4f16_indexed
    137421505U,	// FCMLAv4f32
    137421505U,	// FCMLAv4f32_indexed
    2285429441U,	// FCMLAv8f16
    2285429441U,	// FCMLAv8f16_indexed
    302008479U,	// FCMLE_PPzZ0_D
    2622515359U,	// FCMLE_PPzZ0_H
    302024863U,	// FCMLE_PPzZ0_S
    100714655U,	// FCMLEv1i16rz
    100714655U,	// FCMLEv1i32rz
    100714655U,	// FCMLEv1i64rz
    2216208543U,	// FCMLEv2i32rz
    69249183U,	// FCMLEv2i64rz
    2217257119U,	// FCMLEv4i16rz
    70297759U,	// FCMLEv4i32rz
    2218305695U,	// FCMLEv8i16rz
    302011237U,	// FCMLT_PPzZ0_D
    2622518117U,	// FCMLT_PPzZ0_H
    302027621U,	// FCMLT_PPzZ0_S
    100717413U,	// FCMLTv1i16rz
    100717413U,	// FCMLTv1i32rz
    100717413U,	// FCMLTv1i64rz
    2216211301U,	// FCMLTv2i32rz
    69251941U,	// FCMLTv2i64rz
    2217259877U,	// FCMLTv4i16rz
    70300517U,	// FCMLTv4i32rz
    2218308453U,	// FCMLTv8i16rz
    302008493U,	// FCMNE_PPzZ0_D
    2622515373U,	// FCMNE_PPzZ0_H
    302024877U,	// FCMNE_PPzZ0_S
    302008493U,	// FCMNE_PPzZZ_D
    2622515373U,	// FCMNE_PPzZZ_H
    302024877U,	// FCMNE_PPzZZ_S
    8966226U,	// FCMPDri
    2248200274U,	// FCMPDrr
    8964316U,	// FCMPEDri
    2248198364U,	// FCMPEDrr
    8964316U,	// FCMPEHri
    2248198364U,	// FCMPEHrr
    8964316U,	// FCMPESri
    2248198364U,	// FCMPESrr
    8966226U,	// FCMPHri
    2248200274U,	// FCMPHrr
    8966226U,	// FCMPSri
    2248200274U,	// FCMPSrr
    302010341U,	// FCMUO_PPzZZ_D
    2622517221U,	// FCMUO_PPzZZ_H
    302026725U,	// FCMUO_PPzZZ_S
    22051U,	// FCPY_ZPmI_D
    34108963U,	// FCPY_ZPmI_H
    38435U,	// FCPY_ZPmI_S
    100715959U,	// FCSELDrrr
    100715959U,	// FCSELHrrr
    100715959U,	// FCSELSrrr
    2248200752U,	// FCVTASUWDr
    2248200752U,	// FCVTASUWHr
    2248200752U,	// FCVTASUWSr
    2248200752U,	// FCVTASUXDr
    2248200752U,	// FCVTASUXHr
    2248200752U,	// FCVTASUXSr
    2248200752U,	// FCVTASv1f16
    2248200752U,	// FCVTASv1i32
    2248200752U,	// FCVTASv1i64
    68727344U,	// FCVTASv2f32
    2216735280U,	// FCVTASv2f64
    69775920U,	// FCVTASv4f16
    2217783856U,	// FCVTASv4f32
    70824496U,	// FCVTASv8f16
    2248201146U,	// FCVTAUUWDr
    2248201146U,	// FCVTAUUWHr
    2248201146U,	// FCVTAUUWSr
    2248201146U,	// FCVTAUUXDr
    2248201146U,	// FCVTAUUXHr
    2248201146U,	// FCVTAUUXSr
    2248201146U,	// FCVTAUv1f16
    2248201146U,	// FCVTAUv1i32
    2248201146U,	// FCVTAUv1i64
    68727738U,	// FCVTAUv2f32
    2216735674U,	// FCVTAUv2f64
    69776314U,	// FCVTAUv4f16
    2217784250U,	// FCVTAUv4f32
    70824890U,	// FCVTAUv8f16
    2248201133U,	// FCVTDHr
    2248201133U,	// FCVTDSr
    2248201133U,	// FCVTHDr
    2248201133U,	// FCVTHSr
    69250711U,	// FCVTLv2i32
    70299287U,	// FCVTLv4i16
    2216730961U,	// FCVTLv4i32
    70295889U,	// FCVTLv8i16
    2248200880U,	// FCVTMSUWDr
    2248200880U,	// FCVTMSUWHr
    2248200880U,	// FCVTMSUWSr
    2248200880U,	// FCVTMSUXDr
    2248200880U,	// FCVTMSUXHr
    2248200880U,	// FCVTMSUXSr
    2248200880U,	// FCVTMSv1f16
    2248200880U,	// FCVTMSv1i32
    2248200880U,	// FCVTMSv1i64
    68727472U,	// FCVTMSv2f32
    2216735408U,	// FCVTMSv2f64
    69776048U,	// FCVTMSv4f16
    2217783984U,	// FCVTMSv4f32
    70824624U,	// FCVTMSv8f16
    2248201162U,	// FCVTMUUWDr
    2248201162U,	// FCVTMUUWHr
    2248201162U,	// FCVTMUUWSr
    2248201162U,	// FCVTMUUXDr
    2248201162U,	// FCVTMUUXHr
    2248201162U,	// FCVTMUUXSr
    2248201162U,	// FCVTMUv1f16
    2248201162U,	// FCVTMUv1i32
    2248201162U,	// FCVTMUv1i64
    68727754U,	// FCVTMUv2f32
    2216735690U,	// FCVTMUv2f64
    69776330U,	// FCVTMUv4f16
    2217784266U,	// FCVTMUv4f32
    70824906U,	// FCVTMUv8f16
    2248200906U,	// FCVTNSUWDr
    2248200906U,	// FCVTNSUWHr
    2248200906U,	// FCVTNSUWSr
    2248200906U,	// FCVTNSUXDr
    2248200906U,	// FCVTNSUXHr
    2248200906U,	// FCVTNSUXSr
    2248200906U,	// FCVTNSv1f16
    2248200906U,	// FCVTNSv1i32
    2248200906U,	// FCVTNSv1i64
    68727498U,	// FCVTNSv2f32
    2216735434U,	// FCVTNSv2f64
    69776074U,	// FCVTNSv4f16
    2217784010U,	// FCVTNSv4f32
    70824650U,	// FCVTNSv8f16
    2248201170U,	// FCVTNUUWDr
    2248201170U,	// FCVTNUUWHr
    2248201170U,	// FCVTNUUWSr
    2248201170U,	// FCVTNUUXDr
    2248201170U,	// FCVTNUUXHr
    2248201170U,	// FCVTNUUXSr
    2248201170U,	// FCVTNUv1f16
    2248201170U,	// FCVTNUv1i32
    2248201170U,	// FCVTNUv1i64
    68727762U,	// FCVTNUv2f32
    2216735698U,	// FCVTNUv2f64
    69776338U,	// FCVTNUv4f16
    2217784274U,	// FCVTNUv4f32
    70824914U,	// FCVTNUv8f16
    2216210300U,	// FCVTNv2i32
    2217258876U,	// FCVTNv4i16
    2284904855U,	// FCVTNv4i32
    2285429143U,	// FCVTNv8i16
    2248200929U,	// FCVTPSUWDr
    2248200929U,	// FCVTPSUWHr
    2248200929U,	// FCVTPSUWSr
    2248200929U,	// FCVTPSUXDr
    2248200929U,	// FCVTPSUXHr
    2248200929U,	// FCVTPSUXSr
    2248200929U,	// FCVTPSv1f16
    2248200929U,	// FCVTPSv1i32
    2248200929U,	// FCVTPSv1i64
    68727521U,	// FCVTPSv2f32
    2216735457U,	// FCVTPSv2f64
    69776097U,	// FCVTPSv4f16
    2217784033U,	// FCVTPSv4f32
    70824673U,	// FCVTPSv8f16
    2248201178U,	// FCVTPUUWDr
    2248201178U,	// FCVTPUUWHr
    2248201178U,	// FCVTPUUWSr
    2248201178U,	// FCVTPUUXDr
    2248201178U,	// FCVTPUUXHr
    2248201178U,	// FCVTPUUXSr
    2248201178U,	// FCVTPUv1f16
    2248201178U,	// FCVTPUv1i32
    2248201178U,	// FCVTPUv1i64
    68727770U,	// FCVTPUv2f32
    2216735706U,	// FCVTPUv2f64
    69776346U,	// FCVTPUv4f16
    2217784282U,	// FCVTPUv4f32
    70824922U,	// FCVTPUv8f16
    2248201133U,	// FCVTSDr
    2248201133U,	// FCVTSHr
    2248200114U,	// FCVTXNv1i64
    2216210354U,	// FCVTXNv2f32
    2284904909U,	// FCVTXNv4f32
    100717334U,	// FCVTZSSWDri
    100717334U,	// FCVTZSSWHri
    100717334U,	// FCVTZSSWSri
    100717334U,	// FCVTZSSXDri
    100717334U,	// FCVTZSSXHri
    100717334U,	// FCVTZSSXSri
    2248200982U,	// FCVTZSUWDr
    2248200982U,	// FCVTZSUWHr
    2248200982U,	// FCVTZSUWSr
    2248200982U,	// FCVTZSUXDr
    2248200982U,	// FCVTZSUXHr
    2248200982U,	// FCVTZSUXSr
    21270U,	// FCVTZS_ZPmZ_DtoD
    37654U,	// FCVTZS_ZPmZ_DtoS
    21270U,	// FCVTZS_ZPmZ_HtoD
    2181591830U,	// FCVTZS_ZPmZ_HtoH
    37654U,	// FCVTZS_ZPmZ_HtoS
    21270U,	// FCVTZS_ZPmZ_StoD
    37654U,	// FCVTZS_ZPmZ_StoS
    100717334U,	// FCVTZSd
    100717334U,	// FCVTZSh
    100717334U,	// FCVTZSs
    2248200982U,	// FCVTZSv1f16
    2248200982U,	// FCVTZSv1i32
    2248200982U,	// FCVTZSv1i64
    68727574U,	// FCVTZSv2f32
    2216735510U,	// FCVTZSv2f64
    2216211222U,	// FCVTZSv2i32_shift
    2216735510U,	// FCVTZSv2i64_shift
    69776150U,	// FCVTZSv4f16
    2217784086U,	// FCVTZSv4f32
    69776150U,	// FCVTZSv4i16_shift
    70300438U,	// FCVTZSv4i32_shift
    70824726U,	// FCVTZSv8f16
    2218308374U,	// FCVTZSv8i16_shift
    100717538U,	// FCVTZUSWDri
    100717538U,	// FCVTZUSWHri
    100717538U,	// FCVTZUSWSri
    100717538U,	// FCVTZUSXDri
    100717538U,	// FCVTZUSXHri
    100717538U,	// FCVTZUSXSri
    2248201186U,	// FCVTZUUWDr
    2248201186U,	// FCVTZUUWHr
    2248201186U,	// FCVTZUUWSr
    2248201186U,	// FCVTZUUXDr
    2248201186U,	// FCVTZUUXHr
    2248201186U,	// FCVTZUUXSr
    21474U,	// FCVTZU_ZPmZ_DtoD
    37858U,	// FCVTZU_ZPmZ_DtoS
    21474U,	// FCVTZU_ZPmZ_HtoD
    2181592034U,	// FCVTZU_ZPmZ_HtoH
    37858U,	// FCVTZU_ZPmZ_HtoS
    21474U,	// FCVTZU_ZPmZ_StoD
    37858U,	// FCVTZU_ZPmZ_StoS
    100717538U,	// FCVTZUd
    100717538U,	// FCVTZUh
    100717538U,	// FCVTZUs
    2248201186U,	// FCVTZUv1f16
    2248201186U,	// FCVTZUv1i32
    2248201186U,	// FCVTZUv1i64
    68727778U,	// FCVTZUv2f32
    2216735714U,	// FCVTZUv2f64
    2216211426U,	// FCVTZUv2i32_shift
    2216735714U,	// FCVTZUv2i64_shift
    69776354U,	// FCVTZUv4f16
    2217784290U,	// FCVTZUv4f32
    69776354U,	// FCVTZUv4i16_shift
    70300642U,	// FCVTZUv4i32_shift
    70824930U,	// FCVTZUv8f16
    2218308578U,	// FCVTZUv8i16_shift
    2181591981U,	// FCVT_ZPmZ_DtoH
    37805U,	// FCVT_ZPmZ_DtoS
    21421U,	// FCVT_ZPmZ_HtoD
    37805U,	// FCVT_ZPmZ_HtoS
    21421U,	// FCVT_ZPmZ_StoD
    2181591981U,	// FCVT_ZPmZ_StoH
    100717590U,	// FDIVDrr
    100717590U,	// FDIVHrr
    302010861U,	// FDIVR_ZPmZ_D
    2186310125U,	// FDIVR_ZPmZ_H
    302027245U,	// FDIVR_ZPmZ_S
    100717590U,	// FDIVSrr
    302011414U,	// FDIV_ZPmZ_D
    2186310678U,	// FDIV_ZPmZ_H
    302027798U,	// FDIV_ZPmZ_S
    2216211478U,	// FDIVv2f32
    2216735766U,	// FDIVv2f64
    69776406U,	// FDIVv4f16
    70300694U,	// FDIVv4f32
    2218308630U,	// FDIVv8f16
    838881450U,	// FDUP_ZI_D
    9466026U,	// FDUP_ZI_H
    838897834U,	// FDUP_ZI_S
    2348827387U,	// FEXPA_ZZ_D
    608723707U,	// FEXPA_ZZ_H
    2415952635U,	// FEXPA_ZZ_S
    2248200990U,	// FJCVTZS
    100714527U,	// FMADDDrrr
    100714527U,	// FMADDHrrr
    100714527U,	// FMADDSrrr
    302008224U,	// FMAD_ZPmZZ_D
    2186307488U,	// FMAD_ZPmZZ_H
    302024608U,	// FMAD_ZPmZZ_S
    100718024U,	// FMAXDrr
    100718024U,	// FMAXHrr
    100716281U,	// FMAXNMDrr
    100716281U,	// FMAXNMHrr
    2216210529U,	// FMAXNMPv2f32
    2216734817U,	// FMAXNMPv2f64
    2214645857U,	// FMAXNMPv2i16p
    67162209U,	// FMAXNMPv2i32p
    2214645857U,	// FMAXNMPv2i64p
    69775457U,	// FMAXNMPv4f16
    70299745U,	// FMAXNMPv4f32
    2218307681U,	// FMAXNMPv8f16
    100716281U,	// FMAXNMSrr
    302044225U,	// FMAXNMV_VPZ_D
    302044225U,	// FMAXNMV_VPZ_H
    302044225U,	// FMAXNMV_VPZ_S
    67163201U,	// FMAXNMVv4i16v
    2214646849U,	// FMAXNMVv4i32v
    67163201U,	// FMAXNMVv8i16v
    302010105U,	// FMAXNM_ZPmI_D
    2186309369U,	// FMAXNM_ZPmI_H
    302026489U,	// FMAXNM_ZPmI_S
    302010105U,	// FMAXNM_ZPmZ_D
    2186309369U,	// FMAXNM_ZPmZ_H
    302026489U,	// FMAXNM_ZPmZ_S
    2216210169U,	// FMAXNMv2f32
    2216734457U,	// FMAXNMv2f64
    69775097U,	// FMAXNMv4f16
    70299385U,	// FMAXNMv4f32
    2218307321U,	// FMAXNMv8f16
    2216210620U,	// FMAXPv2f32
    2216734908U,	// FMAXPv2f64
    2214645948U,	// FMAXPv2i16p
    67162300U,	// FMAXPv2i32p
    2214645948U,	// FMAXPv2i64p
    69775548U,	// FMAXPv4f16
    70299836U,	// FMAXPv4f32
    2218307772U,	// FMAXPv8f16
    100718024U,	// FMAXSrr
    302044286U,	// FMAXV_VPZ_D
    302044286U,	// FMAXV_VPZ_H
    302044286U,	// FMAXV_VPZ_S
    67163262U,	// FMAXVv4i16v
    2214646910U,	// FMAXVv4i32v
    67163262U,	// FMAXVv8i16v
    302011848U,	// FMAX_ZPmI_D
    2186311112U,	// FMAX_ZPmI_H
    302028232U,	// FMAX_ZPmI_S
    302011848U,	// FMAX_ZPmZ_D
    2186311112U,	// FMAX_ZPmZ_H
    302028232U,	// FMAX_ZPmZ_S
    2216211912U,	// FMAXv2f32
    2216736200U,	// FMAXv2f64
    69776840U,	// FMAXv4f16
    70301128U,	// FMAXv4f32
    2218309064U,	// FMAXv8f16
    100716326U,	// FMINDrr
    100716326U,	// FMINHrr
    100716273U,	// FMINNMDrr
    100716273U,	// FMINNMHrr
    2216210520U,	// FMINNMPv2f32
    2216734808U,	// FMINNMPv2f64
    2214645848U,	// FMINNMPv2i16p
    67162200U,	// FMINNMPv2i32p
    2214645848U,	// FMINNMPv2i64p
    69775448U,	// FMINNMPv4f16
    70299736U,	// FMINNMPv4f32
    2218307672U,	// FMINNMPv8f16
    100716273U,	// FMINNMSrr
    302044216U,	// FMINNMV_VPZ_D
    302044216U,	// FMINNMV_VPZ_H
    302044216U,	// FMINNMV_VPZ_S
    67163192U,	// FMINNMVv4i16v
    2214646840U,	// FMINNMVv4i32v
    67163192U,	// FMINNMVv8i16v
    302010097U,	// FMINNM_ZPmI_D
    2186309361U,	// FMINNM_ZPmI_H
    302026481U,	// FMINNM_ZPmI_S
    302010097U,	// FMINNM_ZPmZ_D
    2186309361U,	// FMINNM_ZPmZ_H
    302026481U,	// FMINNM_ZPmZ_S
    2216210161U,	// FMINNMv2f32
    2216734449U,	// FMINNMv2f64
    69775089U,	// FMINNMv4f16
    70299377U,	// FMINNMv4f32
    2218307313U,	// FMINNMv8f16
    2216210544U,	// FMINPv2f32
    2216734832U,	// FMINPv2f64
    2214645872U,	// FMINPv2i16p
    67162224U,	// FMINPv2i32p
    2214645872U,	// FMINPv2i64p
    69775472U,	// FMINPv4f16
    70299760U,	// FMINPv4f32
    2218307696U,	// FMINPv8f16
    100716326U,	// FMINSrr
    302044234U,	// FMINV_VPZ_D
    302044234U,	// FMINV_VPZ_H
    302044234U,	// FMINV_VPZ_S
    67163210U,	// FMINVv4i16v
    2214646858U,	// FMINVv4i32v
    67163210U,	// FMINVv8i16v
    302010150U,	// FMIN_ZPmI_D
    2186309414U,	// FMIN_ZPmI_H
    302026534U,	// FMIN_ZPmI_S
    302010150U,	// FMIN_ZPmZ_D
    2186309414U,	// FMIN_ZPmZ_H
    302026534U,	// FMIN_ZPmZ_S
    2216210214U,	// FMINv2f32
    2216734502U,	// FMINv2f64
    69775142U,	// FMINv4f16
    70299430U,	// FMINv4f32
    2218307366U,	// FMINv8f16
    135848117U,	// FMLAL2lanev4f16
    137420981U,	// FMLAL2lanev8f16
    135848117U,	// FMLAL2v4f16
    137420981U,	// FMLAL2v8f16
    135851250U,	// FMLALlanev4f16
    137424114U,	// FMLALlanev8f16
    135851250U,	// FMLALv4f16
    137424114U,	// FMLALv8f16
    302006984U,	// FMLA_ZPmZZ_D
    2186306248U,	// FMLA_ZPmZZ_H
    302023368U,	// FMLA_ZPmZZ_S
    3019915976U,	// FMLA_ZZZI_D
    612393672U,	// FMLA_ZZZI_H
    2952823496U,	// FMLA_ZZZI_S
    369189576U,	// FMLAv1i16_indexed
    369189576U,	// FMLAv1i32_indexed
    369189576U,	// FMLAv1i64_indexed
    2283332296U,	// FMLAv2f32
    2283856584U,	// FMLAv2f64
    2283332296U,	// FMLAv2i32_indexed
    2283856584U,	// FMLAv2i64_indexed
    136897224U,	// FMLAv4f16
    137421512U,	// FMLAv4f32
    136897224U,	// FMLAv4i16_indexed
    137421512U,	// FMLAv4i32_indexed
    2285429448U,	// FMLAv8f16
    2285429448U,	// FMLAv8i16_indexed
    135848249U,	// FMLSL2lanev4f16
    137421113U,	// FMLSL2lanev8f16
    135848249U,	// FMLSL2v4f16
    137421113U,	// FMLSL2v8f16
    135851636U,	// FMLSLlanev4f16
    137424500U,	// FMLSLlanev8f16
    135851636U,	// FMLSLv4f16
    137424500U,	// FMLSLv8f16
    302011036U,	// FMLS_ZPmZZ_D
    2186310300U,	// FMLS_ZPmZZ_H
    302027420U,	// FMLS_ZPmZZ_S
    3019920028U,	// FMLS_ZZZI_D
    612397724U,	// FMLS_ZZZI_H
    2952827548U,	// FMLS_ZZZI_S
    369193628U,	// FMLSv1i16_indexed
    369193628U,	// FMLSv1i32_indexed
    369193628U,	// FMLSv1i64_indexed
    2283336348U,	// FMLSv2f32
    2283860636U,	// FMLSv2f64
    2283336348U,	// FMLSv2i32_indexed
    2283860636U,	// FMLSv2i64_indexed
    136901276U,	// FMLSv4f16
    137425564U,	// FMLSv4f32
    136901276U,	// FMLSv4i16_indexed
    137425564U,	// FMLSv4i32_indexed
    2285433500U,	// FMLSv8f16
    2285433500U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    67163238U,	// FMOVDXHighr
    2248201318U,	// FMOVDXr
    838915174U,	// FMOVDi
    2248201318U,	// FMOVDr
    0U,	// FMOVH0
    2248201318U,	// FMOVHWr
    2248201318U,	// FMOVHXr
    838915174U,	// FMOVHi
    2248201318U,	// FMOVHr
    0U,	// FMOVS0
    2248201318U,	// FMOVSWr
    838915174U,	// FMOVSi
    2248201318U,	// FMOVSr
    2248201318U,	// FMOVWHr
    2248201318U,	// FMOVWSr
    2258154598U,	// FMOVXDHighr
    2248201318U,	// FMOVXDr
    2248201318U,	// FMOVXHr
    840479846U,	// FMOVv2f32_ns
    841004134U,	// FMOVv2f64_ns
    841528422U,	// FMOVv4f16_ns
    842052710U,	// FMOVv4f32_ns
    842576998U,	// FMOVv8f16_ns
    302007892U,	// FMSB_ZPmZZ_D
    2186307156U,	// FMSB_ZPmZZ_H
    302024276U,	// FMSB_ZPmZZ_S
    100714181U,	// FMSUBDrrr
    100714181U,	// FMSUBHrrr
    100714181U,	// FMSUBSrrr
    100716190U,	// FMULDrr
    100716190U,	// FMULHrr
    100716190U,	// FMULSrr
    100718083U,	// FMULX16
    100718083U,	// FMULX32
    100718083U,	// FMULX64
    302011907U,	// FMULX_ZPmZ_D
    2186311171U,	// FMULX_ZPmZ_H
    302028291U,	// FMULX_ZPmZ_S
    100718083U,	// FMULXv1i16_indexed
    100718083U,	// FMULXv1i32_indexed
    100718083U,	// FMULXv1i64_indexed
    2216211971U,	// FMULXv2f32
    2216736259U,	// FMULXv2f64
    2216211971U,	// FMULXv2i32_indexed
    2216736259U,	// FMULXv2i64_indexed
    69776899U,	// FMULXv4f16
    70301187U,	// FMULXv4f32
    69776899U,	// FMULXv4i16_indexed
    70301187U,	// FMULXv4i32_indexed
    2218309123U,	// FMULXv8f16
    2218309123U,	// FMULXv8i16_indexed
    302010014U,	// FMUL_ZPmI_D
    2186309278U,	// FMUL_ZPmI_H
    302026398U,	// FMUL_ZPmI_S
    302010014U,	// FMUL_ZPmZ_D
    2186309278U,	// FMUL_ZPmZ_H
    302026398U,	// FMUL_ZPmZ_S
    201346718U,	// FMUL_ZZZI_D
    2387111582U,	// FMUL_ZZZI_H
    268471966U,	// FMUL_ZZZI_S
    201346718U,	// FMUL_ZZZ_D
    2387111582U,	// FMUL_ZZZ_H
    268471966U,	// FMUL_ZZZ_S
    100716190U,	// FMULv1i16_indexed
    100716190U,	// FMULv1i32_indexed
    100716190U,	// FMULv1i64_indexed
    2216210078U,	// FMULv2f32
    2216734366U,	// FMULv2f64
    2216210078U,	// FMULv2i32_indexed
    2216734366U,	// FMULv2i64_indexed
    69775006U,	// FMULv4f16
    70299294U,	// FMULv4f32
    69775006U,	// FMULv4i16_indexed
    70299294U,	// FMULv4i32_indexed
    2218307230U,	// FMULv8f16
    2218307230U,	// FMULv8i16_indexed
    2248198457U,	// FNEGDr
    2248198457U,	// FNEGHr
    2248198457U,	// FNEGSr
    18745U,	// FNEG_ZPmZ_D
    2181589305U,	// FNEG_ZPmZ_H
    35129U,	// FNEG_ZPmZ_S
    68725049U,	// FNEGv2f32
    2216732985U,	// FNEGv2f64
    69773625U,	// FNEGv4f16
    2217781561U,	// FNEGv4f32
    70822201U,	// FNEGv8f16
    100714534U,	// FNMADDDrrr
    100714534U,	// FNMADDHrrr
    100714534U,	// FNMADDSrrr
    302008230U,	// FNMAD_ZPmZZ_D
    2186307494U,	// FNMAD_ZPmZZ_H
    302024614U,	// FNMAD_ZPmZZ_S
    302006990U,	// FNMLA_ZPmZZ_D
    2186306254U,	// FNMLA_ZPmZZ_H
    302023374U,	// FNMLA_ZPmZZ_S
    302011042U,	// FNMLS_ZPmZZ_D
    2186310306U,	// FNMLS_ZPmZZ_H
    302027426U,	// FNMLS_ZPmZZ_S
    302007898U,	// FNMSB_ZPmZZ_D
    2186307162U,	// FNMSB_ZPmZZ_H
    302024282U,	// FNMSB_ZPmZZ_S
    100714188U,	// FNMSUBDrrr
    100714188U,	// FNMSUBHrrr
    100714188U,	// FNMSUBSrrr
    100716196U,	// FNMULDrr
    100716196U,	// FNMULHrr
    100716196U,	// FNMULSrr
    2348828868U,	// FRECPE_ZZ_D
    608725188U,	// FRECPE_ZZ_H
    2415954116U,	// FRECPE_ZZ_S
    2248198340U,	// FRECPEv1f16
    2248198340U,	// FRECPEv1i32
    2248198340U,	// FRECPEv1i64
    68724932U,	// FRECPEv2f32
    2216732868U,	// FRECPEv2f64
    69773508U,	// FRECPEv4f16
    2217781444U,	// FRECPEv4f32
    70822084U,	// FRECPEv8f16
    100717273U,	// FRECPS16
    100717273U,	// FRECPS32
    100717273U,	// FRECPS64
    201347801U,	// FRECPS_ZZZ_D
    2387112665U,	// FRECPS_ZZZ_H
    268473049U,	// FRECPS_ZZZ_S
    2216211161U,	// FRECPSv2f32
    2216735449U,	// FRECPSv2f64
    69776089U,	// FRECPSv4f16
    70300377U,	// FRECPSv4f32
    2218308313U,	// FRECPSv8f16
    22026U,	// FRECPX_ZPmZ_D
    2181592586U,	// FRECPX_ZPmZ_H
    38410U,	// FRECPX_ZPmZ_S
    2248201738U,	// FRECPXv1f16
    2248201738U,	// FRECPXv1i32
    2248201738U,	// FRECPXv1i64
    2248201646U,	// FRINT32XDr
    2248201646U,	// FRINT32XSr
    68728238U,	// FRINT32Xv2f32
    2216736174U,	// FRINT32Xv2f64
    2217784750U,	// FRINT32Xv4f32
    2248201769U,	// FRINT32ZDr
    2248201769U,	// FRINT32ZSr
    68728361U,	// FRINT32Zv2f32
    2216736297U,	// FRINT32Zv2f64
    2217784873U,	// FRINT32Zv4f32
    2248201656U,	// FRINT64XDr
    2248201656U,	// FRINT64XSr
    68728248U,	// FRINT64Xv2f32
    2216736184U,	// FRINT64Xv2f64
    2217784760U,	// FRINT64Xv4f32
    2248201779U,	// FRINT64ZDr
    2248201779U,	// FRINT64ZSr
    68728371U,	// FRINT64Zv2f32
    2216736307U,	// FRINT64Zv2f64
    2217784883U,	// FRINT64Zv4f32
    2248196922U,	// FRINTADr
    2248196922U,	// FRINTAHr
    2248196922U,	// FRINTASr
    17210U,	// FRINTA_ZPmZ_D
    2181587770U,	// FRINTA_ZPmZ_H
    33594U,	// FRINTA_ZPmZ_S
    68723514U,	// FRINTAv2f32
    2216731450U,	// FRINTAv2f64
    69772090U,	// FRINTAv4f16
    2217780026U,	// FRINTAv4f32
    70820666U,	// FRINTAv8f16
    2248199353U,	// FRINTIDr
    2248199353U,	// FRINTIHr
    2248199353U,	// FRINTISr
    19641U,	// FRINTI_ZPmZ_D
    2181590201U,	// FRINTI_ZPmZ_H
    36025U,	// FRINTI_ZPmZ_S
    68725945U,	// FRINTIv2f32
    2216733881U,	// FRINTIv2f64
    69774521U,	// FRINTIv4f16
    2217782457U,	// FRINTIv4f32
    70823097U,	// FRINTIv8f16
    2248199943U,	// FRINTMDr
    2248199943U,	// FRINTMHr
    2248199943U,	// FRINTMSr
    20231U,	// FRINTM_ZPmZ_D
    2181590791U,	// FRINTM_ZPmZ_H
    36615U,	// FRINTM_ZPmZ_S
    68726535U,	// FRINTMv2f32
    2216734471U,	// FRINTMv2f64
    69775111U,	// FRINTMv4f16
    2217783047U,	// FRINTMv4f32
    70823687U,	// FRINTMv8f16
    2248200052U,	// FRINTNDr
    2248200052U,	// FRINTNHr
    2248200052U,	// FRINTNSr
    20340U,	// FRINTN_ZPmZ_D
    2181590900U,	// FRINTN_ZPmZ_H
    36724U,	// FRINTN_ZPmZ_S
    68726644U,	// FRINTNv2f32
    2216734580U,	// FRINTNv2f64
    69775220U,	// FRINTNv4f16
    2217783156U,	// FRINTNv4f32
    70823796U,	// FRINTNv8f16
    2248200349U,	// FRINTPDr
    2248200349U,	// FRINTPHr
    2248200349U,	// FRINTPSr
    20637U,	// FRINTP_ZPmZ_D
    2181591197U,	// FRINTP_ZPmZ_H
    37021U,	// FRINTP_ZPmZ_S
    68726941U,	// FRINTPv2f32
    2216734877U,	// FRINTPv2f64
    69775517U,	// FRINTPv4f16
    2217783453U,	// FRINTPv4f32
    70824093U,	// FRINTPv8f16
    2248201746U,	// FRINTXDr
    2248201746U,	// FRINTXHr
    2248201746U,	// FRINTXSr
    22034U,	// FRINTX_ZPmZ_D
    2181592594U,	// FRINTX_ZPmZ_H
    38418U,	// FRINTX_ZPmZ_S
    68728338U,	// FRINTXv2f32
    2216736274U,	// FRINTXv2f64
    69776914U,	// FRINTXv4f16
    2217784850U,	// FRINTXv4f32
    70825490U,	// FRINTXv8f16
    2248201846U,	// FRINTZDr
    2248201846U,	// FRINTZHr
    2248201846U,	// FRINTZSr
    22134U,	// FRINTZ_ZPmZ_D
    2181592694U,	// FRINTZ_ZPmZ_H
    38518U,	// FRINTZ_ZPmZ_S
    68728438U,	// FRINTZv2f32
    2216736374U,	// FRINTZv2f64
    69777014U,	// FRINTZv4f16
    2217784950U,	// FRINTZv4f32
    70825590U,	// FRINTZv8f16
    2348828913U,	// FRSQRTE_ZZ_D
    608725233U,	// FRSQRTE_ZZ_H
    2415954161U,	// FRSQRTE_ZZ_S
    2248198385U,	// FRSQRTEv1f16
    2248198385U,	// FRSQRTEv1i32
    2248198385U,	// FRSQRTEv1i64
    68724977U,	// FRSQRTEv2f32
    2216732913U,	// FRSQRTEv2f64
    69773553U,	// FRSQRTEv4f16
    2217781489U,	// FRSQRTEv4f32
    70822129U,	// FRSQRTEv8f16
    100717320U,	// FRSQRTS16
    100717320U,	// FRSQRTS32
    100717320U,	// FRSQRTS64
    201347848U,	// FRSQRTS_ZZZ_D
    2387112712U,	// FRSQRTS_ZZZ_H
    268473096U,	// FRSQRTS_ZZZ_S
    2216211208U,	// FRSQRTSv2f32
    2216735496U,	// FRSQRTSv2f64
    69776136U,	// FRSQRTSv4f16
    70300424U,	// FRSQRTSv4f32
    2218308360U,	// FRSQRTSv8f16
    302008462U,	// FSCALE_ZPmZ_D
    2186307726U,	// FSCALE_ZPmZ_H
    302024846U,	// FSCALE_ZPmZ_S
    2248201104U,	// FSQRTDr
    2248201104U,	// FSQRTHr
    2248201104U,	// FSQRTSr
    21392U,	// FSQRT_ZPmZ_D
    2181591952U,	// FSQRT_ZPmZ_H
    37776U,	// FSQRT_ZPmZ_S
    68727696U,	// FSQRTv2f32
    2216735632U,	// FSQRTv2f64
    69776272U,	// FSQRTv4f16
    2217784208U,	// FSQRTv4f32
    70824848U,	// FSQRTv8f16
    100714161U,	// FSUBDrr
    100714161U,	// FSUBHrr
    302010661U,	// FSUBR_ZPmI_D
    2186309925U,	// FSUBR_ZPmI_H
    302027045U,	// FSUBR_ZPmI_S
    302010661U,	// FSUBR_ZPmZ_D
    2186309925U,	// FSUBR_ZPmZ_H
    302027045U,	// FSUBR_ZPmZ_S
    100714161U,	// FSUBSrr
    302007985U,	// FSUB_ZPmI_D
    2186307249U,	// FSUB_ZPmI_H
    302024369U,	// FSUB_ZPmI_S
    302007985U,	// FSUB_ZPmZ_D
    2186307249U,	// FSUB_ZPmZ_H
    302024369U,	// FSUB_ZPmZ_S
    201344689U,	// FSUB_ZZZ_D
    2387109553U,	// FSUB_ZZZ_H
    268469937U,	// FSUB_ZZZ_S
    2216208049U,	// FSUBv2f32
    2216732337U,	// FSUBv2f64
    69772977U,	// FSUBv4f16
    70297265U,	// FSUBv4f32
    2218305201U,	// FSUBv8f16
    201344941U,	// FTMAD_ZZI_D
    2387109805U,	// FTMAD_ZZI_H
    268470189U,	// FTMAD_ZZI_S
    201346737U,	// FTSMUL_ZZZ_D
    2387111601U,	// FTSMUL_ZZZ_H
    268471985U,	// FTSMUL_ZZZ_S
    201346494U,	// FTSSEL_ZZZ_D
    2387111358U,	// FTSSEL_ZZZ_H
    268471742U,	// FTSSEL_ZZZ_S
    883032956U,	// GLD1B_D_IMM_REAL
    379716476U,	// GLD1B_D_REAL
    379716476U,	// GLD1B_D_SXTW_REAL
    379716476U,	// GLD1B_D_UXTW_REAL
    815932284U,	// GLD1B_S_IMM_REAL
    379724668U,	// GLD1B_S_SXTW_REAL
    379724668U,	// GLD1B_S_UXTW_REAL
    3030517584U,	// GLD1D_IMM_REAL
    379717456U,	// GLD1D_REAL
    379717456U,	// GLD1D_SCALED_REAL
    379717456U,	// GLD1D_SXTW_REAL
    379717456U,	// GLD1D_SXTW_SCALED_REAL
    379717456U,	// GLD1D_UXTW_REAL
    379717456U,	// GLD1D_UXTW_SCALED_REAL
    883034457U,	// GLD1H_D_IMM_REAL
    379717977U,	// GLD1H_D_REAL
    379717977U,	// GLD1H_D_SCALED_REAL
    379717977U,	// GLD1H_D_SXTW_REAL
    379717977U,	// GLD1H_D_SXTW_SCALED_REAL
    379717977U,	// GLD1H_D_UXTW_REAL
    379717977U,	// GLD1H_D_UXTW_SCALED_REAL
    815933785U,	// GLD1H_S_IMM_REAL
    379726169U,	// GLD1H_S_SXTW_REAL
    379726169U,	// GLD1H_S_SXTW_SCALED_REAL
    379726169U,	// GLD1H_S_UXTW_REAL
    379726169U,	// GLD1H_S_UXTW_SCALED_REAL
    883033643U,	// GLD1SB_D_IMM_REAL
    379717163U,	// GLD1SB_D_REAL
    379717163U,	// GLD1SB_D_SXTW_REAL
    379717163U,	// GLD1SB_D_UXTW_REAL
    815932971U,	// GLD1SB_S_IMM_REAL
    379725355U,	// GLD1SB_S_SXTW_REAL
    379725355U,	// GLD1SB_S_UXTW_REAL
    883035121U,	// GLD1SH_D_IMM_REAL
    379718641U,	// GLD1SH_D_REAL
    379718641U,	// GLD1SH_D_SCALED_REAL
    379718641U,	// GLD1SH_D_SXTW_REAL
    379718641U,	// GLD1SH_D_SXTW_SCALED_REAL
    379718641U,	// GLD1SH_D_UXTW_REAL
    379718641U,	// GLD1SH_D_UXTW_SCALED_REAL
    815934449U,	// GLD1SH_S_IMM_REAL
    379726833U,	// GLD1SH_S_SXTW_REAL
    379726833U,	// GLD1SH_S_SXTW_SCALED_REAL
    379726833U,	// GLD1SH_S_UXTW_REAL
    379726833U,	// GLD1SH_S_UXTW_SCALED_REAL
    3030521157U,	// GLD1SW_D_IMM_REAL
    379721029U,	// GLD1SW_D_REAL
    379721029U,	// GLD1SW_D_SCALED_REAL
    379721029U,	// GLD1SW_D_SXTW_REAL
    379721029U,	// GLD1SW_D_SXTW_SCALED_REAL
    379721029U,	// GLD1SW_D_UXTW_REAL
    379721029U,	// GLD1SW_D_UXTW_SCALED_REAL
    3030520979U,	// GLD1W_D_IMM_REAL
    379720851U,	// GLD1W_D_REAL
    379720851U,	// GLD1W_D_SCALED_REAL
    379720851U,	// GLD1W_D_SXTW_REAL
    379720851U,	// GLD1W_D_SXTW_SCALED_REAL
    379720851U,	// GLD1W_D_UXTW_REAL
    379720851U,	// GLD1W_D_UXTW_SCALED_REAL
    2963420307U,	// GLD1W_IMM_REAL
    379729043U,	// GLD1W_SXTW_REAL
    379729043U,	// GLD1W_SXTW_SCALED_REAL
    379729043U,	// GLD1W_UXTW_REAL
    379729043U,	// GLD1W_UXTW_SCALED_REAL
    883032962U,	// GLDFF1B_D_IMM_REAL
    379716482U,	// GLDFF1B_D_REAL
    379716482U,	// GLDFF1B_D_SXTW_REAL
    379716482U,	// GLDFF1B_D_UXTW_REAL
    815932290U,	// GLDFF1B_S_IMM_REAL
    379724674U,	// GLDFF1B_S_SXTW_REAL
    379724674U,	// GLDFF1B_S_UXTW_REAL
    3030517590U,	// GLDFF1D_IMM_REAL
    379717462U,	// GLDFF1D_REAL
    379717462U,	// GLDFF1D_SCALED_REAL
    379717462U,	// GLDFF1D_SXTW_REAL
    379717462U,	// GLDFF1D_SXTW_SCALED_REAL
    379717462U,	// GLDFF1D_UXTW_REAL
    379717462U,	// GLDFF1D_UXTW_SCALED_REAL
    883034463U,	// GLDFF1H_D_IMM_REAL
    379717983U,	// GLDFF1H_D_REAL
    379717983U,	// GLDFF1H_D_SCALED_REAL
    379717983U,	// GLDFF1H_D_SXTW_REAL
    379717983U,	// GLDFF1H_D_SXTW_SCALED_REAL
    379717983U,	// GLDFF1H_D_UXTW_REAL
    379717983U,	// GLDFF1H_D_UXTW_SCALED_REAL
    815933791U,	// GLDFF1H_S_IMM_REAL
    379726175U,	// GLDFF1H_S_SXTW_REAL
    379726175U,	// GLDFF1H_S_SXTW_SCALED_REAL
    379726175U,	// GLDFF1H_S_UXTW_REAL
    379726175U,	// GLDFF1H_S_UXTW_SCALED_REAL
    883033650U,	// GLDFF1SB_D_IMM_REAL
    379717170U,	// GLDFF1SB_D_REAL
    379717170U,	// GLDFF1SB_D_SXTW_REAL
    379717170U,	// GLDFF1SB_D_UXTW_REAL
    815932978U,	// GLDFF1SB_S_IMM_REAL
    379725362U,	// GLDFF1SB_S_SXTW_REAL
    379725362U,	// GLDFF1SB_S_UXTW_REAL
    883035128U,	// GLDFF1SH_D_IMM_REAL
    379718648U,	// GLDFF1SH_D_REAL
    379718648U,	// GLDFF1SH_D_SCALED_REAL
    379718648U,	// GLDFF1SH_D_SXTW_REAL
    379718648U,	// GLDFF1SH_D_SXTW_SCALED_REAL
    379718648U,	// GLDFF1SH_D_UXTW_REAL
    379718648U,	// GLDFF1SH_D_UXTW_SCALED_REAL
    815934456U,	// GLDFF1SH_S_IMM_REAL
    379726840U,	// GLDFF1SH_S_SXTW_REAL
    379726840U,	// GLDFF1SH_S_SXTW_SCALED_REAL
    379726840U,	// GLDFF1SH_S_UXTW_REAL
    379726840U,	// GLDFF1SH_S_UXTW_SCALED_REAL
    3030521164U,	// GLDFF1SW_D_IMM_REAL
    379721036U,	// GLDFF1SW_D_REAL
    379721036U,	// GLDFF1SW_D_SCALED_REAL
    379721036U,	// GLDFF1SW_D_SXTW_REAL
    379721036U,	// GLDFF1SW_D_SXTW_SCALED_REAL
    379721036U,	// GLDFF1SW_D_UXTW_REAL
    379721036U,	// GLDFF1SW_D_UXTW_SCALED_REAL
    3030520985U,	// GLDFF1W_D_IMM_REAL
    379720857U,	// GLDFF1W_D_REAL
    379720857U,	// GLDFF1W_D_SCALED_REAL
    379720857U,	// GLDFF1W_D_SXTW_REAL
    379720857U,	// GLDFF1W_D_SXTW_SCALED_REAL
    379720857U,	// GLDFF1W_D_UXTW_REAL
    379720857U,	// GLDFF1W_D_UXTW_SCALED_REAL
    2963420313U,	// GLDFF1W_IMM_REAL
    379729049U,	// GLDFF1W_SXTW_REAL
    379729049U,	// GLDFF1W_SXTW_SCALED_REAL
    379729049U,	// GLDFF1W_UXTW_REAL
    379729049U,	// GLDFF1W_UXTW_SCALED_REAL
    100715689U,	// GMI
    152440U,	// HINT
    78688U,	// HLT
    75590U,	// HVC
    536921199U,	// INCB_XPiI
    536922079U,	// INCD_XPiI
    536889311U,	// INCD_ZPiI
    536922690U,	// INCH_XPiI
    6842946U,	// INCH_ZPiI
    2315309067U,	// INCP_XP_B
    2348863499U,	// INCP_XP_D
    2717962251U,	// INCP_XP_H
    2415972363U,	// INCP_XP_S
    2147504139U,	// INCP_ZP_D
    604532747U,	// INCP_ZP_H
    2147520523U,	// INCP_ZP_S
    536925460U,	// INCW_XPiI
    536909076U,	// INCW_ZPiI
    100677100U,	// INDEX_II_B
    100685292U,	// INDEX_II_D
    242775532U,	// INDEX_II_H
    100701676U,	// INDEX_II_S
    100677100U,	// INDEX_IR_B
    100685292U,	// INDEX_IR_D
    242775532U,	// INDEX_IR_H
    100701676U,	// INDEX_IR_S
    100677100U,	// INDEX_RI_B
    100685292U,	// INDEX_RI_D
    242775532U,	// INDEX_RI_H
    100701676U,	// INDEX_RI_S
    100677100U,	// INDEX_RR_B
    100685292U,	// INDEX_RR_D
    242775532U,	// INDEX_RR_H
    100701676U,	// INDEX_RR_S
    2516595125U,	// INSR_ZR_B
    2516603317U,	// INSR_ZR_D
    615018933U,	// INSR_ZR_H
    2516619701U,	// INSR_ZR_S
    2516595125U,	// INSR_ZV_B
    2516603317U,	// INSR_ZV_D
    615018933U,	// INSR_ZV_H
    2516619701U,	// INSR_ZV_S
    3065049784U,	// INSvi16gpr
    951120568U,	// INSvi16lane
    3065574072U,	// INSvi32gpr
    3099128504U,	// INSvi32lane
    3063476920U,	// INSvi64gpr
    949547704U,	// INSvi64lane
    3066098360U,	// INSvi8gpr
    3099652792U,	// INSvi8lane
    100714829U,	// IRG
    116303U,	// ISB
    0U,	// JumpTableDest16
    0U,	// JumpTableDest32
    0U,	// JumpTableDest8
    302039875U,	// LASTA_RPZ_B
    302039875U,	// LASTA_RPZ_D
    302039875U,	// LASTA_RPZ_H
    302039875U,	// LASTA_RPZ_S
    302039875U,	// LASTA_VPZ_B
    302039875U,	// LASTA_VPZ_D
    302039875U,	// LASTA_VPZ_H
    302039875U,	// LASTA_VPZ_S
    302040734U,	// LASTB_RPZ_B
    302040734U,	// LASTB_RPZ_D
    302040734U,	// LASTB_RPZ_H
    302040734U,	// LASTB_RPZ_S
    302040734U,	// LASTB_VPZ_B
    302040734U,	// LASTB_VPZ_D
    302040734U,	// LASTB_VPZ_H
    302040734U,	// LASTB_VPZ_S
    379741052U,	// LD1B
    379716476U,	// LD1B_D
    379716476U,	// LD1B_D_IMM_REAL
    379749244U,	// LD1B_H
    379749244U,	// LD1B_H_IMM_REAL
    379741052U,	// LD1B_IMM_REAL
    379724668U,	// LD1B_S
    379724668U,	// LD1B_S_IMM_REAL
    379717456U,	// LD1D
    379717456U,	// LD1D_IMM_REAL
    172064U,	// LD1Fourv16b
    13287456U,	// LD1Fourv16b_POST
    188448U,	// LD1Fourv1d
    13828128U,	// LD1Fourv1d_POST
    204832U,	// LD1Fourv2d
    13320224U,	// LD1Fourv2d_POST
    221216U,	// LD1Fourv2s
    13860896U,	// LD1Fourv2s_POST
    237600U,	// LD1Fourv4h
    13877280U,	// LD1Fourv4h_POST
    253984U,	// LD1Fourv4s
    13369376U,	// LD1Fourv4s_POST
    270368U,	// LD1Fourv8b
    13910048U,	// LD1Fourv8b_POST
    286752U,	// LD1Fourv8h
    13402144U,	// LD1Fourv8h_POST
    379750745U,	// LD1H
    379717977U,	// LD1H_D
    379717977U,	// LD1H_D_IMM_REAL
    379750745U,	// LD1H_IMM_REAL
    379726169U,	// LD1H_S
    379726169U,	// LD1H_S_IMM_REAL
    172064U,	// LD1Onev16b
    14336032U,	// LD1Onev16b_POST
    188448U,	// LD1Onev1d
    14876704U,	// LD1Onev1d_POST
    204832U,	// LD1Onev2d
    14368800U,	// LD1Onev2d_POST
    221216U,	// LD1Onev2s
    14909472U,	// LD1Onev2s_POST
    237600U,	// LD1Onev4h
    14925856U,	// LD1Onev4h_POST
    253984U,	// LD1Onev4s
    14417952U,	// LD1Onev4s_POST
    270368U,	// LD1Onev8b
    14958624U,	// LD1Onev8b_POST
    286752U,	// LD1Onev8h
    14450720U,	// LD1Onev8h_POST
    379717015U,	// LD1RB_D_IMM
    379749783U,	// LD1RB_H_IMM
    379741591U,	// LD1RB_IMM
    379725207U,	// LD1RB_S_IMM
    379717714U,	// LD1RD_IMM
    379718493U,	// LD1RH_D_IMM
    379751261U,	// LD1RH_IMM
    379726685U,	// LD1RH_S_IMM
    379741583U,	// LD1RQ_B
    379741583U,	// LD1RQ_B_IMM
    379717706U,	// LD1RQ_D
    379717706U,	// LD1RQ_D_IMM
    379751253U,	// LD1RQ_H
    379751253U,	// LD1RQ_H_IMM
    379729206U,	// LD1RQ_W
    379729206U,	// LD1RQ_W_IMM
    379717217U,	// LD1RSB_D_IMM
    379749985U,	// LD1RSB_H_IMM
    379725409U,	// LD1RSB_S_IMM
    379718682U,	// LD1RSH_D_IMM
    379726874U,	// LD1RSH_S_IMM
    379721061U,	// LD1RSW_IMM
    379721022U,	// LD1RW_D_IMM
    379729214U,	// LD1RW_IMM
    176379U,	// LD1Rv16b
    15388923U,	// LD1Rv16b_POST
    192763U,	// LD1Rv1d
    14881019U,	// LD1Rv1d_POST
    209147U,	// LD1Rv2d
    14897403U,	// LD1Rv2d_POST
    225531U,	// LD1Rv2s
    15962363U,	// LD1Rv2s_POST
    241915U,	// LD1Rv4h
    16503035U,	// LD1Rv4h_POST
    258299U,	// LD1Rv4s
    15995131U,	// LD1Rv4s_POST
    274683U,	// LD1Rv8b
    15487227U,	// LD1Rv8b_POST
    291067U,	// LD1Rv8h
    16552187U,	// LD1Rv8h_POST
    379717163U,	// LD1SB_D
    379717163U,	// LD1SB_D_IMM_REAL
    379749931U,	// LD1SB_H
    379749931U,	// LD1SB_H_IMM_REAL
    379725355U,	// LD1SB_S
    379725355U,	// LD1SB_S_IMM_REAL
    379718641U,	// LD1SH_D
    379718641U,	// LD1SH_D_IMM_REAL
    379726833U,	// LD1SH_S
    379726833U,	// LD1SH_S_IMM_REAL
    379721029U,	// LD1SW_D
    379721029U,	// LD1SW_D_IMM_REAL
    172064U,	// LD1Threev16b
    16957472U,	// LD1Threev16b_POST
    188448U,	// LD1Threev1d
    17498144U,	// LD1Threev1d_POST
    204832U,	// LD1Threev2d
    16990240U,	// LD1Threev2d_POST
    221216U,	// LD1Threev2s
    17530912U,	// LD1Threev2s_POST
    237600U,	// LD1Threev4h
    17547296U,	// LD1Threev4h_POST
    253984U,	// LD1Threev4s
    17039392U,	// LD1Threev4s_POST
    270368U,	// LD1Threev8b
    17580064U,	// LD1Threev8b_POST
    286752U,	// LD1Threev8h
    17072160U,	// LD1Threev8h_POST
    172064U,	// LD1Twov16b
    13811744U,	// LD1Twov16b_POST
    188448U,	// LD1Twov1d
    14352416U,	// LD1Twov1d_POST
    204832U,	// LD1Twov2d
    13844512U,	// LD1Twov2d_POST
    221216U,	// LD1Twov2s
    14385184U,	// LD1Twov2s_POST
    237600U,	// LD1Twov4h
    14401568U,	// LD1Twov4h_POST
    253984U,	// LD1Twov4s
    13893664U,	// LD1Twov4s_POST
    270368U,	// LD1Twov8b
    14434336U,	// LD1Twov8b_POST
    286752U,	// LD1Twov8h
    13926432U,	// LD1Twov8h_POST
    379729043U,	// LD1W
    379720851U,	// LD1W_D
    379720851U,	// LD1W_D_IMM_REAL
    379729043U,	// LD1W_IMM_REAL
    18128928U,	// LD1i16
    18661408U,	// LD1i16_POST
    18145312U,	// LD1i32
    19202080U,	// LD1i32_POST
    18161696U,	// LD1i64
    19742752U,	// LD1i64_POST
    18178080U,	// LD1i8
    20283424U,	// LD1i8_POST
    379741113U,	// LD2B
    379741113U,	// LD2B_IMM
    379717500U,	// LD2D
    379717500U,	// LD2D_IMM
    379750806U,	// LD2H
    379750806U,	// LD2H_IMM
    176385U,	// LD2Rv16b
    16437505U,	// LD2Rv16b_POST
    192769U,	// LD2Rv1d
    14356737U,	// LD2Rv1d_POST
    209153U,	// LD2Rv2d
    14373121U,	// LD2Rv2d_POST
    225537U,	// LD2Rv2s
    14913793U,	// LD2Rv2s_POST
    241921U,	// LD2Rv4h
    15978753U,	// LD2Rv4h_POST
    258305U,	// LD2Rv4s
    14946561U,	// LD2Rv4s_POST
    274689U,	// LD2Rv8b
    16535809U,	// LD2Rv8b_POST
    291073U,	// LD2Rv8h
    16027905U,	// LD2Rv8h_POST
    172162U,	// LD2Twov16b
    13811842U,	// LD2Twov16b_POST
    204930U,	// LD2Twov2d
    13844610U,	// LD2Twov2d_POST
    221314U,	// LD2Twov2s
    14385282U,	// LD2Twov2s_POST
    237698U,	// LD2Twov4h
    14401666U,	// LD2Twov4h_POST
    254082U,	// LD2Twov4s
    13893762U,	// LD2Twov4s_POST
    270466U,	// LD2Twov8b
    14434434U,	// LD2Twov8b_POST
    286850U,	// LD2Twov8h
    13926530U,	// LD2Twov8h_POST
    379729095U,	// LD2W
    379729095U,	// LD2W_IMM
    18129026U,	// LD2i16
    19185794U,	// LD2i16_POST
    18145410U,	// LD2i32
    19726466U,	// LD2i32_POST
    18161794U,	// LD2i64
    20791426U,	// LD2i64_POST
    18178178U,	// LD2i8
    18710658U,	// LD2i8_POST
    379741134U,	// LD3B
    379741134U,	// LD3B_IMM
    379717512U,	// LD3D
    379717512U,	// LD3D_IMM
    379750818U,	// LD3H
    379750818U,	// LD3H_IMM
    176391U,	// LD3Rv16b
    21156103U,	// LD3Rv16b_POST
    192775U,	// LD3Rv1d
    17502471U,	// LD3Rv1d_POST
    209159U,	// LD3Rv2d
    17518855U,	// LD3Rv2d_POST
    225543U,	// LD3Rv2s
    21729543U,	// LD3Rv2s_POST
    241927U,	// LD3Rv4h
    22270215U,	// LD3Rv4h_POST
    258311U,	// LD3Rv4s
    21762311U,	// LD3Rv4s_POST
    274695U,	// LD3Rv8b
    21254407U,	// LD3Rv8b_POST
    291079U,	// LD3Rv8h
    22319367U,	// LD3Rv8h_POST
    172569U,	// LD3Threev16b
    16957977U,	// LD3Threev16b_POST
    205337U,	// LD3Threev2d
    16990745U,	// LD3Threev2d_POST
    221721U,	// LD3Threev2s
    17531417U,	// LD3Threev2s_POST
    238105U,	// LD3Threev4h
    17547801U,	// LD3Threev4h_POST
    254489U,	// LD3Threev4s
    17039897U,	// LD3Threev4s_POST
    270873U,	// LD3Threev8b
    17580569U,	// LD3Threev8b_POST
    287257U,	// LD3Threev8h
    17072665U,	// LD3Threev8h_POST
    379729107U,	// LD3W
    379729107U,	// LD3W_IMM
    18129433U,	// LD3i16
    22856217U,	// LD3i16_POST
    18145817U,	// LD3i32
    23396889U,	// LD3i32_POST
    18162201U,	// LD3i64
    23937561U,	// LD3i64_POST
    18178585U,	// LD3i8
    24478233U,	// LD3i8_POST
    379741146U,	// LD4B
    379741146U,	// LD4B_IMM
    379717524U,	// LD4D
    379717524U,	// LD4D_IMM
    172599U,	// LD4Fourv16b
    13287991U,	// LD4Fourv16b_POST
    205367U,	// LD4Fourv2d
    13320759U,	// LD4Fourv2d_POST
    221751U,	// LD4Fourv2s
    13861431U,	// LD4Fourv2s_POST
    238135U,	// LD4Fourv4h
    13877815U,	// LD4Fourv4h_POST
    254519U,	// LD4Fourv4s
    13369911U,	// LD4Fourv4s_POST
    270903U,	// LD4Fourv8b
    13910583U,	// LD4Fourv8b_POST
    287287U,	// LD4Fourv8h
    13402679U,	// LD4Fourv8h_POST
    379750830U,	// LD4H
    379750830U,	// LD4H_IMM
    176397U,	// LD4Rv16b
    15913229U,	// LD4Rv16b_POST
    192781U,	// LD4Rv1d
    13832461U,	// LD4Rv1d_POST
    209165U,	// LD4Rv2d
    13848845U,	// LD4Rv2d_POST
    225549U,	// LD4Rv2s
    14389517U,	// LD4Rv2s_POST
    241933U,	// LD4Rv4h
    14930189U,	// LD4Rv4h_POST
    258317U,	// LD4Rv4s
    14422285U,	// LD4Rv4s_POST
    274701U,	// LD4Rv8b
    16011533U,	// LD4Rv8b_POST
    291085U,	// LD4Rv8h
    14979341U,	// LD4Rv8h_POST
    379729119U,	// LD4W
    379729119U,	// LD4W_IMM
    18129463U,	// LD4i16
    19710519U,	// LD4i16_POST
    18145847U,	// LD4i32
    20775479U,	// LD4i32_POST
    18162231U,	// LD4i64
    24986167U,	// LD4i64_POST
    18178615U,	// LD4i8
    19235383U,	// LD4i8_POST
    973169638U,	// LDADDAB
    973171139U,	// LDADDAH
    973169837U,	// LDADDALB
    973171294U,	// LDADDALH
    973171936U,	// LDADDALW
    973171936U,	// LDADDALX
    973169296U,	// LDADDAW
    973169296U,	// LDADDAX
    973169796U,	// LDADDB
    973171280U,	// LDADDH
    973169937U,	// LDADDLB
    973171394U,	// LDADDLH
    973172113U,	// LDADDLW
    973172113U,	// LDADDLX
    973170676U,	// LDADDW
    973170676U,	// LDADDX
    106481106U,	// LDAPRB
    106482584U,	// LDAPRH
    106484110U,	// LDAPRW
    106484110U,	// LDAPRX
    106481149U,	// LDAPURBi
    106482627U,	// LDAPURHi
    106481280U,	// LDAPURSBWi
    106481280U,	// LDAPURSBXi
    106482745U,	// LDAPURSHWi
    106482745U,	// LDAPURSHXi
    106485124U,	// LDAPURSWi
    106484191U,	// LDAPURXi
    106484191U,	// LDAPURi
    106481054U,	// LDARB
    106482532U,	// LDARH
    106483987U,	// LDARW
    106483987U,	// LDARX
    2248200373U,	// LDAXPW
    2248200373U,	// LDAXPX
    106481165U,	// LDAXRB
    106482643U,	// LDAXRH
    106484226U,	// LDAXRW
    106484226U,	// LDAXRX
    973169694U,	// LDCLRAB
    973171185U,	// LDCLRAH
    973169877U,	// LDCLRALB
    973171334U,	// LDCLRALH
    973172010U,	// LDCLRALW
    973172010U,	// LDCLRALX
    973169410U,	// LDCLRAW
    973169410U,	// LDCLRAX
    973170099U,	// LDCLRB
    973171577U,	// LDCLRH
    973169973U,	// LDCLRLB
    973171430U,	// LDCLRLH
    973172304U,	// LDCLRLW
    973172304U,	// LDCLRLX
    973173091U,	// LDCLRW
    973173091U,	// LDCLRX
    973169703U,	// LDEORAB
    973171194U,	// LDEORAH
    973169887U,	// LDEORALB
    973171344U,	// LDEORALH
    973172019U,	// LDEORALW
    973172019U,	// LDEORALX
    973169418U,	// LDEORAW
    973169418U,	// LDEORAX
    973170122U,	// LDEORB
    973171600U,	// LDEORH
    973169982U,	// LDEORLB
    973171439U,	// LDEORLH
    973172312U,	// LDEORLW
    973172312U,	// LDEORLX
    973173117U,	// LDEORW
    973173117U,	// LDEORX
    379716482U,	// LDFF1B_D_REAL
    379749250U,	// LDFF1B_H_REAL
    379741058U,	// LDFF1B_REAL
    379724674U,	// LDFF1B_S_REAL
    379717462U,	// LDFF1D_REAL
    379717983U,	// LDFF1H_D_REAL
    379750751U,	// LDFF1H_REAL
    379726175U,	// LDFF1H_S_REAL
    379717170U,	// LDFF1SB_D_REAL
    379749938U,	// LDFF1SB_H_REAL
    379725362U,	// LDFF1SB_S_REAL
    379718648U,	// LDFF1SH_D_REAL
    379726840U,	// LDFF1SH_S_REAL
    379721036U,	// LDFF1SW_D_REAL
    379720857U,	// LDFF1W_D_REAL
    379729049U,	// LDFF1W_REAL
    106481972U,	// LDG
    2522444810U,	// LDGV
    106481061U,	// LDLARB
    106482539U,	// LDLARH
    106483993U,	// LDLARW
    106483993U,	// LDLARX
    379716490U,	// LDNF1B_D_IMM_REAL
    379749258U,	// LDNF1B_H_IMM_REAL
    379741066U,	// LDNF1B_IMM_REAL
    379724682U,	// LDNF1B_S_IMM_REAL
    379717470U,	// LDNF1D_IMM_REAL
    379717991U,	// LDNF1H_D_IMM_REAL
    379750759U,	// LDNF1H_IMM_REAL
    379726183U,	// LDNF1H_S_IMM_REAL
    379717179U,	// LDNF1SB_D_IMM_REAL
    379749947U,	// LDNF1SB_H_IMM_REAL
    379725371U,	// LDNF1SB_S_IMM_REAL
    379718657U,	// LDNF1SH_D_IMM_REAL
    379726849U,	// LDNF1SH_S_IMM_REAL
    379721045U,	// LDNF1SW_D_IMM_REAL
    379720865U,	// LDNF1W_D_IMM_REAL
    379729057U,	// LDNF1W_IMM_REAL
    2248200298U,	// LDNPDi
    2248200298U,	// LDNPQi
    2248200298U,	// LDNPSi
    2248200298U,	// LDNPWi
    2248200298U,	// LDNPXi
    379741074U,	// LDNT1B_ZRI
    379741074U,	// LDNT1B_ZRR
    379717478U,	// LDNT1D_ZRI
    379717478U,	// LDNT1D_ZRR
    379750767U,	// LDNT1H_ZRI
    379750767U,	// LDNT1H_ZRR
    379729065U,	// LDNT1W_ZRI
    379729065U,	// LDNT1W_ZRR
    2248200224U,	// LDPDi
    2516676640U,	// LDPDpost
    2516676640U,	// LDPDpre
    2248200224U,	// LDPQi
    2516676640U,	// LDPQpost
    2516676640U,	// LDPQpre
    2248201566U,	// LDPSWi
    2516677982U,	// LDPSWpost
    2516677982U,	// LDPSWpre
    2248200224U,	// LDPSi
    2516676640U,	// LDPSpost
    2516676640U,	// LDPSpre
    2248200224U,	// LDPWi
    2516676640U,	// LDPWpost
    2516676640U,	// LDPWpre
    2248200224U,	// LDPXi
    2516676640U,	// LDPXpost
    2516676640U,	// LDPXpre
    106480239U,	// LDRAAindexed
    374956655U,	// LDRAAwriteback
    106480656U,	// LDRABindexed
    374957072U,	// LDRABwriteback
    374957485U,	// LDRBBpost
    374957485U,	// LDRBBpre
    106481069U,	// LDRBBroW
    106481069U,	// LDRBBroX
    106481069U,	// LDRBBui
    374960433U,	// LDRBpost
    374960433U,	// LDRBpre
    106484017U,	// LDRBroW
    106484017U,	// LDRBroX
    106484017U,	// LDRBui
    436261169U,	// LDRDl
    374960433U,	// LDRDpost
    374960433U,	// LDRDpre
    106484017U,	// LDRDroW
    106484017U,	// LDRDroX
    106484017U,	// LDRDui
    374958963U,	// LDRHHpost
    374958963U,	// LDRHHpre
    106482547U,	// LDRHHroW
    106482547U,	// LDRHHroX
    106482547U,	// LDRHHui
    374960433U,	// LDRHpost
    374960433U,	// LDRHpre
    106484017U,	// LDRHroW
    106484017U,	// LDRHroX
    106484017U,	// LDRHui
    436261169U,	// LDRQl
    374960433U,	// LDRQpost
    374960433U,	// LDRQpre
    106484017U,	// LDRQroW
    106484017U,	// LDRQroX
    106484017U,	// LDRQui
    374957673U,	// LDRSBWpost
    374957673U,	// LDRSBWpre
    106481257U,	// LDRSBWroW
    106481257U,	// LDRSBWroX
    106481257U,	// LDRSBWui
    374957673U,	// LDRSBXpost
    374957673U,	// LDRSBXpre
    106481257U,	// LDRSBXroW
    106481257U,	// LDRSBXroX
    106481257U,	// LDRSBXui
    374959138U,	// LDRSHWpost
    374959138U,	// LDRSHWpre
    106482722U,	// LDRSHWroW
    106482722U,	// LDRSHWroX
    106482722U,	// LDRSHWui
    374959138U,	// LDRSHXpost
    374959138U,	// LDRSHXpre
    106482722U,	// LDRSHXroW
    106482722U,	// LDRSHXroX
    106482722U,	// LDRSHXui
    436262253U,	// LDRSWl
    374961517U,	// LDRSWpost
    374961517U,	// LDRSWpre
    106485101U,	// LDRSWroW
    106485101U,	// LDRSWroX
    106485101U,	// LDRSWui
    436261169U,	// LDRSl
    374960433U,	// LDRSpost
    374960433U,	// LDRSpre
    106484017U,	// LDRSroW
    106484017U,	// LDRSroX
    106484017U,	// LDRSui
    436261169U,	// LDRWl
    374960433U,	// LDRWpost
    374960433U,	// LDRWpre
    106484017U,	// LDRWroW
    106484017U,	// LDRWroX
    106484017U,	// LDRWui
    436261169U,	// LDRXl
    374960433U,	// LDRXpost
    374960433U,	// LDRXpre
    106484017U,	// LDRXroW
    106484017U,	// LDRXroX
    106484017U,	// LDRXui
    106803505U,	// LDR_PXI
    106803505U,	// LDR_ZXI
    973169719U,	// LDSETAB
    973171210U,	// LDSETAH
    973169905U,	// LDSETALB
    973171362U,	// LDSETALH
    973172035U,	// LDSETALW
    973172035U,	// LDSETALX
    973169458U,	// LDSETAW
    973169458U,	// LDSETAX
    973170319U,	// LDSETB
    973171779U,	// LDSETH
    973169998U,	// LDSETLB
    973171455U,	// LDSETLH
    973172367U,	// LDSETLW
    973172367U,	// LDSETLX
    973173557U,	// LDSETW
    973173557U,	// LDSETX
    973169728U,	// LDSMAXAB
    973171219U,	// LDSMAXAH
    973169915U,	// LDSMAXALB
    973171372U,	// LDSMAXALH
    973172044U,	// LDSMAXALW
    973172044U,	// LDSMAXALX
    973169482U,	// LDSMAXAW
    973169482U,	// LDSMAXAX
    973170408U,	// LDSMAXB
    973171811U,	// LDSMAXH
    973170007U,	// LDSMAXLB
    973171497U,	// LDSMAXLH
    973172422U,	// LDSMAXLW
    973172422U,	// LDSMAXLX
    973174222U,	// LDSMAXW
    973174222U,	// LDSMAXX
    973169647U,	// LDSMINAB
    973171158U,	// LDSMINAH
    973169847U,	// LDSMINALB
    973171304U,	// LDSMINALH
    973171975U,	// LDSMINALW
    973171975U,	// LDSMINALX
    973169365U,	// LDSMINAW
    973169365U,	// LDSMINAX
    973170032U,	// LDSMINB
    973171517U,	// LDSMINH
    973169946U,	// LDSMINLB
    973171403U,	// LDSMINLH
    973172266U,	// LDSMINLW
    973172266U,	// LDSMINLX
    973172524U,	// LDSMINW
    973172524U,	// LDSMINX
    106481114U,	// LDTRBi
    106482592U,	// LDTRHi
    106481264U,	// LDTRSBWi
    106481264U,	// LDTRSBXi
    106482729U,	// LDTRSHWi
    106482729U,	// LDTRSHXi
    106485108U,	// LDTRSWi
    106484155U,	// LDTRWi
    106484155U,	// LDTRXi
    973169738U,	// LDUMAXAB
    973171229U,	// LDUMAXAH
    973169926U,	// LDUMAXALB
    973171383U,	// LDUMAXALH
    973172054U,	// LDUMAXALW
    973172054U,	// LDUMAXALX
    973169491U,	// LDUMAXAW
    973169491U,	// LDUMAXAX
    973170417U,	// LDUMAXB
    973171820U,	// LDUMAXH
    973170017U,	// LDUMAXLB
    973171507U,	// LDUMAXLH
    973172431U,	// LDUMAXLW
    973172431U,	// LDUMAXLX
    973174230U,	// LDUMAXW
    973174230U,	// LDUMAXX
    973169657U,	// LDUMINAB
    973171168U,	// LDUMINAH
    973169858U,	// LDUMINALB
    973171315U,	// LDUMINALH
    973171985U,	// LDUMINALW
    973171985U,	// LDUMINALX
    973169374U,	// LDUMINAW
    973169374U,	// LDUMINAX
    973170041U,	// LDUMINB
    973171526U,	// LDUMINH
    973169956U,	// LDUMINLB
    973171413U,	// LDUMINLH
    973172275U,	// LDUMINLW
    973172275U,	// LDUMINLX
    973172532U,	// LDUMINW
    973172532U,	// LDUMINX
    106481134U,	// LDURBBi
    106484178U,	// LDURBi
    106484178U,	// LDURDi
    106482612U,	// LDURHHi
    106484178U,	// LDURHi
    106484178U,	// LDURQi
    106481272U,	// LDURSBWi
    106481272U,	// LDURSBXi
    106482737U,	// LDURSHWi
    106482737U,	// LDURSHXi
    106485116U,	// LDURSWi
    106484178U,	// LDURSi
    106484178U,	// LDURWi
    106484178U,	// LDURXi
    2248200401U,	// LDXPW
    2248200401U,	// LDXPX
    106481173U,	// LDXRB
    106482651U,	// LDXRH
    106484233U,	// LDXRW
    106484233U,	// LDXRX
    0U,	// LOADgot
    302002545U,	// LSLR_ZPmZ_B
    302010737U,	// LSLR_ZPmZ_D
    2186310001U,	// LSLR_ZPmZ_H
    302027121U,	// LSLR_ZPmZ_S
    100716143U,	// LSLVWr
    100716143U,	// LSLVXr
    302001775U,	// LSL_WIDE_ZPmZ_B
    2186309231U,	// LSL_WIDE_ZPmZ_H
    302026351U,	// LSL_WIDE_ZPmZ_S
    167784047U,	// LSL_WIDE_ZZZ_B
    2387111535U,	// LSL_WIDE_ZZZ_H
    268471919U,	// LSL_WIDE_ZZZ_S
    302001775U,	// LSL_ZPmI_B
    302009967U,	// LSL_ZPmI_D
    2186309231U,	// LSL_ZPmI_H
    302026351U,	// LSL_ZPmI_S
    302001775U,	// LSL_ZPmZ_B
    302009967U,	// LSL_ZPmZ_D
    2186309231U,	// LSL_ZPmZ_H
    302026351U,	// LSL_ZPmZ_S
    167784047U,	// LSL_ZZI_B
    201346671U,	// LSL_ZZI_D
    239627887U,	// LSL_ZZI_H
    268471919U,	// LSL_ZZI_S
    302002592U,	// LSRR_ZPmZ_B
    302010784U,	// LSRR_ZPmZ_D
    2186310048U,	// LSRR_ZPmZ_H
    302027168U,	// LSRR_ZPmZ_S
    100716971U,	// LSRVWr
    100716971U,	// LSRVXr
    302002603U,	// LSR_WIDE_ZPmZ_B
    2186310059U,	// LSR_WIDE_ZPmZ_H
    302027179U,	// LSR_WIDE_ZPmZ_S
    167784875U,	// LSR_WIDE_ZZZ_B
    2387112363U,	// LSR_WIDE_ZZZ_H
    268472747U,	// LSR_WIDE_ZZZ_S
    302002603U,	// LSR_ZPmI_B
    302010795U,	// LSR_ZPmI_D
    2186310059U,	// LSR_ZPmI_H
    302027179U,	// LSR_ZPmI_S
    302002603U,	// LSR_ZPmZ_B
    302010795U,	// LSR_ZPmZ_D
    2186310059U,	// LSR_ZPmZ_H
    302027179U,	// LSR_ZPmZ_S
    167784875U,	// LSR_ZZI_B
    201347499U,	// LSR_ZZI_D
    239628715U,	// LSR_ZZI_H
    268472747U,	// LSR_ZZI_S
    100714528U,	// MADDWrrr
    100714528U,	// MADDXrrr
    302000033U,	// MAD_ZPmZZ_B
    302008225U,	// MAD_ZPmZZ_D
    2186307489U,	// MAD_ZPmZZ_H
    302024609U,	// MAD_ZPmZZ_S
    301998787U,	// MLA_ZPmZZ_B
    302006979U,	// MLA_ZPmZZ_D
    2186306243U,	// MLA_ZPmZZ_H
    302023363U,	// MLA_ZPmZZ_S
    135324355U,	// MLAv16i8
    2283332291U,	// MLAv2i32
    2283332291U,	// MLAv2i32_indexed
    136897219U,	// MLAv4i16
    136897219U,	// MLAv4i16_indexed
    137421507U,	// MLAv4i32
    137421507U,	// MLAv4i32_indexed
    2285429443U,	// MLAv8i16
    2285429443U,	// MLAv8i16_indexed
    2285953731U,	// MLAv8i8
    302002845U,	// MLS_ZPmZZ_B
    302011037U,	// MLS_ZPmZZ_D
    2186310301U,	// MLS_ZPmZZ_H
    302027421U,	// MLS_ZPmZZ_S
    135328413U,	// MLSv16i8
    2283336349U,	// MLSv2i32
    2283336349U,	// MLSv2i32_indexed
    136901277U,	// MLSv4i16
    136901277U,	// MLSv4i16_indexed
    137425565U,	// MLSv4i32
    137425565U,	// MLSv4i32_indexed
    2285433501U,	// MLSv8i16
    2285433501U,	// MLSv8i16_indexed
    2285957789U,	// MLSv8i8
    1006685377U,	// MOVID
    3188763841U,	// MOVIv16b_ns
    1008774337U,	// MOVIv2d_ns
    3189288129U,	// MOVIv2i32
    3189288129U,	// MOVIv2s_msl
    3190336705U,	// MOVIv4i16
    3190860993U,	// MOVIv4i32
    3190860993U,	// MOVIv4s_msl
    3191909569U,	// MOVIv8b_ns
    3191385281U,	// MOVIv8i16
    402705612U,	// MOVKWi
    402705612U,	// MOVKXi
    0U,	// MOVMCSym
    3187724204U,	// MOVNWi
    3187724204U,	// MOVNXi
    13818U,	// MOVPRFX_ZPmZ_B
    22010U,	// MOVPRFX_ZPmZ_D
    2181592570U,	// MOVPRFX_ZPmZ_H
    38394U,	// MOVPRFX_ZPmZ_S
    302003706U,	// MOVPRFX_ZPzZ_B
    302011898U,	// MOVPRFX_ZPzZ_D
    2622518778U,	// MOVPRFX_ZPzZ_H
    302028282U,	// MOVPRFX_ZPzZ_S
    2449847802U,	// MOVPRFX_ZZ
    3187725950U,	// MOVZWi
    3187725950U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    1073795825U,	// MRS
    301999701U,	// MSB_ZPmZZ_B
    302007893U,	// MSB_ZPmZZ_D
    2186307157U,	// MSB_ZPmZZ_H
    302024277U,	// MSB_ZPmZZ_S
    381360U,	// MSR
    389552U,	// MSRpstateImm1
    389552U,	// MSRpstateImm4
    100714182U,	// MSUBWrrr
    100714182U,	// MSUBXrrr
    167784095U,	// MUL_ZI_B
    201346719U,	// MUL_ZI_D
    239627935U,	// MUL_ZI_H
    268471967U,	// MUL_ZI_S
    302001823U,	// MUL_ZPmZ_B
    302010015U,	// MUL_ZPmZ_D
    2186309279U,	// MUL_ZPmZ_H
    302026399U,	// MUL_ZPmZ_S
    68202143U,	// MULv16i8
    2216210079U,	// MULv2i32
    2216210079U,	// MULv2i32_indexed
    69775007U,	// MULv4i16
    69775007U,	// MULv4i16_indexed
    70299295U,	// MULv4i32
    70299295U,	// MULv4i32_indexed
    2218307231U,	// MULv8i16
    2218307231U,	// MULv8i16_indexed
    2218831519U,	// MULv8i8
    3189288110U,	// MVNIv2i32
    3189288110U,	// MVNIv2s_msl
    3190336686U,	// MVNIv4i16
    3190860974U,	// MVNIv4i32
    3190860974U,	// MVNIv4s_msl
    3191385262U,	// MVNIv8i16
    302002802U,	// NANDS_PPzPP
    302000196U,	// NAND_PPzPP
    10554U,	// NEG_ZPmZ_B
    18746U,	// NEG_ZPmZ_D
    2181589306U,	// NEG_ZPmZ_H
    35130U,	// NEG_ZPmZ_S
    68200762U,	// NEGv16i8
    2248198458U,	// NEGv1i64
    68725050U,	// NEGv2i32
    2216732986U,	// NEGv2i64
    69773626U,	// NEGv4i16
    2217781562U,	// NEGv4i32
    70822202U,	// NEGv8i16
    2218830138U,	// NEGv8i8
    302002940U,	// NORS_PPzPP
    302002564U,	// NOR_PPzPP
    13195U,	// NOT_ZPmZ_B
    21387U,	// NOT_ZPmZ_D
    2181591947U,	// NOT_ZPmZ_H
    37771U,	// NOT_ZPmZ_S
    68203403U,	// NOTv16i8
    2218832779U,	// NOTv8i8
    302002884U,	// ORNS_PPzPP
    0U,	// ORNWrr
    100716399U,	// ORNWrs
    0U,	// ORNXrr
    100716399U,	// ORNXrs
    302002031U,	// ORN_PPzPP
    68202351U,	// ORNv16i8
    2218831727U,	// ORNv8i8
    302002946U,	// ORRS_PPzPP
    100716949U,	// ORRWri
    0U,	// ORRWrr
    100716949U,	// ORRWrs
    100716949U,	// ORRXri
    0U,	// ORRXrr
    100716949U,	// ORRXrs
    302002581U,	// ORR_PPzPP
    201347477U,	// ORR_ZI
    302002581U,	// ORR_ZPmZ_B
    302010773U,	// ORR_ZPmZ_D
    2186310037U,	// ORR_ZPmZ_H
    302027157U,	// ORR_ZPmZ_S
    201347477U,	// ORR_ZZZ
    68202901U,	// ORRv16i8
    404287893U,	// ORRv2i32
    405336469U,	// ORRv4i16
    405860757U,	// ORRv4i32
    406385045U,	// ORRv8i16
    2218832277U,	// ORRv8i8
    302044281U,	// ORV_VPZ_B
    302044281U,	// ORV_VPZ_D
    302044281U,	// ORV_VPZ_H
    302044281U,	// ORV_VPZ_S
    2248196745U,	// PACDA
    2248197245U,	// PACDB
    6341468U,	// PACDZA
    6342394U,	// PACDZB
    100713126U,	// PACGA
    2248196781U,	// PACIA
    5929U,	// PACIA1716
    6105U,	// PACIASP
    6160U,	// PACIAZ
    2248197273U,	// PACIB
    5949U,	// PACIB1716
    6121U,	// PACIBSP
    6174U,	// PACIBZ
    6341484U,	// PACIZA
    6342410U,	// PACIZB
    6301929U,	// PFALSE
    70820119U,	// PMULLv16i8
    1132506645U,	// PMULLv1i64
    1166057751U,	// PMULLv2i64
    2218307093U,	// PMULLv8i8
    68202155U,	// PMULv16i8
    2218831531U,	// PMULv8i8
    302003123U,	// PNEXT_B
    302011315U,	// PNEXT_D
    2387637171U,	// PNEXT_H
    302027699U,	// PNEXT_S
    932054163U,	// PRFB_D_PZI
    246285459U,	// PRFB_D_SCALED
    2393769107U,	// PRFB_D_SXTW_SCALED
    246285459U,	// PRFB_D_UXTW_SCALED
    246285459U,	// PRFB_PRI
    2393769107U,	// PRFB_PRR
    932578451U,	// PRFB_S_PZI
    246285459U,	// PRFB_S_SXTW_SCALED
    2393769107U,	// PRFB_S_UXTW_SCALED
    1200490558U,	// PRFD_D_PZI
    246286398U,	// PRFD_D_SCALED
    2393770046U,	// PRFD_D_SXTW_SCALED
    246286398U,	// PRFD_D_UXTW_SCALED
    246286398U,	// PRFD_PRI
    2393770046U,	// PRFD_PRR
    1201014846U,	// PRFD_S_PZI
    246286398U,	// PRFD_S_SXTW_SCALED
    2393770046U,	// PRFD_S_UXTW_SCALED
    1234045528U,	// PRFH_D_PZI
    246286936U,	// PRFH_D_SCALED
    2393770584U,	// PRFH_D_SXTW_SCALED
    246286936U,	// PRFH_D_UXTW_SCALED
    246286936U,	// PRFH_PRI
    2393770584U,	// PRFH_PRR
    1234569816U,	// PRFH_S_PZI
    246286936U,	// PRFH_S_SXTW_SCALED
    2393770584U,	// PRFH_S_UXTW_SCALED
    436612843U,	// PRFMl
    106835691U,	// PRFMroW
    106835691U,	// PRFMroX
    106835691U,	// PRFMui
    246289712U,	// PRFS_PRR
    106835727U,	// PRFUMi
    1267602736U,	// PRFW_D_PZI
    2393773360U,	// PRFW_D_SCALED
    246289712U,	// PRFW_D_SXTW_SCALED
    2393773360U,	// PRFW_D_UXTW_SCALED
    246289712U,	// PRFW_PRI
    1268127024U,	// PRFW_S_PZI
    246289712U,	// PRFW_S_SXTW_SCALED
    2393773360U,	// PRFW_S_UXTW_SCALED
    2315629463U,	// PTEST_PP
    2650813049U,	// PTRUES_B
    2650821241U,	// PTRUES_D
    26767993U,	// PTRUES_H
    2650837625U,	// PTRUES_S
    2650810627U,	// PTRUE_B
    2650818819U,	// PTRUE_D
    26765571U,	// PTRUE_H
    2650835203U,	// PTRUE_S
    27290748U,	// PUNPKHI_PP
    27291587U,	// PUNPKLO_PP
    2216210206U,	// RADDHNv2i64_v2i32
    2284904802U,	// RADDHNv2i64_v4i32
    69775134U,	// RADDHNv4i32_v4i16
    137945442U,	// RADDHNv4i32_v8i16
    2282807650U,	// RADDHNv8i16_v16i8
    2218831646U,	// RADDHNv8i16_v8i8
    2216730741U,	// RAX1
    2248201041U,	// RBITWr
    2248201041U,	// RBITXr
    13137U,	// RBIT_ZPmZ_B
    21329U,	// RBIT_ZPmZ_D
    2181591889U,	// RBIT_ZPmZ_H
    37713U,	// RBIT_ZPmZ_S
    68203345U,	// RBITv16i8
    2218832721U,	// RBITv8i8
    302002921U,	// RDFFRS_PPz
    6304054U,	// RDFFR_P
    302002486U,	// RDFFR_PPz
    2248199872U,	// RDVLI_XI
    6345520U,	// RET
    6053U,	// RETAA
    6060U,	// RETAB
    0U,	// RET_ReallyLR
    2248196681U,	// REV16Wr
    2248196681U,	// REV16Xr
    68198985U,	// REV16v16i8
    2218828361U,	// REV16v8i8
    2248196219U,	// REV32Xr
    68198523U,	// REV32v16i8
    69771387U,	// REV32v4i16
    70819963U,	// REV32v8i16
    2218827899U,	// REV32v8i8
    68198960U,	// REV64v16i8
    68723248U,	// REV64v2i32
    69771824U,	// REV64v4i16
    2217779760U,	// REV64v4i32
    70820400U,	// REV64v8i16
    2218828336U,	// REV64v8i8
    18146U,	// REVB_ZPmZ_D
    2181588706U,	// REVB_ZPmZ_H
    34530U,	// REVB_ZPmZ_S
    19549U,	// REVH_ZPmZ_D
    35933U,	// REVH_ZPmZ_S
    21920U,	// REVW_ZPmZ_D
    2248201221U,	// REVWr
    2248201221U,	// REVXr
    2315269125U,	// REV_PP_B
    2348831749U,	// REV_PP_D
    608728069U,	// REV_PP_H
    2415956997U,	// REV_PP_S
    2315269125U,	// REV_ZZ_B
    2348831749U,	// REV_ZZ_D
    608728069U,	// REV_ZZ_H
    2415956997U,	// REV_ZZ_S
    100714772U,	// RMIF
    100716937U,	// RORVWr
    100716937U,	// RORVXr
    2282807679U,	// RSHRNv16i8_shift
    2216210271U,	// RSHRNv2i32_shift
    69775199U,	// RSHRNv4i16_shift
    2284904831U,	// RSHRNv4i32_shift
    137945471U,	// RSHRNv8i16_shift
    2218831711U,	// RSHRNv8i8_shift
    2216210198U,	// RSUBHNv2i64_v2i32
    2284904793U,	// RSUBHNv2i64_v4i32
    69775126U,	// RSUBHNv4i32_v4i16
    137945433U,	// RSUBHNv4i32_v8i16
    2282807641U,	// RSUBHNv8i16_v16i8
    2218831638U,	// RSUBHNv8i16_v8i8
    137945243U,	// SABALv16i8_v8i16
    2283859154U,	// SABALv2i32_v2i64
    137424082U,	// SABALv4i16_v4i32
    136372379U,	// SABALv4i32_v2i64
    2284904603U,	// SABALv8i16_v4i32
    2285432018U,	// SABALv8i8_v8i16
    135324285U,	// SABAv16i8
    2283332221U,	// SABAv2i32
    136897149U,	// SABAv4i16
    137421437U,	// SABAv4i32
    2285429373U,	// SABAv8i16
    2285953661U,	// SABAv8i8
    70820061U,	// SABDLv16i8_v8i16
    2216734083U,	// SABDLv2i32_v2i64
    70299011U,	// SABDLv4i16_v4i32
    69247197U,	// SABDLv4i32_v2i64
    2217779421U,	// SABDLv8i16_v4i32
    2218306947U,	// SABDLv8i8_v8i16
    302000058U,	// SABD_ZPmZ_B
    302008250U,	// SABD_ZPmZ_D
    2186307514U,	// SABD_ZPmZ_H
    302024634U,	// SABD_ZPmZ_S
    68200378U,	// SABDv16i8
    2216208314U,	// SABDv2i32
    69773242U,	// SABDv4i16
    70297530U,	// SABDv4i32
    2218305466U,	// SABDv8i16
    2218829754U,	// SABDv8i8
    137949227U,	// SADALPv16i8_v8i16
    162066475U,	// SADALPv2i32_v1i64
    135852075U,	// SADALPv4i16_v2i32
    2283860011U,	// SADALPv4i32_v2i64
    137424939U,	// SADALPv8i16_v4i32
    2284384299U,	// SADALPv8i8_v4i16
    70823995U,	// SADDLPv16i8_v8i16
    94941243U,	// SADDLPv2i32_v1i64
    68726843U,	// SADDLPv4i16_v2i32
    2216734779U,	// SADDLPv4i32_v2i64
    70299707U,	// SADDLPv8i16_v4i32
    2217259067U,	// SADDLPv8i8_v4i16
    67163176U,	// SADDLVv16i8v
    67163176U,	// SADDLVv4i16v
    2214646824U,	// SADDLVv4i32v
    67163176U,	// SADDLVv8i16v
    2214646824U,	// SADDLVv8i8v
    70820077U,	// SADDLv16i8_v8i16
    2216734121U,	// SADDLv2i32_v2i64
    70299049U,	// SADDLv4i16_v4i32
    69247213U,	// SADDLv4i32_v2i64
    2217779437U,	// SADDLv8i16_v4i32
    2218306985U,	// SADDLv8i8_v8i16
    302044145U,	// SADDV_VPZ_B
    302044145U,	// SADDV_VPZ_H
    302044145U,	// SADDV_VPZ_S
    2218303998U,	// SADDWv16i8_v8i16
    2216736034U,	// SADDWv2i32_v2i64
    70300962U,	// SADDWv4i16_v4i32
    2216731134U,	// SADDWv4i32_v2i64
    70296062U,	// SADDWv8i16_v4i32
    2218308898U,	// SADDWv8i8_v8i16
    6066U,	// SB
    100717146U,	// SBCSWr
    100717146U,	// SBCSXr
    100714273U,	// SBCWr
    100714273U,	// SBCXr
    100716255U,	// SBFMWri
    100716255U,	// SBFMXri
    100714778U,	// SCVTFSWDri
    100714778U,	// SCVTFSWHri
    100714778U,	// SCVTFSWSri
    100714778U,	// SCVTFSXDri
    100714778U,	// SCVTFSXHri
    100714778U,	// SCVTFSXSri
    2248198426U,	// SCVTFUWDri
    2248198426U,	// SCVTFUWHri
    2248198426U,	// SCVTFUWSri
    2248198426U,	// SCVTFUXDri
    2248198426U,	// SCVTFUXHri
    2248198426U,	// SCVTFUXSri
    18714U,	// SCVTF_ZPmZ_DtoD
    2181589274U,	// SCVTF_ZPmZ_DtoH
    35098U,	// SCVTF_ZPmZ_DtoS
    2181589274U,	// SCVTF_ZPmZ_HtoH
    18714U,	// SCVTF_ZPmZ_StoD
    2181589274U,	// SCVTF_ZPmZ_StoH
    35098U,	// SCVTF_ZPmZ_StoS
    100714778U,	// SCVTFd
    100714778U,	// SCVTFh
    100714778U,	// SCVTFs
    2248198426U,	// SCVTFv1i16
    2248198426U,	// SCVTFv1i32
    2248198426U,	// SCVTFv1i64
    68725018U,	// SCVTFv2f32
    2216732954U,	// SCVTFv2f64
    2216208666U,	// SCVTFv2i32_shift
    2216732954U,	// SCVTFv2i64_shift
    69773594U,	// SCVTFv4f16
    2217781530U,	// SCVTFv4f32
    69773594U,	// SCVTFv4i16_shift
    70297882U,	// SCVTFv4i32_shift
    70822170U,	// SCVTFv8f16
    2218305818U,	// SCVTFv8i16_shift
    302010868U,	// SDIVR_ZPmZ_D
    302027252U,	// SDIVR_ZPmZ_S
    100717596U,	// SDIVWr
    100717596U,	// SDIVXr
    302011420U,	// SDIV_ZPmZ_D
    302027804U,	// SDIV_ZPmZ_S
    3422573438U,	// SDOT_ZZZI_D
    3456144254U,	// SDOT_ZZZI_S
    3422573438U,	// SDOT_ZZZ_D
    3456144254U,	// SDOT_ZZZ_S
    137425790U,	// SDOTlanev16i8
    2283336574U,	// SDOTlanev8i8
    137425790U,	// SDOTv16i8
    2283336574U,	// SDOTv8i8
    302001593U,	// SEL_PPPP
    302001593U,	// SEL_ZPZZ_B
    302009785U,	// SEL_ZPZZ_D
    2387635641U,	// SEL_ZPZZ_H
    302026169U,	// SEL_ZPZZ_S
    6341185U,	// SETF16
    6341200U,	// SETF8
    6137U,	// SETFFR
    369190682U,	// SHA1Crrr
    2248198482U,	// SHA1Hrr
    369192664U,	// SHA1Mrrr
    369192940U,	// SHA1Prrr
    137420801U,	// SHA1SU0rrr
    2284904523U,	// SHA1SU1rr
    369189009U,	// SHA256H2rrr
    369191354U,	// SHA256Hrrr
    2284904469U,	// SHA256SU0rr
    137420895U,	// SHA256SU1rrr
    369191301U,	// SHA512H
    369188999U,	// SHA512H2
    2216730634U,	// SHA512SU0
    2283855956U,	// SHA512SU1
    68200465U,	// SHADDv16i8
    2216208401U,	// SHADDv2i32
    69773329U,	// SHADDv4i16
    70297617U,	// SHADDv4i32
    2218305553U,	// SHADDv8i16
    2218829841U,	// SHADDv8i8
    70820094U,	// SHLLv16i8
    2216734207U,	// SHLLv2i32
    70299135U,	// SHLLv4i16
    2216730878U,	// SHLLv4i32
    70295806U,	// SHLLv8i16
    2218307071U,	// SHLLv8i8
    100715976U,	// SHLd
    68201928U,	// SHLv16i8_shift
    2216209864U,	// SHLv2i32_shift
    2216734152U,	// SHLv2i64_shift
    69774792U,	// SHLv4i16_shift
    70299080U,	// SHLv4i32_shift
    2218307016U,	// SHLv8i16_shift
    2218831304U,	// SHLv8i8_shift
    2282807661U,	// SHRNv16i8_shift
    2216210255U,	// SHRNv2i32_shift
    69775183U,	// SHRNv4i16_shift
    2284904813U,	// SHRNv4i32_shift
    137945453U,	// SHRNv8i16_shift
    2218831695U,	// SHRNv8i8_shift
    68200119U,	// SHSUBv16i8
    2216208055U,	// SHSUBv2i32
    69772983U,	// SHSUBv4i16
    70297271U,	// SHSUBv4i32
    2218305207U,	// SHSUBv8i16
    2218829495U,	// SHSUBv8i8
    369192100U,	// SLId
    135326884U,	// SLIv16i8_shift
    2283334820U,	// SLIv2i32_shift
    2283859108U,	// SLIv2i64_shift
    136899748U,	// SLIv4i16_shift
    137424036U,	// SLIv4i32_shift
    2285431972U,	// SLIv8i16_shift
    2285956260U,	// SLIv8i8_shift
    137420906U,	// SM3PARTW1
    137421326U,	// SM3PARTW2
    70295614U,	// SM3SS1
    137421399U,	// SM3TT1A
    137421736U,	// SM3TT1B
    137421408U,	// SM3TT2A
    137421765U,	// SM3TT2B
    2217781355U,	// SM4E
    70301210U,	// SM4ENCKEY
    100715929U,	// SMADDLrrr
    68202691U,	// SMAXPv16i8
    2216210627U,	// SMAXPv2i32
    69775555U,	// SMAXPv4i16
    70299843U,	// SMAXPv4i32
    2218307779U,	// SMAXPv8i16
    2218832067U,	// SMAXPv8i8
    302044293U,	// SMAXV_VPZ_B
    302044293U,	// SMAXV_VPZ_D
    302044293U,	// SMAXV_VPZ_H
    302044293U,	// SMAXV_VPZ_S
    67163269U,	// SMAXVv16i8v
    67163269U,	// SMAXVv4i16v
    2214646917U,	// SMAXVv4i32v
    67163269U,	// SMAXVv8i16v
    2214646917U,	// SMAXVv8i8v
    167785936U,	// SMAX_ZI_B
    201348560U,	// SMAX_ZI_D
    239629776U,	// SMAX_ZI_H
    268473808U,	// SMAX_ZI_S
    302003664U,	// SMAX_ZPmZ_B
    302011856U,	// SMAX_ZPmZ_D
    2186311120U,	// SMAX_ZPmZ_H
    302028240U,	// SMAX_ZPmZ_S
    68203984U,	// SMAXv16i8
    2216211920U,	// SMAXv2i32
    69776848U,	// SMAXv4i16
    70301136U,	// SMAXv4i32
    2218309072U,	// SMAXv8i16
    2218833360U,	// SMAXv8i8
    75578U,	// SMC
    68202615U,	// SMINPv16i8
    2216210551U,	// SMINPv2i32
    69775479U,	// SMINPv4i16
    70299767U,	// SMINPv4i32
    2218307703U,	// SMINPv8i16
    2218831991U,	// SMINPv8i8
    302044241U,	// SMINV_VPZ_B
    302044241U,	// SMINV_VPZ_D
    302044241U,	// SMINV_VPZ_H
    302044241U,	// SMINV_VPZ_S
    67163217U,	// SMINVv16i8v
    67163217U,	// SMINVv4i16v
    2214646865U,	// SMINVv4i32v
    67163217U,	// SMINVv8i16v
    2214646865U,	// SMINVv8i8v
    167784238U,	// SMIN_ZI_B
    201346862U,	// SMIN_ZI_D
    239628078U,	// SMIN_ZI_H
    268472110U,	// SMIN_ZI_S
    302001966U,	// SMIN_ZPmZ_B
    302010158U,	// SMIN_ZPmZ_D
    2186309422U,	// SMIN_ZPmZ_H
    302026542U,	// SMIN_ZPmZ_S
    68202286U,	// SMINv16i8
    2216210222U,	// SMINv2i32
    69775150U,	// SMINv4i16
    70299438U,	// SMINv4i32
    2218307374U,	// SMINv8i16
    2218831662U,	// SMINv8i8
    137945277U,	// SMLALv16i8_v8i16
    2283859193U,	// SMLALv2i32_indexed
    2283859193U,	// SMLALv2i32_v2i64
    137424121U,	// SMLALv4i16_indexed
    137424121U,	// SMLALv4i16_v4i32
    136372413U,	// SMLALv4i32_indexed
    136372413U,	// SMLALv4i32_v2i64
    2284904637U,	// SMLALv8i16_indexed
    2284904637U,	// SMLALv8i16_v4i32
    2285432057U,	// SMLALv8i8_v8i16
    137945409U,	// SMLSLv16i8_v8i16
    2283859579U,	// SMLSLv2i32_indexed
    2283859579U,	// SMLSLv2i32_v2i64
    137424507U,	// SMLSLv4i16_indexed
    137424507U,	// SMLSLv4i16_v4i32
    136372545U,	// SMLSLv4i32_indexed
    136372545U,	// SMLSLv4i32_v2i64
    2284904769U,	// SMLSLv8i16_indexed
    2284904769U,	// SMLSLv8i16_v4i32
    2285432443U,	// SMLSLv8i8_v8i16
    67163244U,	// SMOVvi16to32
    67163244U,	// SMOVvi16to64
    2214646892U,	// SMOVvi32to64
    2214646892U,	// SMOVvi8to32
    2214646892U,	// SMOVvi8to64
    100715877U,	// SMSUBLrrr
    302000923U,	// SMULH_ZPmZ_B
    302009115U,	// SMULH_ZPmZ_D
    2186308379U,	// SMULH_ZPmZ_H
    302025499U,	// SMULH_ZPmZ_S
    100715291U,	// SMULHrr
    70820127U,	// SMULLv16i8_v8i16
    2216734236U,	// SMULLv2i32_indexed
    2216734236U,	// SMULLv2i32_v2i64
    70299164U,	// SMULLv4i16_indexed
    70299164U,	// SMULLv4i16_v4i32
    69247263U,	// SMULLv4i32_indexed
    69247263U,	// SMULLv4i32_v2i64
    2217779487U,	// SMULLv8i16_indexed
    2217779487U,	// SMULLv8i16_v4i32
    2218307100U,	// SMULLv8i8_v8i16
    0U,	// SPACE
    302000241U,	// SPLICE_ZPZ_B
    302008433U,	// SPLICE_ZPZ_D
    2387634289U,	// SPLICE_ZPZ_H
    302024817U,	// SPLICE_ZPZ_S
    68203070U,	// SQABSv16i8
    2248200766U,	// SQABSv1i16
    2248200766U,	// SQABSv1i32
    2248200766U,	// SQABSv1i64
    2248200766U,	// SQABSv1i8
    68727358U,	// SQABSv2i32
    2216735294U,	// SQABSv2i64
    69775934U,	// SQABSv4i16
    2217783870U,	// SQABSv4i32
    70824510U,	// SQABSv8i16
    2218832446U,	// SQABSv8i8
    167782447U,	// SQADD_ZI_B
    201345071U,	// SQADD_ZI_D
    239626287U,	// SQADD_ZI_H
    268470319U,	// SQADD_ZI_S
    167782447U,	// SQADD_ZZZ_B
    201345071U,	// SQADD_ZZZ_D
    2387109935U,	// SQADD_ZZZ_H
    268470319U,	// SQADD_ZZZ_S
    68200495U,	// SQADDv16i8
    100714543U,	// SQADDv1i16
    100714543U,	// SQADDv1i32
    100714543U,	// SQADDv1i64
    100714543U,	// SQADDv1i8
    2216208431U,	// SQADDv2i32
    2216732719U,	// SQADDv2i64
    69773359U,	// SQADDv4i16
    70297647U,	// SQADDv4i32
    2218305583U,	// SQADDv8i16
    2218829871U,	// SQADDv8i8
    536921181U,	// SQDECB_XPiI
    1342227549U,	// SQDECB_XPiWdI
    536922061U,	// SQDECD_XPiI
    1342228429U,	// SQDECD_XPiWdI
    536889293U,	// SQDECD_ZPiI
    536922672U,	// SQDECH_XPiI
    1342229040U,	// SQDECH_XPiWdI
    6842928U,	// SQDECH_ZPiI
    167825401U,	// SQDECP_XPWd_B
    201379833U,	// SQDECP_XPWd_D
    570478585U,	// SQDECP_XPWd_H
    268488697U,	// SQDECP_XPWd_S
    2315309049U,	// SQDECP_XP_B
    2348863481U,	// SQDECP_XP_D
    2717962233U,	// SQDECP_XP_H
    2415972345U,	// SQDECP_XP_S
    2147504121U,	// SQDECP_ZP_D
    604532729U,	// SQDECP_ZP_H
    2147520505U,	// SQDECP_ZP_S
    536925442U,	// SQDECW_XPiI
    1342231810U,	// SQDECW_XPiWdI
    536909058U,	// SQDECW_ZPiI
    369192169U,	// SQDMLALi16
    369192169U,	// SQDMLALi32
    369192169U,	// SQDMLALv1i32_indexed
    369192169U,	// SQDMLALv1i64_indexed
    2283859177U,	// SQDMLALv2i32_indexed
    2283859177U,	// SQDMLALv2i32_v2i64
    137424105U,	// SQDMLALv4i16_indexed
    137424105U,	// SQDMLALv4i16_v4i32
    136372395U,	// SQDMLALv4i32_indexed
    136372395U,	// SQDMLALv4i32_v2i64
    2284904619U,	// SQDMLALv8i16_indexed
    2284904619U,	// SQDMLALv8i16_v4i32
    369192555U,	// SQDMLSLi16
    369192555U,	// SQDMLSLi32
    369192555U,	// SQDMLSLv1i32_indexed
    369192555U,	// SQDMLSLv1i64_indexed
    2283859563U,	// SQDMLSLv2i32_indexed
    2283859563U,	// SQDMLSLv2i32_v2i64
    137424491U,	// SQDMLSLv4i16_indexed
    137424491U,	// SQDMLSLv4i16_v4i32
    136372527U,	// SQDMLSLv4i32_indexed
    136372527U,	// SQDMLSLv4i32_v2i64
    2284904751U,	// SQDMLSLv8i16_indexed
    2284904751U,	// SQDMLSLv8i16_v4i32
    100715272U,	// SQDMULHv1i16
    100715272U,	// SQDMULHv1i16_indexed
    100715272U,	// SQDMULHv1i32
    100715272U,	// SQDMULHv1i32_indexed
    2216209160U,	// SQDMULHv2i32
    2216209160U,	// SQDMULHv2i32_indexed
    69774088U,	// SQDMULHv4i16
    69774088U,	// SQDMULHv4i16_indexed
    70298376U,	// SQDMULHv4i32
    70298376U,	// SQDMULHv4i32_indexed
    2218306312U,	// SQDMULHv8i16
    2218306312U,	// SQDMULHv8i16_indexed
    100716044U,	// SQDMULLi16
    100716044U,	// SQDMULLi32
    100716044U,	// SQDMULLv1i32_indexed
    100716044U,	// SQDMULLv1i64_indexed
    2216734220U,	// SQDMULLv2i32_indexed
    2216734220U,	// SQDMULLv2i32_v2i64
    70299148U,	// SQDMULLv4i16_indexed
    70299148U,	// SQDMULLv4i16_v4i32
    69247245U,	// SQDMULLv4i32_indexed
    69247245U,	// SQDMULLv4i32_v2i64
    2217779469U,	// SQDMULLv8i16_indexed
    2217779469U,	// SQDMULLv8i16_v4i32
    536921197U,	// SQINCB_XPiI
    1342227565U,	// SQINCB_XPiWdI
    536922077U,	// SQINCD_XPiI
    1342228445U,	// SQINCD_XPiWdI
    536889309U,	// SQINCD_ZPiI
    536922688U,	// SQINCH_XPiI
    1342229056U,	// SQINCH_XPiWdI
    6842944U,	// SQINCH_ZPiI
    167825417U,	// SQINCP_XPWd_B
    201379849U,	// SQINCP_XPWd_D
    570478601U,	// SQINCP_XPWd_H
    268488713U,	// SQINCP_XPWd_S
    2315309065U,	// SQINCP_XP_B
    2348863497U,	// SQINCP_XP_D
    2717962249U,	// SQINCP_XP_H
    2415972361U,	// SQINCP_XP_S
    2147504137U,	// SQINCP_ZP_D
    604532745U,	// SQINCP_ZP_H
    2147520521U,	// SQINCP_ZP_S
    536925458U,	// SQINCW_XPiI
    1342231826U,	// SQINCW_XPiWdI
    536909074U,	// SQINCW_ZPiI
    68200767U,	// SQNEGv16i8
    2248198463U,	// SQNEGv1i16
    2248198463U,	// SQNEGv1i32
    2248198463U,	// SQNEGv1i64
    2248198463U,	// SQNEGv1i8
    68725055U,	// SQNEGv2i32
    2216732991U,	// SQNEGv2i64
    69773631U,	// SQNEGv4i16
    2217781567U,	// SQNEGv4i32
    70822207U,	// SQNEGv8i16
    2218830143U,	// SQNEGv8i8
    369191372U,	// SQRDMLAHi16_indexed
    369191372U,	// SQRDMLAHi32_indexed
    369191372U,	// SQRDMLAHv1i16
    369191372U,	// SQRDMLAHv1i32
    2283334092U,	// SQRDMLAHv2i32
    2283334092U,	// SQRDMLAHv2i32_indexed
    136899020U,	// SQRDMLAHv4i16
    136899020U,	// SQRDMLAHv4i16_indexed
    137423308U,	// SQRDMLAHv4i32
    137423308U,	// SQRDMLAHv4i32_indexed
    2285431244U,	// SQRDMLAHv8i16
    2285431244U,	// SQRDMLAHv8i16_indexed
    369191952U,	// SQRDMLSHi16_indexed
    369191952U,	// SQRDMLSHi32_indexed
    369191952U,	// SQRDMLSHv1i16
    369191952U,	// SQRDMLSHv1i32
    2283334672U,	// SQRDMLSHv2i32
    2283334672U,	// SQRDMLSHv2i32_indexed
    136899600U,	// SQRDMLSHv4i16
    136899600U,	// SQRDMLSHv4i16_indexed
    137423888U,	// SQRDMLSHv4i32
    137423888U,	// SQRDMLSHv4i32_indexed
    2285431824U,	// SQRDMLSHv8i16
    2285431824U,	// SQRDMLSHv8i16_indexed
    100715281U,	// SQRDMULHv1i16
    100715281U,	// SQRDMULHv1i16_indexed
    100715281U,	// SQRDMULHv1i32
    100715281U,	// SQRDMULHv1i32_indexed
    2216209169U,	// SQRDMULHv2i32
    2216209169U,	// SQRDMULHv2i32_indexed
    69774097U,	// SQRDMULHv4i16
    69774097U,	// SQRDMULHv4i16_indexed
    70298385U,	// SQRDMULHv4i32
    70298385U,	// SQRDMULHv4i32_indexed
    2218306321U,	// SQRDMULHv8i16
    2218306321U,	// SQRDMULHv8i16_indexed
    68201940U,	// SQRSHLv16i8
    100715988U,	// SQRSHLv1i16
    100715988U,	// SQRSHLv1i32
    100715988U,	// SQRSHLv1i64
    100715988U,	// SQRSHLv1i8
    2216209876U,	// SQRSHLv2i32
    2216734164U,	// SQRSHLv2i64
    69774804U,	// SQRSHLv4i16
    70299092U,	// SQRSHLv4i32
    2218307028U,	// SQRSHLv8i16
    2218831316U,	// SQRSHLv8i8
    100716381U,	// SQRSHRNb
    100716381U,	// SQRSHRNh
    100716381U,	// SQRSHRNs
    2282807677U,	// SQRSHRNv16i8_shift
    2216210269U,	// SQRSHRNv2i32_shift
    69775197U,	// SQRSHRNv4i16_shift
    2284904829U,	// SQRSHRNv4i32_shift
    137945469U,	// SQRSHRNv8i16_shift
    2218831709U,	// SQRSHRNv8i8_shift
    100716442U,	// SQRSHRUNb
    100716442U,	// SQRSHRUNh
    100716442U,	// SQRSHRUNs
    2282807737U,	// SQRSHRUNv16i8_shift
    2216210330U,	// SQRSHRUNv2i32_shift
    69775258U,	// SQRSHRUNv4i16_shift
    2284904889U,	// SQRSHRUNv4i32_shift
    137945529U,	// SQRSHRUNv8i16_shift
    2218831770U,	// SQRSHRUNv8i8_shift
    100717506U,	// SQSHLUb
    100717506U,	// SQSHLUd
    100717506U,	// SQSHLUh
    100717506U,	// SQSHLUs
    68203458U,	// SQSHLUv16i8_shift
    2216211394U,	// SQSHLUv2i32_shift
    2216735682U,	// SQSHLUv2i64_shift
    69776322U,	// SQSHLUv4i16_shift
    70300610U,	// SQSHLUv4i32_shift
    2218308546U,	// SQSHLUv8i16_shift
    2218832834U,	// SQSHLUv8i8_shift
    100715974U,	// SQSHLb
    100715974U,	// SQSHLd
    100715974U,	// SQSHLh
    100715974U,	// SQSHLs
    68201926U,	// SQSHLv16i8
    68201926U,	// SQSHLv16i8_shift
    100715974U,	// SQSHLv1i16
    100715974U,	// SQSHLv1i32
    100715974U,	// SQSHLv1i64
    100715974U,	// SQSHLv1i8
    2216209862U,	// SQSHLv2i32
    2216209862U,	// SQSHLv2i32_shift
    2216734150U,	// SQSHLv2i64
    2216734150U,	// SQSHLv2i64_shift
    69774790U,	// SQSHLv4i16
    69774790U,	// SQSHLv4i16_shift
    70299078U,	// SQSHLv4i32
    70299078U,	// SQSHLv4i32_shift
    2218307014U,	// SQSHLv8i16
    2218307014U,	// SQSHLv8i16_shift
    2218831302U,	// SQSHLv8i8
    2218831302U,	// SQSHLv8i8_shift
    100716365U,	// SQSHRNb
    100716365U,	// SQSHRNh
    100716365U,	// SQSHRNs
    2282807659U,	// SQSHRNv16i8_shift
    2216210253U,	// SQSHRNv2i32_shift
    69775181U,	// SQSHRNv4i16_shift
    2284904811U,	// SQSHRNv4i32_shift
    137945451U,	// SQSHRNv8i16_shift
    2218831693U,	// SQSHRNv8i8_shift
    100716433U,	// SQSHRUNb
    100716433U,	// SQSHRUNh
    100716433U,	// SQSHRUNs
    2282807727U,	// SQSHRUNv16i8_shift
    2216210321U,	// SQSHRUNv2i32_shift
    69775249U,	// SQSHRUNv4i16_shift
    2284904879U,	// SQSHRUNv4i32_shift
    137945519U,	// SQSHRUNv8i16_shift
    2218831761U,	// SQSHRUNv8i8_shift
    167782100U,	// SQSUB_ZI_B
    201344724U,	// SQSUB_ZI_D
    239625940U,	// SQSUB_ZI_H
    268469972U,	// SQSUB_ZI_S
    167782100U,	// SQSUB_ZZZ_B
    201344724U,	// SQSUB_ZZZ_D
    2387109588U,	// SQSUB_ZZZ_H
    268469972U,	// SQSUB_ZZZ_S
    68200148U,	// SQSUBv16i8
    100714196U,	// SQSUBv1i16
    100714196U,	// SQSUBv1i32
    100714196U,	// SQSUBv1i64
    100714196U,	// SQSUBv1i8
    2216208084U,	// SQSUBv2i32
    2216732372U,	// SQSUBv2i64
    69773012U,	// SQSUBv4i16
    70297300U,	// SQSUBv4i32
    2218305236U,	// SQSUBv8i16
    2218829524U,	// SQSUBv8i8
    135324063U,	// SQXTNv16i8
    2248200067U,	// SQXTNv1i16
    2248200067U,	// SQXTNv1i32
    2248200067U,	// SQXTNv1i8
    2216210307U,	// SQXTNv2i32
    2217258883U,	// SQXTNv4i16
    2284904863U,	// SQXTNv4i32
    2285429151U,	// SQXTNv8i16
    71348099U,	// SQXTNv8i8
    135324100U,	// SQXTUNv16i8
    2248200100U,	// SQXTUNv1i16
    2248200100U,	// SQXTUNv1i32
    2248200100U,	// SQXTUNv1i8
    2216210340U,	// SQXTUNv2i32
    2217258916U,	// SQXTUNv4i16
    2284904900U,	// SQXTUNv4i32
    2285429188U,	// SQXTUNv8i16
    71348132U,	// SQXTUNv8i8
    68200449U,	// SRHADDv16i8
    2216208385U,	// SRHADDv2i32
    69773313U,	// SRHADDv4i16
    70297601U,	// SRHADDv4i32
    2218305537U,	// SRHADDv8i16
    2218829825U,	// SRHADDv8i8
    369192116U,	// SRId
    135326900U,	// SRIv16i8_shift
    2283334836U,	// SRIv2i32_shift
    2283859124U,	// SRIv2i64_shift
    136899764U,	// SRIv4i16_shift
    137424052U,	// SRIv4i32_shift
    2285431988U,	// SRIv8i16_shift
    2285956276U,	// SRIv8i8_shift
    68201956U,	// SRSHLv16i8
    100716004U,	// SRSHLv1i64
    2216209892U,	// SRSHLv2i32
    2216734180U,	// SRSHLv2i64
    69774820U,	// SRSHLv4i16
    70299108U,	// SRSHLv4i32
    2218307044U,	// SRSHLv8i16
    2218831332U,	// SRSHLv8i8
    100716868U,	// SRSHRd
    68202820U,	// SRSHRv16i8_shift
    2216210756U,	// SRSHRv2i32_shift
    2216735044U,	// SRSHRv2i64_shift
    69775684U,	// SRSHRv4i16_shift
    70299972U,	// SRSHRv4i32_shift
    2218307908U,	// SRSHRv8i16_shift
    2218832196U,	// SRSHRv8i8_shift
    369189650U,	// SRSRAd
    135324434U,	// SRSRAv16i8_shift
    2283332370U,	// SRSRAv2i32_shift
    2283856658U,	// SRSRAv2i64_shift
    136897298U,	// SRSRAv4i16_shift
    137421586U,	// SRSRAv4i32_shift
    2285429522U,	// SRSRAv8i16_shift
    2285953810U,	// SRSRAv8i8_shift
    70820093U,	// SSHLLv16i8_shift
    2216734206U,	// SSHLLv2i32_shift
    70299134U,	// SSHLLv4i16_shift
    69247229U,	// SSHLLv4i32_shift
    2217779453U,	// SSHLLv8i16_shift
    2218307070U,	// SSHLLv8i8_shift
    68201970U,	// SSHLv16i8
    100716018U,	// SSHLv1i64
    2216209906U,	// SSHLv2i32
    2216734194U,	// SSHLv2i64
    69774834U,	// SSHLv4i16
    70299122U,	// SSHLv4i32
    2218307058U,	// SSHLv8i16
    2218831346U,	// SSHLv8i8
    100716882U,	// SSHRd
    68202834U,	// SSHRv16i8_shift
    2216210770U,	// SSHRv2i32_shift
    2216735058U,	// SSHRv2i64_shift
    69775698U,	// SSHRv4i16_shift
    70299986U,	// SSHRv4i32_shift
    2218307922U,	// SSHRv8i16_shift
    2218832210U,	// SSHRv8i8_shift
    369189664U,	// SSRAd
    135324448U,	// SSRAv16i8_shift
    2283332384U,	// SSRAv2i32_shift
    2283856672U,	// SSRAv2i64_shift
    136897312U,	// SSRAv4i16_shift
    137421600U,	// SSRAv4i32_shift
    2285429536U,	// SSRAv8i16_shift
    2285953824U,	// SSRAv8i8_shift
    374997922U,	// SST1B_D
    878314402U,	// SST1B_D_IMM
    374997922U,	// SST1B_D_SXTW
    374997922U,	// SST1B_D_UXTW
    811213730U,	// SST1B_S_IMM
    375006114U,	// SST1B_S_SXTW
    375006114U,	// SST1B_S_UXTW
    374998902U,	// SST1D
    3025799030U,	// SST1D_IMM
    374998902U,	// SST1D_SCALED
    374998902U,	// SST1D_SXTW
    374998902U,	// SST1D_SXTW_SCALED
    374998902U,	// SST1D_UXTW
    374998902U,	// SST1D_UXTW_SCALED
    374999423U,	// SST1H_D
    878315903U,	// SST1H_D_IMM
    374999423U,	// SST1H_D_SCALED
    374999423U,	// SST1H_D_SXTW
    374999423U,	// SST1H_D_SXTW_SCALED
    374999423U,	// SST1H_D_UXTW
    374999423U,	// SST1H_D_UXTW_SCALED
    811215231U,	// SST1H_S_IMM
    375007615U,	// SST1H_S_SXTW
    375007615U,	// SST1H_S_SXTW_SCALED
    375007615U,	// SST1H_S_UXTW
    375007615U,	// SST1H_S_UXTW_SCALED
    375002297U,	// SST1W_D
    3025802425U,	// SST1W_D_IMM
    375002297U,	// SST1W_D_SCALED
    375002297U,	// SST1W_D_SXTW
    375002297U,	// SST1W_D_SXTW_SCALED
    375002297U,	// SST1W_D_UXTW
    375002297U,	// SST1W_D_UXTW_SCALED
    2958701753U,	// SST1W_IMM
    375010489U,	// SST1W_SXTW
    375010489U,	// SST1W_SXTW_SCALED
    375010489U,	// SST1W_UXTW
    375010489U,	// SST1W_UXTW_SCALED
    70820045U,	// SSUBLv16i8_v8i16
    2216734069U,	// SSUBLv2i32_v2i64
    70298997U,	// SSUBLv4i16_v4i32
    69247181U,	// SSUBLv4i32_v2i64
    2217779405U,	// SSUBLv8i16_v4i32
    2218306933U,	// SSUBLv8i8_v8i16
    2218303982U,	// SSUBWv16i8_v8i16
    2216735979U,	// SSUBWv2i32_v2i64
    70300907U,	// SSUBWv4i16_v4i32
    2216731118U,	// SSUBWv4i32_v2i64
    70296046U,	// SSUBWv8i16_v4i32
    2218308843U,	// SSUBWv8i8_v8i16
    375022498U,	// ST1B
    374997922U,	// ST1B_D
    374997922U,	// ST1B_D_IMM
    375030690U,	// ST1B_H
    375030690U,	// ST1B_H_IMM
    375022498U,	// ST1B_IMM
    375006114U,	// ST1B_S
    375006114U,	// ST1B_S_IMM
    374998902U,	// ST1D
    374998902U,	// ST1D_IMM
    172102U,	// ST1Fourv16b
    13287494U,	// ST1Fourv16b_POST
    188486U,	// ST1Fourv1d
    13828166U,	// ST1Fourv1d_POST
    204870U,	// ST1Fourv2d
    13320262U,	// ST1Fourv2d_POST
    221254U,	// ST1Fourv2s
    13860934U,	// ST1Fourv2s_POST
    237638U,	// ST1Fourv4h
    13877318U,	// ST1Fourv4h_POST
    254022U,	// ST1Fourv4s
    13369414U,	// ST1Fourv4s_POST
    270406U,	// ST1Fourv8b
    13910086U,	// ST1Fourv8b_POST
    286790U,	// ST1Fourv8h
    13402182U,	// ST1Fourv8h_POST
    375032191U,	// ST1H
    374999423U,	// ST1H_D
    374999423U,	// ST1H_D_IMM
    375032191U,	// ST1H_IMM
    375007615U,	// ST1H_S
    375007615U,	// ST1H_S_IMM
    172102U,	// ST1Onev16b
    14336070U,	// ST1Onev16b_POST
    188486U,	// ST1Onev1d
    14876742U,	// ST1Onev1d_POST
    204870U,	// ST1Onev2d
    14368838U,	// ST1Onev2d_POST
    221254U,	// ST1Onev2s
    14909510U,	// ST1Onev2s_POST
    237638U,	// ST1Onev4h
    14925894U,	// ST1Onev4h_POST
    254022U,	// ST1Onev4s
    14417990U,	// ST1Onev4s_POST
    270406U,	// ST1Onev8b
    14958662U,	// ST1Onev8b_POST
    286790U,	// ST1Onev8h
    14450758U,	// ST1Onev8h_POST
    172102U,	// ST1Threev16b
    16957510U,	// ST1Threev16b_POST
    188486U,	// ST1Threev1d
    17498182U,	// ST1Threev1d_POST
    204870U,	// ST1Threev2d
    16990278U,	// ST1Threev2d_POST
    221254U,	// ST1Threev2s
    17530950U,	// ST1Threev2s_POST
    237638U,	// ST1Threev4h
    17547334U,	// ST1Threev4h_POST
    254022U,	// ST1Threev4s
    17039430U,	// ST1Threev4s_POST
    270406U,	// ST1Threev8b
    17580102U,	// ST1Threev8b_POST
    286790U,	// ST1Threev8h
    17072198U,	// ST1Threev8h_POST
    172102U,	// ST1Twov16b
    13811782U,	// ST1Twov16b_POST
    188486U,	// ST1Twov1d
    14352454U,	// ST1Twov1d_POST
    204870U,	// ST1Twov2d
    13844550U,	// ST1Twov2d_POST
    221254U,	// ST1Twov2s
    14385222U,	// ST1Twov2s_POST
    237638U,	// ST1Twov4h
    14401606U,	// ST1Twov4h_POST
    254022U,	// ST1Twov4s
    13893702U,	// ST1Twov4s_POST
    270406U,	// ST1Twov8b
    14434374U,	// ST1Twov8b_POST
    286790U,	// ST1Twov8h
    13926470U,	// ST1Twov8h_POST
    375010489U,	// ST1W
    375002297U,	// ST1W_D
    375002297U,	// ST1W_D_IMM
    375010489U,	// ST1W_IMM
    409670U,	// ST1i16
    1404346438U,	// ST1i16_POST
    417862U,	// ST1i32
    1437917254U,	// ST1i32_POST
    426054U,	// ST1i64
    1471488070U,	// ST1i64_POST
    434246U,	// ST1i8
    1505058886U,	// ST1i8_POST
    375022527U,	// ST2B
    375022527U,	// ST2B_IMM
    374998914U,	// ST2D
    374998914U,	// ST2D_IMM
    1510004616U,	// ST2GOffset
    3719395208U,	// ST2GPostIndex
    3691083656U,	// ST2GPreIndex
    375032220U,	// ST2H
    375032220U,	// ST2H_IMM
    172521U,	// ST2Twov16b
    13812201U,	// ST2Twov16b_POST
    205289U,	// ST2Twov2d
    13844969U,	// ST2Twov2d_POST
    221673U,	// ST2Twov2s
    14385641U,	// ST2Twov2s_POST
    238057U,	// ST2Twov4h
    14402025U,	// ST2Twov4h_POST
    254441U,	// ST2Twov4s
    13894121U,	// ST2Twov4s_POST
    270825U,	// ST2Twov8b
    14434793U,	// ST2Twov8b_POST
    287209U,	// ST2Twov8h
    13926889U,	// ST2Twov8h_POST
    375010509U,	// ST2W
    375010509U,	// ST2W_IMM
    410089U,	// ST2i16
    1437901289U,	// ST2i16_POST
    418281U,	// ST2i32
    1471472105U,	// ST2i32_POST
    426473U,	// ST2i64
    1605706217U,	// ST2i64_POST
    434665U,	// ST2i8
    1404396009U,	// ST2i8_POST
    375022548U,	// ST3B
    375022548U,	// ST3B_IMM
    374998926U,	// ST3D
    374998926U,	// ST3D_IMM
    375032232U,	// ST3H
    375032232U,	// ST3H_IMM
    172587U,	// ST3Threev16b
    16957995U,	// ST3Threev16b_POST
    205355U,	// ST3Threev2d
    16990763U,	// ST3Threev2d_POST
    221739U,	// ST3Threev2s
    17531435U,	// ST3Threev2s_POST
    238123U,	// ST3Threev4h
    17547819U,	// ST3Threev4h_POST
    254507U,	// ST3Threev4s
    17039915U,	// ST3Threev4s_POST
    270891U,	// ST3Threev8b
    17580587U,	// ST3Threev8b_POST
    287275U,	// ST3Threev8h
    17072683U,	// ST3Threev8h_POST
    375010521U,	// ST3W
    375010521U,	// ST3W_IMM
    410155U,	// ST3i16
    1639227947U,	// ST3i16_POST
    418347U,	// ST3i32
    1672798763U,	// ST3i32_POST
    426539U,	// ST3i64
    1706369579U,	// ST3i64_POST
    434731U,	// ST3i8
    1739940395U,	// ST3i8_POST
    375022560U,	// ST4B
    375022560U,	// ST4B_IMM
    374998938U,	// ST4D
    374998938U,	// ST4D_IMM
    172604U,	// ST4Fourv16b
    13287996U,	// ST4Fourv16b_POST
    205372U,	// ST4Fourv2d
    13320764U,	// ST4Fourv2d_POST
    221756U,	// ST4Fourv2s
    13861436U,	// ST4Fourv2s_POST
    238140U,	// ST4Fourv4h
    13877820U,	// ST4Fourv4h_POST
    254524U,	// ST4Fourv4s
    13369916U,	// ST4Fourv4s_POST
    270908U,	// ST4Fourv8b
    13910588U,	// ST4Fourv8b_POST
    287292U,	// ST4Fourv8h
    13402684U,	// ST4Fourv8h_POST
    375032244U,	// ST4H
    375032244U,	// ST4H_IMM
    375010533U,	// ST4W
    375010533U,	// ST4W_IMM
    410172U,	// ST4i16
    1471455804U,	// ST4i16_POST
    418364U,	// ST4i32
    1605689916U,	// ST4i32_POST
    426556U,	// ST4i64
    1773478460U,	// ST4i64_POST
    434748U,	// ST4i8
    1437950524U,	// ST4i8_POST
    1510004631U,	// STGOffset
    2248200229U,	// STGPi
    3719395223U,	// STGPostIndex
    2516676645U,	// STGPpost
    2516676645U,	// STGPpre
    3691083671U,	// STGPreIndex
    2522444816U,	// STGV
    106481083U,	// STLLRB
    106482561U,	// STLLRH
    106484074U,	// STLLRW
    106484074U,	// STLLRX
    106481091U,	// STLRB
    106482569U,	// STLRH
    106484087U,	// STLRW
    106484087U,	// STLRX
    106481141U,	// STLURBi
    106482619U,	// STLURHi
    106484184U,	// STLURWi
    106484184U,	// STLURXi
    100716759U,	// STLXPW
    100716759U,	// STLXPX
    2248197660U,	// STLXRB
    2248199138U,	// STLXRH
    2248200719U,	// STLXRW
    2248200719U,	// STLXRX
    2248200325U,	// STNPDi
    2248200325U,	// STNPQi
    2248200325U,	// STNPSi
    2248200325U,	// STNPWi
    2248200325U,	// STNPXi
    375022490U,	// STNT1B_ZRI
    375022490U,	// STNT1B_ZRR
    374998894U,	// STNT1D_ZRI
    374998894U,	// STNT1D_ZRR
    375032183U,	// STNT1H_ZRI
    375032183U,	// STNT1H_ZRR
    375010481U,	// STNT1W_ZRI
    375010481U,	// STNT1W_ZRR
    2248200357U,	// STPDi
    2516676773U,	// STPDpost
    2516676773U,	// STPDpre
    2248200357U,	// STPQi
    2516676773U,	// STPQpost
    2516676773U,	// STPQpre
    2248200357U,	// STPSi
    2516676773U,	// STPSpost
    2516676773U,	// STPSpre
    2248200357U,	// STPWi
    2516676773U,	// STPWpost
    2516676773U,	// STPWpre
    2248200357U,	// STPXi
    2516676773U,	// STPXpost
    2516676773U,	// STPXpre
    374957537U,	// STRBBpost
    374957537U,	// STRBBpre
    106481121U,	// STRBBroW
    106481121U,	// STRBBroX
    106481121U,	// STRBBui
    374960577U,	// STRBpost
    374960577U,	// STRBpre
    106484161U,	// STRBroW
    106484161U,	// STRBroX
    106484161U,	// STRBui
    374960577U,	// STRDpost
    374960577U,	// STRDpre
    106484161U,	// STRDroW
    106484161U,	// STRDroX
    106484161U,	// STRDui
    374959015U,	// STRHHpost
    374959015U,	// STRHHpre
    106482599U,	// STRHHroW
    106482599U,	// STRHHroX
    106482599U,	// STRHHui
    374960577U,	// STRHpost
    374960577U,	// STRHpre
    106484161U,	// STRHroW
    106484161U,	// STRHroX
    106484161U,	// STRHui
    374960577U,	// STRQpost
    374960577U,	// STRQpre
    106484161U,	// STRQroW
    106484161U,	// STRQroX
    106484161U,	// STRQui
    374960577U,	// STRSpost
    374960577U,	// STRSpre
    106484161U,	// STRSroW
    106484161U,	// STRSroX
    106484161U,	// STRSui
    374960577U,	// STRWpost
    374960577U,	// STRWpre
    106484161U,	// STRWroW
    106484161U,	// STRWroX
    106484161U,	// STRWui
    374960577U,	// STRXpost
    374960577U,	// STRXpre
    106484161U,	// STRXroW
    106484161U,	// STRXroX
    106484161U,	// STRXui
    106803649U,	// STR_PXI
    106803649U,	// STR_ZXI
    106481127U,	// STTRBi
    106482605U,	// STTRHi
    106484166U,	// STTRWi
    106484166U,	// STTRXi
    106481158U,	// STURBBi
    106484199U,	// STURBi
    106484199U,	// STURDi
    106482636U,	// STURHHi
    106484199U,	// STURHi
    106484199U,	// STURQi
    106484199U,	// STURSi
    106484199U,	// STURWi
    106484199U,	// STURXi
    100716766U,	// STXPW
    100716766U,	// STXPX
    2248197668U,	// STXRB
    2248199146U,	// STXRH
    2248200726U,	// STXRW
    2248200726U,	// STXRX
    1510004623U,	// STZ2GOffset
    3719395215U,	// STZ2GPostIndex
    3691083663U,	// STZ2GPreIndex
    1510004637U,	// STZGOffset
    3719395229U,	// STZGPostIndex
    3691083677U,	// STZGPreIndex
    100714792U,	// SUBG
    2216210199U,	// SUBHNv2i64_v2i32
    2284904794U,	// SUBHNv2i64_v4i32
    69775127U,	// SUBHNv4i32_v4i16
    137945434U,	// SUBHNv4i32_v8i16
    2282807642U,	// SUBHNv8i16_v16i8
    2218831639U,	// SUBHNv8i16_v8i8
    100716531U,	// SUBP
    100717266U,	// SUBPS
    167784742U,	// SUBR_ZI_B
    201347366U,	// SUBR_ZI_D
    239628582U,	// SUBR_ZI_H
    268472614U,	// SUBR_ZI_S
    302002470U,	// SUBR_ZPmZ_B
    302010662U,	// SUBR_ZPmZ_D
    2186309926U,	// SUBR_ZPmZ_H
    302027046U,	// SUBR_ZPmZ_S
    100717140U,	// SUBSWri
    0U,	// SUBSWrr
    100717140U,	// SUBSWrs
    100717140U,	// SUBSWrx
    100717140U,	// SUBSXri
    0U,	// SUBSXrr
    100717140U,	// SUBSXrs
    100717140U,	// SUBSXrx
    100717140U,	// SUBSXrx64
    100714162U,	// SUBWri
    0U,	// SUBWrr
    100714162U,	// SUBWrs
    100714162U,	// SUBWrx
    100714162U,	// SUBXri
    0U,	// SUBXrr
    100714162U,	// SUBXrs
    100714162U,	// SUBXrx
    100714162U,	// SUBXrx64
    167782066U,	// SUB_ZI_B
    201344690U,	// SUB_ZI_D
    239625906U,	// SUB_ZI_H
    268469938U,	// SUB_ZI_S
    301999794U,	// SUB_ZPmZ_B
    302007986U,	// SUB_ZPmZ_D
    2186307250U,	// SUB_ZPmZ_H
    302024370U,	// SUB_ZPmZ_S
    167782066U,	// SUB_ZZZ_B
    201344690U,	// SUB_ZZZ_D
    2387109554U,	// SUB_ZZZ_H
    268469938U,	// SUB_ZZZ_S
    68200114U,	// SUBv16i8
    100714162U,	// SUBv1i64
    2216208050U,	// SUBv2i32
    2216732338U,	// SUBv2i64
    69772978U,	// SUBv4i16
    70297266U,	// SUBv4i32
    2218305202U,	// SUBv8i16
    2218829490U,	// SUBv8i8
    2415938693U,	// SUNPKHI_ZZ_D
    27290757U,	// SUNPKHI_ZZ_H
    2717944965U,	// SUNPKHI_ZZ_S
    2415939532U,	// SUNPKLO_ZZ_D
    27291596U,	// SUNPKLO_ZZ_H
    2717945804U,	// SUNPKLO_ZZ_S
    135325750U,	// SUQADDv16i8
    2516674614U,	// SUQADDv1i16
    2516674614U,	// SUQADDv1i32
    2516674614U,	// SUQADDv1i64
    2516674614U,	// SUQADDv1i8
    135850038U,	// SUQADDv2i32
    2283857974U,	// SUQADDv2i64
    136898614U,	// SUQADDv4i16
    2284906550U,	// SUQADDv4i32
    137947190U,	// SUQADDv8i16
    2285955126U,	// SUQADDv8i8
    75595U,	// SVC
    973169667U,	// SWPAB
    973171178U,	// SWPAH
    973169869U,	// SWPALB
    973171326U,	// SWPALH
    973172003U,	// SWPALW
    973172003U,	// SWPALX
    973169397U,	// SWPAW
    973169397U,	// SWPAX
    973170057U,	// SWPB
    973171535U,	// SWPH
    973169966U,	// SWPLB
    973171423U,	// SWPLH
    973172298U,	// SWPLW
    973172298U,	// SWPLX
    973172912U,	// SWPW
    973172912U,	// SWPX
    18085U,	// SXTB_ZPmZ_D
    2181588645U,	// SXTB_ZPmZ_H
    34469U,	// SXTB_ZPmZ_S
    19537U,	// SXTH_ZPmZ_D
    35921U,	// SXTH_ZPmZ_S
    21908U,	// SXTW_ZPmZ_D
    100716169U,	// SYSLxt
    1778438929U,	// SYSxt
    0U,	// SpeculationSafeValueW
    0U,	// SpeculationSafeValueX
    1811950944U,	// TBL_ZZZ_B
    1845513568U,	// TBL_ZZZ_D
    28863840U,	// TBL_ZZZ_H
    1879084384U,	// TBL_ZZZ_S
    1913695584U,	// TBLv16i8Four
    1913695584U,	// TBLv16i8One
    1913695584U,	// TBLv16i8Three
    1913695584U,	// TBLv16i8Two
    4064324960U,	// TBLv8i8Four
    4064324960U,	// TBLv8i8One
    4064324960U,	// TBLv8i8Three
    4064324960U,	// TBLv8i8Two
    100718192U,	// TBNZW
    100718192U,	// TBNZX
    1947268574U,	// TBXv16i8Four
    1947268574U,	// TBXv16i8One
    1947268574U,	// TBXv16i8Three
    1947268574U,	// TBXv16i8Two
    4097897950U,	// TBXv8i8Four
    4097897950U,	// TBXv8i8One
    4097897950U,	// TBXv8i8Three
    4097897950U,	// TBXv8i8Two
    100718176U,	// TBZW
    100718176U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TCRETURNriALL
    0U,	// TCRETURNriBTI
    6346372U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    167780389U,	// TRN1_PPP_B
    201343013U,	// TRN1_PPP_D
    2387107877U,	// TRN1_PPP_H
    268468261U,	// TRN1_PPP_S
    167780389U,	// TRN1_ZZZ_B
    201343013U,	// TRN1_ZZZ_D
    2387107877U,	// TRN1_ZZZ_H
    268468261U,	// TRN1_ZZZ_S
    68198437U,	// TRN1v16i8
    2216206373U,	// TRN1v2i32
    2216730661U,	// TRN1v2i64
    69771301U,	// TRN1v4i16
    70295589U,	// TRN1v4i32
    2218303525U,	// TRN1v8i16
    2218827813U,	// TRN1v8i8
    167780753U,	// TRN2_PPP_B
    201343377U,	// TRN2_PPP_D
    2387108241U,	// TRN2_PPP_H
    268468625U,	// TRN2_PPP_S
    167780753U,	// TRN2_ZZZ_B
    201343377U,	// TRN2_ZZZ_D
    2387108241U,	// TRN2_ZZZ_H
    268468625U,	// TRN2_ZZZ_S
    68198801U,	// TRN2v16i8
    2216206737U,	// TRN2v2i32
    2216731025U,	// TRN2v2i64
    69771665U,	// TRN2v4i16
    70295953U,	// TRN2v4i32
    2218303889U,	// TRN2v8i16
    2218828177U,	// TRN2v8i8
    116362U,	// TSB
    137945251U,	// UABALv16i8_v8i16
    2283859161U,	// UABALv2i32_v2i64
    137424089U,	// UABALv4i16_v4i32
    136372387U,	// UABALv4i32_v2i64
    2284904611U,	// UABALv8i16_v4i32
    2285432025U,	// UABALv8i8_v8i16
    135324291U,	// UABAv16i8
    2283332227U,	// UABAv2i32
    136897155U,	// UABAv4i16
    137421443U,	// UABAv4i32
    2285429379U,	// UABAv8i16
    2285953667U,	// UABAv8i8
    70820069U,	// UABDLv16i8_v8i16
    2216734090U,	// UABDLv2i32_v2i64
    70299018U,	// UABDLv4i16_v4i32
    69247205U,	// UABDLv4i32_v2i64
    2217779429U,	// UABDLv8i16_v4i32
    2218306954U,	// UABDLv8i8_v8i16
    302000064U,	// UABD_ZPmZ_B
    302008256U,	// UABD_ZPmZ_D
    2186307520U,	// UABD_ZPmZ_H
    302024640U,	// UABD_ZPmZ_S
    68200384U,	// UABDv16i8
    2216208320U,	// UABDv2i32
    69773248U,	// UABDv4i16
    70297536U,	// UABDv4i32
    2218305472U,	// UABDv8i16
    2218829760U,	// UABDv8i8
    137949235U,	// UADALPv16i8_v8i16
    162066483U,	// UADALPv2i32_v1i64
    135852083U,	// UADALPv4i16_v2i32
    2283860019U,	// UADALPv4i32_v2i64
    137424947U,	// UADALPv8i16_v4i32
    2284384307U,	// UADALPv8i8_v4i16
    70824003U,	// UADDLPv16i8_v8i16
    94941251U,	// UADDLPv2i32_v1i64
    68726851U,	// UADDLPv4i16_v2i32
    2216734787U,	// UADDLPv4i32_v2i64
    70299715U,	// UADDLPv8i16_v4i32
    2217259075U,	// UADDLPv8i8_v4i16
    67163184U,	// UADDLVv16i8v
    67163184U,	// UADDLVv4i16v
    2214646832U,	// UADDLVv4i32v
    67163184U,	// UADDLVv8i16v
    2214646832U,	// UADDLVv8i8v
    70820085U,	// UADDLv16i8_v8i16
    2216734128U,	// UADDLv2i32_v2i64
    70299056U,	// UADDLv4i16_v4i32
    69247221U,	// UADDLv4i32_v2i64
    2217779445U,	// UADDLv8i16_v4i32
    2218306992U,	// UADDLv8i8_v8i16
    302044152U,	// UADDV_VPZ_B
    302044152U,	// UADDV_VPZ_D
    302044152U,	// UADDV_VPZ_H
    302044152U,	// UADDV_VPZ_S
    2218304006U,	// UADDWv16i8_v8i16
    2216736041U,	// UADDWv2i32_v2i64
    70300969U,	// UADDWv4i16_v4i32
    2216731142U,	// UADDWv4i32_v2i64
    70296070U,	// UADDWv8i16_v4i32
    2218308905U,	// UADDWv8i8_v8i16
    100716261U,	// UBFMWri
    100716261U,	// UBFMXri
    100714785U,	// UCVTFSWDri
    100714785U,	// UCVTFSWHri
    100714785U,	// UCVTFSWSri
    100714785U,	// UCVTFSXDri
    100714785U,	// UCVTFSXHri
    100714785U,	// UCVTFSXSri
    2248198433U,	// UCVTFUWDri
    2248198433U,	// UCVTFUWHri
    2248198433U,	// UCVTFUWSri
    2248198433U,	// UCVTFUXDri
    2248198433U,	// UCVTFUXHri
    2248198433U,	// UCVTFUXSri
    18721U,	// UCVTF_ZPmZ_DtoD
    2181589281U,	// UCVTF_ZPmZ_DtoH
    35105U,	// UCVTF_ZPmZ_DtoS
    2181589281U,	// UCVTF_ZPmZ_HtoH
    18721U,	// UCVTF_ZPmZ_StoD
    2181589281U,	// UCVTF_ZPmZ_StoH
    35105U,	// UCVTF_ZPmZ_StoS
    100714785U,	// UCVTFd
    100714785U,	// UCVTFh
    100714785U,	// UCVTFs
    2248198433U,	// UCVTFv1i16
    2248198433U,	// UCVTFv1i32
    2248198433U,	// UCVTFv1i64
    68725025U,	// UCVTFv2f32
    2216732961U,	// UCVTFv2f64
    2216208673U,	// UCVTFv2i32_shift
    2216732961U,	// UCVTFv2i64_shift
    69773601U,	// UCVTFv4f16
    2217781537U,	// UCVTFv4f32
    69773601U,	// UCVTFv4i16_shift
    70297889U,	// UCVTFv4i32_shift
    70822177U,	// UCVTFv8f16
    2218305825U,	// UCVTFv8i16_shift
    6342922U,	// UDF
    302010875U,	// UDIVR_ZPmZ_D
    302027259U,	// UDIVR_ZPmZ_S
    100717602U,	// UDIVWr
    100717602U,	// UDIVXr
    302011426U,	// UDIV_ZPmZ_D
    302027810U,	// UDIV_ZPmZ_S
    3422573444U,	// UDOT_ZZZI_D
    3456144260U,	// UDOT_ZZZI_S
    3422573444U,	// UDOT_ZZZ_D
    3456144260U,	// UDOT_ZZZ_S
    137425796U,	// UDOTlanev16i8
    2283336580U,	// UDOTlanev8i8
    137425796U,	// UDOTv16i8
    2283336580U,	// UDOTv8i8
    68200472U,	// UHADDv16i8
    2216208408U,	// UHADDv2i32
    69773336U,	// UHADDv4i16
    70297624U,	// UHADDv4i32
    2218305560U,	// UHADDv8i16
    2218829848U,	// UHADDv8i8
    68200126U,	// UHSUBv16i8
    2216208062U,	// UHSUBv2i32
    69772990U,	// UHSUBv4i16
    70297278U,	// UHSUBv4i32
    2218305214U,	// UHSUBv8i16
    2218829502U,	// UHSUBv8i8
    100715937U,	// UMADDLrrr
    68202698U,	// UMAXPv16i8
    2216210634U,	// UMAXPv2i32
    69775562U,	// UMAXPv4i16
    70299850U,	// UMAXPv4i32
    2218307786U,	// UMAXPv8i16
    2218832074U,	// UMAXPv8i8
    302044300U,	// UMAXV_VPZ_B
    302044300U,	// UMAXV_VPZ_D
    302044300U,	// UMAXV_VPZ_H
    302044300U,	// UMAXV_VPZ_S
    67163276U,	// UMAXVv16i8v
    67163276U,	// UMAXVv4i16v
    2214646924U,	// UMAXVv4i32v
    67163276U,	// UMAXVv8i16v
    2214646924U,	// UMAXVv8i8v
    167785944U,	// UMAX_ZI_B
    201348568U,	// UMAX_ZI_D
    239629784U,	// UMAX_ZI_H
    268473816U,	// UMAX_ZI_S
    302003672U,	// UMAX_ZPmZ_B
    302011864U,	// UMAX_ZPmZ_D
    2186311128U,	// UMAX_ZPmZ_H
    302028248U,	// UMAX_ZPmZ_S
    68203992U,	// UMAXv16i8
    2216211928U,	// UMAXv2i32
    69776856U,	// UMAXv4i16
    70301144U,	// UMAXv4i32
    2218309080U,	// UMAXv8i16
    2218833368U,	// UMAXv8i8
    68202622U,	// UMINPv16i8
    2216210558U,	// UMINPv2i32
    69775486U,	// UMINPv4i16
    70299774U,	// UMINPv4i32
    2218307710U,	// UMINPv8i16
    2218831998U,	// UMINPv8i8
    302044248U,	// UMINV_VPZ_B
    302044248U,	// UMINV_VPZ_D
    302044248U,	// UMINV_VPZ_H
    302044248U,	// UMINV_VPZ_S
    67163224U,	// UMINVv16i8v
    67163224U,	// UMINVv4i16v
    2214646872U,	// UMINVv4i32v
    67163224U,	// UMINVv8i16v
    2214646872U,	// UMINVv8i8v
    167784246U,	// UMIN_ZI_B
    201346870U,	// UMIN_ZI_D
    239628086U,	// UMIN_ZI_H
    268472118U,	// UMIN_ZI_S
    302001974U,	// UMIN_ZPmZ_B
    302010166U,	// UMIN_ZPmZ_D
    2186309430U,	// UMIN_ZPmZ_H
    302026550U,	// UMIN_ZPmZ_S
    68202294U,	// UMINv16i8
    2216210230U,	// UMINv2i32
    69775158U,	// UMINv4i16
    70299446U,	// UMINv4i32
    2218307382U,	// UMINv8i16
    2218831670U,	// UMINv8i8
    137945285U,	// UMLALv16i8_v8i16
    2283859200U,	// UMLALv2i32_indexed
    2283859200U,	// UMLALv2i32_v2i64
    137424128U,	// UMLALv4i16_indexed
    137424128U,	// UMLALv4i16_v4i32
    136372421U,	// UMLALv4i32_indexed
    136372421U,	// UMLALv4i32_v2i64
    2284904645U,	// UMLALv8i16_indexed
    2284904645U,	// UMLALv8i16_v4i32
    2285432064U,	// UMLALv8i8_v8i16
    137945417U,	// UMLSLv16i8_v8i16
    2283859586U,	// UMLSLv2i32_indexed
    2283859586U,	// UMLSLv2i32_v2i64
    137424514U,	// UMLSLv4i16_indexed
    137424514U,	// UMLSLv4i16_v4i32
    136372553U,	// UMLSLv4i32_indexed
    136372553U,	// UMLSLv4i32_v2i64
    2284904777U,	// UMLSLv8i16_indexed
    2284904777U,	// UMLSLv8i16_v4i32
    2285432450U,	// UMLSLv8i8_v8i16
    67163250U,	// UMOVvi16
    2214646898U,	// UMOVvi32
    67163250U,	// UMOVvi64
    2214646898U,	// UMOVvi8
    100715885U,	// UMSUBLrrr
    302000930U,	// UMULH_ZPmZ_B
    302009122U,	// UMULH_ZPmZ_D
    2186308386U,	// UMULH_ZPmZ_H
    302025506U,	// UMULH_ZPmZ_S
    100715298U,	// UMULHrr
    70820135U,	// UMULLv16i8_v8i16
    2216734243U,	// UMULLv2i32_indexed
    2216734243U,	// UMULLv2i32_v2i64
    70299171U,	// UMULLv4i16_indexed
    70299171U,	// UMULLv4i16_v4i32
    69247271U,	// UMULLv4i32_indexed
    69247271U,	// UMULLv4i32_v2i64
    2217779495U,	// UMULLv8i16_indexed
    2217779495U,	// UMULLv8i16_v4i32
    2218307107U,	// UMULLv8i8_v8i16
    167782455U,	// UQADD_ZI_B
    201345079U,	// UQADD_ZI_D
    239626295U,	// UQADD_ZI_H
    268470327U,	// UQADD_ZI_S
    167782455U,	// UQADD_ZZZ_B
    201345079U,	// UQADD_ZZZ_D
    2387109943U,	// UQADD_ZZZ_H
    268470327U,	// UQADD_ZZZ_S
    68200503U,	// UQADDv16i8
    100714551U,	// UQADDv1i16
    100714551U,	// UQADDv1i32
    100714551U,	// UQADDv1i64
    100714551U,	// UQADDv1i8
    2216208439U,	// UQADDv2i32
    2216732727U,	// UQADDv2i64
    69773367U,	// UQADDv4i16
    70297655U,	// UQADDv4i32
    2218305591U,	// UQADDv8i16
    2218829879U,	// UQADDv8i8
    536921189U,	// UQDECB_WPiI
    536921189U,	// UQDECB_XPiI
    536922069U,	// UQDECD_WPiI
    536922069U,	// UQDECD_XPiI
    536889301U,	// UQDECD_ZPiI
    536922680U,	// UQDECH_WPiI
    536922680U,	// UQDECH_XPiI
    6842936U,	// UQDECH_ZPiI
    2315309057U,	// UQDECP_WP_B
    2348863489U,	// UQDECP_WP_D
    2717962241U,	// UQDECP_WP_H
    2415972353U,	// UQDECP_WP_S
    2315309057U,	// UQDECP_XP_B
    2348863489U,	// UQDECP_XP_D
    2717962241U,	// UQDECP_XP_H
    2415972353U,	// UQDECP_XP_S
    2147504129U,	// UQDECP_ZP_D
    604532737U,	// UQDECP_ZP_H
    2147520513U,	// UQDECP_ZP_S
    536925450U,	// UQDECW_WPiI
    536925450U,	// UQDECW_XPiI
    536909066U,	// UQDECW_ZPiI
    536921205U,	// UQINCB_WPiI
    536921205U,	// UQINCB_XPiI
    536922085U,	// UQINCD_WPiI
    536922085U,	// UQINCD_XPiI
    536889317U,	// UQINCD_ZPiI
    536922696U,	// UQINCH_WPiI
    536922696U,	// UQINCH_XPiI
    6842952U,	// UQINCH_ZPiI
    2315309073U,	// UQINCP_WP_B
    2348863505U,	// UQINCP_WP_D
    2717962257U,	// UQINCP_WP_H
    2415972369U,	// UQINCP_WP_S
    2315309073U,	// UQINCP_XP_B
    2348863505U,	// UQINCP_XP_D
    2717962257U,	// UQINCP_XP_H
    2415972369U,	// UQINCP_XP_S
    2147504145U,	// UQINCP_ZP_D
    604532753U,	// UQINCP_ZP_H
    2147520529U,	// UQINCP_ZP_S
    536925466U,	// UQINCW_WPiI
    536925466U,	// UQINCW_XPiI
    536909082U,	// UQINCW_ZPiI
    68201948U,	// UQRSHLv16i8
    100715996U,	// UQRSHLv1i16
    100715996U,	// UQRSHLv1i32
    100715996U,	// UQRSHLv1i64
    100715996U,	// UQRSHLv1i8
    2216209884U,	// UQRSHLv2i32
    2216734172U,	// UQRSHLv2i64
    69774812U,	// UQRSHLv4i16
    70299100U,	// UQRSHLv4i32
    2218307036U,	// UQRSHLv8i16
    2218831324U,	// UQRSHLv8i8
    100716390U,	// UQRSHRNb
    100716390U,	// UQRSHRNh
    100716390U,	// UQRSHRNs
    2282807687U,	// UQRSHRNv16i8_shift
    2216210278U,	// UQRSHRNv2i32_shift
    69775206U,	// UQRSHRNv4i16_shift
    2284904839U,	// UQRSHRNv4i32_shift
    137945479U,	// UQRSHRNv8i16_shift
    2218831718U,	// UQRSHRNv8i8_shift
    100715981U,	// UQSHLb
    100715981U,	// UQSHLd
    100715981U,	// UQSHLh
    100715981U,	// UQSHLs
    68201933U,	// UQSHLv16i8
    68201933U,	// UQSHLv16i8_shift
    100715981U,	// UQSHLv1i16
    100715981U,	// UQSHLv1i32
    100715981U,	// UQSHLv1i64
    100715981U,	// UQSHLv1i8
    2216209869U,	// UQSHLv2i32
    2216209869U,	// UQSHLv2i32_shift
    2216734157U,	// UQSHLv2i64
    2216734157U,	// UQSHLv2i64_shift
    69774797U,	// UQSHLv4i16
    69774797U,	// UQSHLv4i16_shift
    70299085U,	// UQSHLv4i32
    70299085U,	// UQSHLv4i32_shift
    2218307021U,	// UQSHLv8i16
    2218307021U,	// UQSHLv8i16_shift
    2218831309U,	// UQSHLv8i8
    2218831309U,	// UQSHLv8i8_shift
    100716373U,	// UQSHRNb
    100716373U,	// UQSHRNh
    100716373U,	// UQSHRNs
    2282807668U,	// UQSHRNv16i8_shift
    2216210261U,	// UQSHRNv2i32_shift
    69775189U,	// UQSHRNv4i16_shift
    2284904820U,	// UQSHRNv4i32_shift
    137945460U,	// UQSHRNv8i16_shift
    2218831701U,	// UQSHRNv8i8_shift
    167782107U,	// UQSUB_ZI_B
    201344731U,	// UQSUB_ZI_D
    239625947U,	// UQSUB_ZI_H
    268469979U,	// UQSUB_ZI_S
    167782107U,	// UQSUB_ZZZ_B
    201344731U,	// UQSUB_ZZZ_D
    2387109595U,	// UQSUB_ZZZ_H
    268469979U,	// UQSUB_ZZZ_S
    68200155U,	// UQSUBv16i8
    100714203U,	// UQSUBv1i16
    100714203U,	// UQSUBv1i32
    100714203U,	// UQSUBv1i64
    100714203U,	// UQSUBv1i8
    2216208091U,	// UQSUBv2i32
    2216732379U,	// UQSUBv2i64
    69773019U,	// UQSUBv4i16
    70297307U,	// UQSUBv4i32
    2218305243U,	// UQSUBv8i16
    2218829531U,	// UQSUBv8i8
    135324071U,	// UQXTNv16i8
    2248200074U,	// UQXTNv1i16
    2248200074U,	// UQXTNv1i32
    2248200074U,	// UQXTNv1i8
    2216210314U,	// UQXTNv2i32
    2217258890U,	// UQXTNv4i16
    2284904871U,	// UQXTNv4i32
    2285429159U,	// UQXTNv8i16
    71348106U,	// UQXTNv8i8
    68724940U,	// URECPEv2i32
    2217781452U,	// URECPEv4i32
    68200457U,	// URHADDv16i8
    2216208393U,	// URHADDv2i32
    69773321U,	// URHADDv4i16
    70297609U,	// URHADDv4i32
    2218305545U,	// URHADDv8i16
    2218829833U,	// URHADDv8i8
    68201963U,	// URSHLv16i8
    100716011U,	// URSHLv1i64
    2216209899U,	// URSHLv2i32
    2216734187U,	// URSHLv2i64
    69774827U,	// URSHLv4i16
    70299115U,	// URSHLv4i32
    2218307051U,	// URSHLv8i16
    2218831339U,	// URSHLv8i8
    100716875U,	// URSHRd
    68202827U,	// URSHRv16i8_shift
    2216210763U,	// URSHRv2i32_shift
    2216735051U,	// URSHRv2i64_shift
    69775691U,	// URSHRv4i16_shift
    70299979U,	// URSHRv4i32_shift
    2218307915U,	// URSHRv8i16_shift
    2218832203U,	// URSHRv8i8_shift
    68724986U,	// URSQRTEv2i32
    2217781498U,	// URSQRTEv4i32
    369189657U,	// URSRAd
    135324441U,	// URSRAv16i8_shift
    2283332377U,	// URSRAv2i32_shift
    2283856665U,	// URSRAv2i64_shift
    136897305U,	// URSRAv4i16_shift
    137421593U,	// URSRAv4i32_shift
    2285429529U,	// URSRAv8i16_shift
    2285953817U,	// URSRAv8i8_shift
    70820101U,	// USHLLv16i8_shift
    2216734213U,	// USHLLv2i32_shift
    70299141U,	// USHLLv4i16_shift
    69247237U,	// USHLLv4i32_shift
    2217779461U,	// USHLLv8i16_shift
    2218307077U,	// USHLLv8i8_shift
    68201976U,	// USHLv16i8
    100716024U,	// USHLv1i64
    2216209912U,	// USHLv2i32
    2216734200U,	// USHLv2i64
    69774840U,	// USHLv4i16
    70299128U,	// USHLv4i32
    2218307064U,	// USHLv8i16
    2218831352U,	// USHLv8i8
    100716888U,	// USHRd
    68202840U,	// USHRv16i8_shift
    2216210776U,	// USHRv2i32_shift
    2216735064U,	// USHRv2i64_shift
    69775704U,	// USHRv4i16_shift
    70299992U,	// USHRv4i32_shift
    2218307928U,	// USHRv8i16_shift
    2218832216U,	// USHRv8i8_shift
    135325742U,	// USQADDv16i8
    2516674606U,	// USQADDv1i16
    2516674606U,	// USQADDv1i32
    2516674606U,	// USQADDv1i64
    2516674606U,	// USQADDv1i8
    135850030U,	// USQADDv2i32
    2283857966U,	// USQADDv2i64
    136898606U,	// USQADDv4i16
    2284906542U,	// USQADDv4i32
    137947182U,	// USQADDv8i16
    2285955118U,	// USQADDv8i8
    369189670U,	// USRAd
    135324454U,	// USRAv16i8_shift
    2283332390U,	// USRAv2i32_shift
    2283856678U,	// USRAv2i64_shift
    136897318U,	// USRAv4i16_shift
    137421606U,	// USRAv4i32_shift
    2285429542U,	// USRAv8i16_shift
    2285953830U,	// USRAv8i8_shift
    70820053U,	// USUBLv16i8_v8i16
    2216734076U,	// USUBLv2i32_v2i64
    70299004U,	// USUBLv4i16_v4i32
    69247189U,	// USUBLv4i32_v2i64
    2217779413U,	// USUBLv8i16_v4i32
    2218306940U,	// USUBLv8i8_v8i16
    2218303990U,	// USUBWv16i8_v8i16
    2216735986U,	// USUBWv2i32_v2i64
    70300914U,	// USUBWv4i16_v4i32
    2216731126U,	// USUBWv4i32_v2i64
    70296054U,	// USUBWv8i16_v4i32
    2218308850U,	// USUBWv8i8_v8i16
    2415938702U,	// UUNPKHI_ZZ_D
    27290766U,	// UUNPKHI_ZZ_H
    2717944974U,	// UUNPKHI_ZZ_S
    2415939541U,	// UUNPKLO_ZZ_D
    27291605U,	// UUNPKLO_ZZ_H
    2717945813U,	// UUNPKLO_ZZ_S
    18091U,	// UXTB_ZPmZ_D
    2181588651U,	// UXTB_ZPmZ_H
    34475U,	// UXTB_ZPmZ_S
    19543U,	// UXTH_ZPmZ_D
    35927U,	// UXTH_ZPmZ_S
    21914U,	// UXTW_ZPmZ_D
    167780401U,	// UZP1_PPP_B
    201343025U,	// UZP1_PPP_D
    2387107889U,	// UZP1_PPP_H
    268468273U,	// UZP1_PPP_S
    167780401U,	// UZP1_ZZZ_B
    201343025U,	// UZP1_ZZZ_D
    2387107889U,	// UZP1_ZZZ_H
    268468273U,	// UZP1_ZZZ_S
    68198449U,	// UZP1v16i8
    2216206385U,	// UZP1v2i32
    2216730673U,	// UZP1v2i64
    69771313U,	// UZP1v4i16
    70295601U,	// UZP1v4i32
    2218303537U,	// UZP1v8i16
    2218827825U,	// UZP1v8i8
    167780828U,	// UZP2_PPP_B
    201343452U,	// UZP2_PPP_D
    2387108316U,	// UZP2_PPP_H
    268468700U,	// UZP2_PPP_S
    167780828U,	// UZP2_ZZZ_B
    201343452U,	// UZP2_ZZZ_D
    2387108316U,	// UZP2_ZZZ_H
    268468700U,	// UZP2_ZZZ_S
    68198876U,	// UZP2v16i8
    2216206812U,	// UZP2v2i32
    2216731100U,	// UZP2v2i64
    69771740U,	// UZP2v4i16
    70296028U,	// UZP2v4i32
    2218303964U,	// UZP2v8i16
    2218828252U,	// UZP2v8i8
    100673686U,	// WHILELE_PWW_B
    100681878U,	// WHILELE_PWW_D
    242772118U,	// WHILELE_PWW_H
    100698262U,	// WHILELE_PWW_S
    100673686U,	// WHILELE_PXX_B
    100681878U,	// WHILELE_PXX_D
    242772118U,	// WHILELE_PXX_H
    100698262U,	// WHILELE_PXX_S
    100675514U,	// WHILELO_PWW_B
    100683706U,	// WHILELO_PWW_D
    242773946U,	// WHILELO_PWW_H
    100700090U,	// WHILELO_PWW_S
    100675514U,	// WHILELO_PXX_B
    100683706U,	// WHILELO_PXX_D
    242773946U,	// WHILELO_PXX_H
    100700090U,	// WHILELO_PXX_S
    100676243U,	// WHILELS_PWW_B
    100684435U,	// WHILELS_PWW_D
    242774675U,	// WHILELS_PWW_H
    100700819U,	// WHILELS_PWW_S
    100676243U,	// WHILELS_PXX_B
    100684435U,	// WHILELS_PXX_D
    242774675U,	// WHILELS_PXX_H
    100700819U,	// WHILELS_PXX_S
    100676439U,	// WHILELT_PWW_B
    100684631U,	// WHILELT_PWW_D
    242774871U,	// WHILELT_PWW_H
    100701015U,	// WHILELT_PWW_S
    100676439U,	// WHILELT_PXX_B
    100684631U,	// WHILELT_PXX_D
    242774871U,	// WHILELT_PXX_H
    100701015U,	// WHILELT_PXX_S
    6304061U,	// WRFFR
    6069U,	// XAFLAG
    2216735008U,	// XAR
    6342598U,	// XPACD
    6343797U,	// XPACI
    6083U,	// XPACLRI
    135324065U,	// XTNv16i8
    2216210309U,	// XTNv2i32
    2217258885U,	// XTNv4i16
    2284904865U,	// XTNv4i32
    2285429153U,	// XTNv8i16
    71348101U,	// XTNv8i8
    167780395U,	// ZIP1_PPP_B
    201343019U,	// ZIP1_PPP_D
    2387107883U,	// ZIP1_PPP_H
    268468267U,	// ZIP1_PPP_S
    167780395U,	// ZIP1_ZZZ_B
    201343019U,	// ZIP1_ZZZ_D
    2387107883U,	// ZIP1_ZZZ_H
    268468267U,	// ZIP1_ZZZ_S
    68198443U,	// ZIP1v16i8
    2216206379U,	// ZIP1v2i32
    2216730667U,	// ZIP1v2i64
    69771307U,	// ZIP1v4i16
    70295595U,	// ZIP1v4i32
    2218303531U,	// ZIP1v8i16
    2218827819U,	// ZIP1v8i8
    167780822U,	// ZIP2_PPP_B
    201343446U,	// ZIP2_PPP_D
    2387108310U,	// ZIP2_PPP_H
    268468694U,	// ZIP2_PPP_S
    167780822U,	// ZIP2_ZZZ_B
    201343446U,	// ZIP2_ZZZ_D
    2387108310U,	// ZIP2_ZZZ_H
    268468694U,	// ZIP2_ZZZ_S
    68198870U,	// ZIP2v16i8
    2216206806U,	// ZIP2v2i32
    2216731094U,	// ZIP2v2i64
    69771734U,	// ZIP2v4i16
    70296022U,	// ZIP2v4i32
    2218303958U,	// ZIP2v8i16
    2218828246U,	// ZIP2v8i8
    302003102U,	// anonymous_1359
  };

  static const uint32_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_FCEIL
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// CATCHRET
    0U,	// CLEANUPRET
    0U,	// SEH_AddFP
    0U,	// SEH_EpilogEnd
    0U,	// SEH_EpilogStart
    0U,	// SEH_Nop
    0U,	// SEH_PrologEnd
    0U,	// SEH_SaveFPLR
    0U,	// SEH_SaveFPLR_X
    0U,	// SEH_SaveFReg
    0U,	// SEH_SaveFRegP
    0U,	// SEH_SaveFRegP_X
    0U,	// SEH_SaveFReg_X
    0U,	// SEH_SaveReg
    0U,	// SEH_SaveRegP
    0U,	// SEH_SaveRegP_X
    0U,	// SEH_SaveReg_X
    0U,	// SEH_SetFP
    0U,	// SEH_StackAlloc
    0U,	// ABS_ZPmZ_B
    64U,	// ABS_ZPmZ_D
    128U,	// ABS_ZPmZ_H
    192U,	// ABS_ZPmZ_S
    1U,	// ABSv16i8
    1U,	// ABSv1i64
    2U,	// ABSv2i32
    2U,	// ABSv2i64
    3U,	// ABSv4i16
    3U,	// ABSv4i32
    4U,	// ABSv8i16
    4U,	// ABSv8i8
    261U,	// ADCSWr
    261U,	// ADCSXr
    261U,	// ADCWr
    261U,	// ADCXr
    8517U,	// ADDG
    16773U,	// ADDHNv2i64_v2i32
    16837U,	// ADDHNv2i64_v4i32
    24966U,	// ADDHNv4i32_v4i16
    25030U,	// ADDHNv4i32_v8i16
    33222U,	// ADDHNv8i16_v16i8
    33158U,	// ADDHNv8i16_v8i8
    261U,	// ADDPL_XXI
    41351U,	// ADDPv16i8
    49543U,	// ADDPv2i32
    16773U,	// ADDPv2i64
    2U,	// ADDPv2i64p
    57736U,	// ADDPv4i16
    24966U,	// ADDPv4i32
    33158U,	// ADDPv8i16
    65928U,	// ADDPv8i8
    517U,	// ADDSWri
    0U,	// ADDSWrr
    581U,	// ADDSWrs
    645U,	// ADDSWrx
    517U,	// ADDSXri
    0U,	// ADDSXrr
    581U,	// ADDSXrs
    645U,	// ADDSXrx
    73989U,	// ADDSXrx64
    261U,	// ADDVL_XXI
    1U,	// ADDVv16i8v
    3U,	// ADDVv4i16v
    3U,	// ADDVv4i32v
    4U,	// ADDVv8i16v
    4U,	// ADDVv8i8v
    517U,	// ADDWri
    0U,	// ADDWrr
    581U,	// ADDWrs
    645U,	// ADDWrx
    517U,	// ADDXri
    0U,	// ADDXrr
    581U,	// ADDXrs
    645U,	// ADDXrx
    73989U,	// ADDXrx64
    709U,	// ADD_ZI_B
    773U,	// ADD_ZI_D
    9U,	// ADD_ZI_H
    837U,	// ADD_ZI_S
    533376U,	// ADD_ZPmZ_B
    1057728U,	// ADD_ZPmZ_D
    1655817U,	// ADD_ZPmZ_H
    2106432U,	// ADD_ZPmZ_S
    901U,	// ADD_ZZZ_B
    965U,	// ADD_ZZZ_D
    137U,	// ADD_ZZZ_H
    1093U,	// ADD_ZZZ_S
    0U,	// ADDlowTLS
    41351U,	// ADDv16i8
    261U,	// ADDv1i64
    49543U,	// ADDv2i32
    16773U,	// ADDv2i64
    57736U,	// ADDv4i16
    24966U,	// ADDv4i32
    33158U,	// ADDv8i16
    65928U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    1U,	// ADR
    0U,	// ADRP
    1157U,	// ADR_LSL_ZZZ_D_0
    1221U,	// ADR_LSL_ZZZ_D_1
    1285U,	// ADR_LSL_ZZZ_D_2
    1349U,	// ADR_LSL_ZZZ_D_3
    1413U,	// ADR_LSL_ZZZ_S_0
    1477U,	// ADR_LSL_ZZZ_S_1
    1541U,	// ADR_LSL_ZZZ_S_2
    1605U,	// ADR_LSL_ZZZ_S_3
    1669U,	// ADR_SXTW_ZZZ_D_0
    1733U,	// ADR_SXTW_ZZZ_D_1
    1797U,	// ADR_SXTW_ZZZ_D_2
    1861U,	// ADR_SXTW_ZZZ_D_3
    1925U,	// ADR_UXTW_ZZZ_D_0
    1989U,	// ADR_UXTW_ZZZ_D_1
    2053U,	// ADR_UXTW_ZZZ_D_2
    2117U,	// ADR_UXTW_ZZZ_D_3
    1U,	// AESDrr
    1U,	// AESErr
    1U,	// AESIMCrr
    0U,	// AESIMCrrTied
    1U,	// AESMCrr
    0U,	// AESMCrrTied
    2181U,	// ANDSWri
    0U,	// ANDSWrr
    581U,	// ANDSWrs
    2245U,	// ANDSXri
    0U,	// ANDSXrr
    581U,	// ANDSXrs
    533386U,	// ANDS_PPzPP
    901U,	// ANDV_VPZ_B
    965U,	// ANDV_VPZ_D
    2309U,	// ANDV_VPZ_H
    1093U,	// ANDV_VPZ_S
    2181U,	// ANDWri
    0U,	// ANDWrr
    581U,	// ANDWrs
    2245U,	// ANDXri
    0U,	// ANDXrr
    581U,	// ANDXrs
    533386U,	// AND_PPzPP
    2245U,	// AND_ZI
    533376U,	// AND_ZPmZ_B
    1057728U,	// AND_ZPmZ_D
    1655817U,	// AND_ZPmZ_H
    2106432U,	// AND_ZPmZ_S
    965U,	// AND_ZZZ
    41351U,	// ANDv16i8
    65928U,	// ANDv8i8
    9088U,	// ASRD_ZPmI_B
    9152U,	// ASRD_ZPmI_D
    91145U,	// ASRD_ZPmI_H
    9280U,	// ASRD_ZPmI_S
    533376U,	// ASRR_ZPmZ_B
    1057728U,	// ASRR_ZPmZ_D
    1655817U,	// ASRR_ZPmZ_H
    2106432U,	// ASRR_ZPmZ_S
    261U,	// ASRVWr
    261U,	// ASRVXr
    1057664U,	// ASR_WIDE_ZPmZ_B
    99337U,	// ASR_WIDE_ZPmZ_H
    1057856U,	// ASR_WIDE_ZPmZ_S
    965U,	// ASR_WIDE_ZZZ_B
    10U,	// ASR_WIDE_ZZZ_H
    965U,	// ASR_WIDE_ZZZ_S
    9088U,	// ASR_ZPmI_B
    9152U,	// ASR_ZPmI_D
    91145U,	// ASR_ZPmI_H
    9280U,	// ASR_ZPmI_S
    533376U,	// ASR_ZPmZ_B
    1057728U,	// ASR_ZPmZ_D
    1655817U,	// ASR_ZPmZ_H
    2106432U,	// ASR_ZPmZ_S
    261U,	// ASR_ZZI_B
    261U,	// ASR_ZZI_D
    11U,	// ASR_ZZI_H
    261U,	// ASR_ZZI_S
    1U,	// AUTDA
    1U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    1U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    1U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// AXFLAG
    0U,	// B
    36282759U,	// BCAX
    3156293U,	// BFMWri
    3156293U,	// BFMXri
    0U,	// BICSWrr
    581U,	// BICSWrs
    0U,	// BICSXrr
    581U,	// BICSXrs
    533386U,	// BICS_PPzPP
    0U,	// BICWrr
    581U,	// BICWrs
    0U,	// BICXrr
    581U,	// BICXrs
    533386U,	// BIC_PPzPP
    533376U,	// BIC_ZPmZ_B
    1057728U,	// BIC_ZPmZ_D
    1655817U,	// BIC_ZPmZ_H
    2106432U,	// BIC_ZPmZ_S
    965U,	// BIC_ZZZ
    41351U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    65928U,	// BICv8i8
    41351U,	// BIFv16i8
    65928U,	// BIFv8i8
    41415U,	// BITv16i8
    65992U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    1U,	// BLRAA
    0U,	// BLRAAZ
    1U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    1U,	// BRAA
    0U,	// BRAAZ
    1U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    906U,	// BRKAS_PPzP
    0U,	// BRKA_PPmP
    906U,	// BRKA_PPzP
    906U,	// BRKBS_PPzP
    0U,	// BRKB_PPmP
    906U,	// BRKB_PPzP
    533386U,	// BRKNS_PPzP
    533386U,	// BRKN_PPzP
    533386U,	// BRKPAS_PPzPP
    533386U,	// BRKPA_PPzPP
    533386U,	// BRKPBS_PPzPP
    533386U,	// BRKPB_PPzPP
    41415U,	// BSLv16i8
    65992U,	// BSLv8i8
    0U,	// Bcc
    117067U,	// CASAB
    117067U,	// CASAH
    117067U,	// CASALB
    117067U,	// CASALH
    117067U,	// CASALW
    117067U,	// CASALX
    117067U,	// CASAW
    117067U,	// CASAX
    117067U,	// CASB
    117067U,	// CASH
    117067U,	// CASLB
    117067U,	// CASLH
    117067U,	// CASLW
    117067U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    117067U,	// CASW
    117067U,	// CASX
    0U,	// CATCHPAD
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    3678469U,	// CCMNWi
    3678469U,	// CCMNWr
    3678469U,	// CCMNXi
    3678469U,	// CCMNXr
    3678469U,	// CCMPWi
    3678469U,	// CCMPWr
    3678469U,	// CCMPXi
    3678469U,	// CCMPXr
    0U,	// CFINV
    532741U,	// CLASTA_RPZ_B
    1057029U,	// CLASTA_RPZ_D
    4202757U,	// CLASTA_RPZ_H
    2105605U,	// CLASTA_RPZ_S
    532741U,	// CLASTA_VPZ_B
    1057029U,	// CLASTA_VPZ_D
    4202757U,	// CLASTA_VPZ_H
    2105605U,	// CLASTA_VPZ_S
    533381U,	// CLASTA_ZPZ_B
    1057733U,	// CLASTA_ZPZ_D
    1655817U,	// CLASTA_ZPZ_H
    2106437U,	// CLASTA_ZPZ_S
    532741U,	// CLASTB_RPZ_B
    1057029U,	// CLASTB_RPZ_D
    4202757U,	// CLASTB_RPZ_H
    2105605U,	// CLASTB_RPZ_S
    532741U,	// CLASTB_VPZ_B
    1057029U,	// CLASTB_VPZ_D
    4202757U,	// CLASTB_VPZ_H
    2105605U,	// CLASTB_VPZ_S
    533381U,	// CLASTB_ZPZ_B
    1057733U,	// CLASTB_ZPZ_D
    1655817U,	// CLASTB_ZPZ_H
    2106437U,	// CLASTB_ZPZ_S
    0U,	// CLREX
    1U,	// CLSWr
    1U,	// CLSXr
    0U,	// CLS_ZPmZ_B
    64U,	// CLS_ZPmZ_D
    128U,	// CLS_ZPmZ_H
    192U,	// CLS_ZPmZ_S
    1U,	// CLSv16i8
    2U,	// CLSv2i32
    3U,	// CLSv4i16
    3U,	// CLSv4i32
    4U,	// CLSv8i16
    4U,	// CLSv8i8
    1U,	// CLZWr
    1U,	// CLZXr
    0U,	// CLZ_ZPmZ_B
    64U,	// CLZ_ZPmZ_D
    128U,	// CLZ_ZPmZ_H
    192U,	// CLZ_ZPmZ_S
    1U,	// CLZv16i8
    2U,	// CLZv2i32
    3U,	// CLZv4i16
    3U,	// CLZv4i32
    4U,	// CLZv8i16
    4U,	// CLZv8i8
    41351U,	// CMEQv16i8
    12U,	// CMEQv16i8rz
    261U,	// CMEQv1i64
    12U,	// CMEQv1i64rz
    49543U,	// CMEQv2i32
    13U,	// CMEQv2i32rz
    16773U,	// CMEQv2i64
    13U,	// CMEQv2i64rz
    57736U,	// CMEQv4i16
    14U,	// CMEQv4i16rz
    24966U,	// CMEQv4i32
    14U,	// CMEQv4i32rz
    33158U,	// CMEQv8i16
    15U,	// CMEQv8i16rz
    65928U,	// CMEQv8i8
    15U,	// CMEQv8i8rz
    41351U,	// CMGEv16i8
    12U,	// CMGEv16i8rz
    261U,	// CMGEv1i64
    12U,	// CMGEv1i64rz
    49543U,	// CMGEv2i32
    13U,	// CMGEv2i32rz
    16773U,	// CMGEv2i64
    13U,	// CMGEv2i64rz
    57736U,	// CMGEv4i16
    14U,	// CMGEv4i16rz
    24966U,	// CMGEv4i32
    14U,	// CMGEv4i32rz
    33158U,	// CMGEv8i16
    15U,	// CMGEv8i16rz
    65928U,	// CMGEv8i8
    15U,	// CMGEv8i8rz
    41351U,	// CMGTv16i8
    12U,	// CMGTv16i8rz
    261U,	// CMGTv1i64
    12U,	// CMGTv1i64rz
    49543U,	// CMGTv2i32
    13U,	// CMGTv2i32rz
    16773U,	// CMGTv2i64
    13U,	// CMGTv2i64rz
    57736U,	// CMGTv4i16
    14U,	// CMGTv4i16rz
    24966U,	// CMGTv4i32
    14U,	// CMGTv4i32rz
    33158U,	// CMGTv8i16
    15U,	// CMGTv8i16rz
    65928U,	// CMGTv8i8
    15U,	// CMGTv8i8rz
    41351U,	// CMHIv16i8
    261U,	// CMHIv1i64
    49543U,	// CMHIv2i32
    16773U,	// CMHIv2i64
    57736U,	// CMHIv4i16
    24966U,	// CMHIv4i32
    33158U,	// CMHIv8i16
    65928U,	// CMHIv8i8
    41351U,	// CMHSv16i8
    261U,	// CMHSv1i64
    49543U,	// CMHSv2i32
    16773U,	// CMHSv2i64
    57736U,	// CMHSv4i16
    24966U,	// CMHSv4i32
    33158U,	// CMHSv8i16
    65928U,	// CMHSv8i8
    12U,	// CMLEv16i8rz
    12U,	// CMLEv1i64rz
    13U,	// CMLEv2i32rz
    13U,	// CMLEv2i64rz
    14U,	// CMLEv4i16rz
    14U,	// CMLEv4i32rz
    15U,	// CMLEv8i16rz
    15U,	// CMLEv8i8rz
    12U,	// CMLTv16i8rz
    12U,	// CMLTv1i64rz
    13U,	// CMLTv2i32rz
    13U,	// CMLTv2i64rz
    14U,	// CMLTv4i16rz
    14U,	// CMLTv4i32rz
    15U,	// CMLTv8i16rz
    15U,	// CMLTv8i8rz
    9098U,	// CMPEQ_PPzZI_B
    9162U,	// CMPEQ_PPzZI_D
    91145U,	// CMPEQ_PPzZI_H
    9290U,	// CMPEQ_PPzZI_S
    533386U,	// CMPEQ_PPzZZ_B
    1057738U,	// CMPEQ_PPzZZ_D
    1655817U,	// CMPEQ_PPzZZ_H
    2106442U,	// CMPEQ_PPzZZ_S
    1057674U,	// CMPEQ_WIDE_PPzZZ_B
    99337U,	// CMPEQ_WIDE_PPzZZ_H
    1057866U,	// CMPEQ_WIDE_PPzZZ_S
    9098U,	// CMPGE_PPzZI_B
    9162U,	// CMPGE_PPzZI_D
    91145U,	// CMPGE_PPzZI_H
    9290U,	// CMPGE_PPzZI_S
    533386U,	// CMPGE_PPzZZ_B
    1057738U,	// CMPGE_PPzZZ_D
    1655817U,	// CMPGE_PPzZZ_H
    2106442U,	// CMPGE_PPzZZ_S
    1057674U,	// CMPGE_WIDE_PPzZZ_B
    99337U,	// CMPGE_WIDE_PPzZZ_H
    1057866U,	// CMPGE_WIDE_PPzZZ_S
    9098U,	// CMPGT_PPzZI_B
    9162U,	// CMPGT_PPzZI_D
    91145U,	// CMPGT_PPzZI_H
    9290U,	// CMPGT_PPzZI_S
    533386U,	// CMPGT_PPzZZ_B
    1057738U,	// CMPGT_PPzZZ_D
    1655817U,	// CMPGT_PPzZZ_H
    2106442U,	// CMPGT_PPzZZ_S
    1057674U,	// CMPGT_WIDE_PPzZZ_B
    99337U,	// CMPGT_WIDE_PPzZZ_H
    1057866U,	// CMPGT_WIDE_PPzZZ_S
    4727690U,	// CMPHI_PPzZI_B
    4727754U,	// CMPHI_PPzZI_D
    123913U,	// CMPHI_PPzZI_H
    4727882U,	// CMPHI_PPzZI_S
    533386U,	// CMPHI_PPzZZ_B
    1057738U,	// CMPHI_PPzZZ_D
    1655817U,	// CMPHI_PPzZZ_H
    2106442U,	// CMPHI_PPzZZ_S
    1057674U,	// CMPHI_WIDE_PPzZZ_B
    99337U,	// CMPHI_WIDE_PPzZZ_H
    1057866U,	// CMPHI_WIDE_PPzZZ_S
    4727690U,	// CMPHS_PPzZI_B
    4727754U,	// CMPHS_PPzZI_D
    123913U,	// CMPHS_PPzZI_H
    4727882U,	// CMPHS_PPzZI_S
    533386U,	// CMPHS_PPzZZ_B
    1057738U,	// CMPHS_PPzZZ_D
    1655817U,	// CMPHS_PPzZZ_H
    2106442U,	// CMPHS_PPzZZ_S
    1057674U,	// CMPHS_WIDE_PPzZZ_B
    99337U,	// CMPHS_WIDE_PPzZZ_H
    1057866U,	// CMPHS_WIDE_PPzZZ_S
    9098U,	// CMPLE_PPzZI_B
    9162U,	// CMPLE_PPzZI_D
    91145U,	// CMPLE_PPzZI_H
    9290U,	// CMPLE_PPzZI_S
    1057674U,	// CMPLE_WIDE_PPzZZ_B
    99337U,	// CMPLE_WIDE_PPzZZ_H
    1057866U,	// CMPLE_WIDE_PPzZZ_S
    4727690U,	// CMPLO_PPzZI_B
    4727754U,	// CMPLO_PPzZI_D
    123913U,	// CMPLO_PPzZI_H
    4727882U,	// CMPLO_PPzZI_S
    1057674U,	// CMPLO_WIDE_PPzZZ_B
    99337U,	// CMPLO_WIDE_PPzZZ_H
    1057866U,	// CMPLO_WIDE_PPzZZ_S
    4727690U,	// CMPLS_PPzZI_B
    4727754U,	// CMPLS_PPzZI_D
    123913U,	// CMPLS_PPzZI_H
    4727882U,	// CMPLS_PPzZI_S
    1057674U,	// CMPLS_WIDE_PPzZZ_B
    99337U,	// CMPLS_WIDE_PPzZZ_H
    1057866U,	// CMPLS_WIDE_PPzZZ_S
    9098U,	// CMPLT_PPzZI_B
    9162U,	// CMPLT_PPzZI_D
    91145U,	// CMPLT_PPzZI_H
    9290U,	// CMPLT_PPzZI_S
    1057674U,	// CMPLT_WIDE_PPzZZ_B
    99337U,	// CMPLT_WIDE_PPzZZ_H
    1057866U,	// CMPLT_WIDE_PPzZZ_S
    9098U,	// CMPNE_PPzZI_B
    9162U,	// CMPNE_PPzZI_D
    91145U,	// CMPNE_PPzZI_H
    9290U,	// CMPNE_PPzZI_S
    533386U,	// CMPNE_PPzZZ_B
    1057738U,	// CMPNE_PPzZZ_D
    1655817U,	// CMPNE_PPzZZ_H
    2106442U,	// CMPNE_PPzZZ_S
    1057674U,	// CMPNE_WIDE_PPzZZ_B
    99337U,	// CMPNE_WIDE_PPzZZ_H
    1057866U,	// CMPNE_WIDE_PPzZZ_S
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    41351U,	// CMTSTv16i8
    261U,	// CMTSTv1i64
    49543U,	// CMTSTv2i32
    16773U,	// CMTSTv2i64
    57736U,	// CMTSTv4i16
    24966U,	// CMTSTv4i32
    33158U,	// CMTSTv8i16
    65928U,	// CMTSTv8i8
    0U,	// CNOT_ZPmZ_B
    64U,	// CNOT_ZPmZ_D
    128U,	// CNOT_ZPmZ_H
    192U,	// CNOT_ZPmZ_S
    16U,	// CNTB_XPiI
    16U,	// CNTD_XPiI
    16U,	// CNTH_XPiI
    901U,	// CNTP_XPP_B
    965U,	// CNTP_XPP_D
    2309U,	// CNTP_XPP_H
    1093U,	// CNTP_XPP_S
    16U,	// CNTW_XPiI
    0U,	// CNT_ZPmZ_B
    64U,	// CNT_ZPmZ_D
    128U,	// CNT_ZPmZ_H
    192U,	// CNT_ZPmZ_S
    1U,	// CNTv16i8
    4U,	// CNTv8i8
    965U,	// COMPACT_ZPZ_D
    1093U,	// COMPACT_ZPZ_S
    2432U,	// CPY_ZPmI_B
    2496U,	// CPY_ZPmI_D
    16U,	// CPY_ZPmI_H
    2560U,	// CPY_ZPmI_S
    2368U,	// CPY_ZPmR_B
    2368U,	// CPY_ZPmR_D
    145U,	// CPY_ZPmR_H
    2368U,	// CPY_ZPmR_S
    2368U,	// CPY_ZPmV_B
    2368U,	// CPY_ZPmV_D
    145U,	// CPY_ZPmV_H
    2368U,	// CPY_ZPmV_S
    2634U,	// CPY_ZPzI_B
    2698U,	// CPY_ZPzI_D
    17U,	// CPY_ZPzI_H
    2762U,	// CPY_ZPzI_S
    2834U,	// CPYi16
    2834U,	// CPYi32
    2835U,	// CPYi64
    2835U,	// CPYi8
    261U,	// CRC32Brr
    261U,	// CRC32CBrr
    261U,	// CRC32CHrr
    261U,	// CRC32CWrr
    261U,	// CRC32CXrr
    261U,	// CRC32Hrr
    261U,	// CRC32Wrr
    261U,	// CRC32Xrr
    3678469U,	// CSELWr
    3678469U,	// CSELXr
    3678469U,	// CSINCWr
    3678469U,	// CSINCXr
    3678469U,	// CSINVWr
    3678469U,	// CSINVXr
    3678469U,	// CSNEGWr
    3678469U,	// CSNEGXr
    1U,	// CTERMEQ_WW
    1U,	// CTERMEQ_XX
    1U,	// CTERMNE_WW
    1U,	// CTERMNE_XX
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DECB_XPiI
    0U,	// DECD_XPiI
    0U,	// DECD_ZPiI
    0U,	// DECH_XPiI
    0U,	// DECH_ZPiI
    1U,	// DECP_XP_B
    1U,	// DECP_XP_D
    1U,	// DECP_XP_H
    1U,	// DECP_XP_S
    1U,	// DECP_ZP_D
    0U,	// DECP_ZP_H
    1U,	// DECP_ZP_S
    0U,	// DECW_XPiI
    0U,	// DECW_ZPiI
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPM_ZI
    0U,	// DUP_ZI_B
    0U,	// DUP_ZI_D
    0U,	// DUP_ZI_H
    0U,	// DUP_ZI_S
    1U,	// DUP_ZR_B
    1U,	// DUP_ZR_D
    0U,	// DUP_ZR_H
    1U,	// DUP_ZR_S
    20U,	// DUP_ZZI_B
    20U,	// DUP_ZZI_D
    0U,	// DUP_ZZI_H
    0U,	// DUP_ZZI_Q
    20U,	// DUP_ZZI_S
    1U,	// DUPv16i8gpr
    2835U,	// DUPv16i8lane
    1U,	// DUPv2i32gpr
    2834U,	// DUPv2i32lane
    1U,	// DUPv2i64gpr
    2835U,	// DUPv2i64lane
    1U,	// DUPv4i16gpr
    2834U,	// DUPv4i16lane
    1U,	// DUPv4i32gpr
    2834U,	// DUPv4i32lane
    1U,	// DUPv8i16gpr
    2834U,	// DUPv8i16lane
    1U,	// DUPv8i8gpr
    2835U,	// DUPv8i8lane
    0U,	// EMITBKEY
    0U,	// EONWrr
    581U,	// EONWrs
    0U,	// EONXrr
    581U,	// EONXrs
    36282759U,	// EOR3
    533386U,	// EORS_PPzPP
    901U,	// EORV_VPZ_B
    965U,	// EORV_VPZ_D
    2309U,	// EORV_VPZ_H
    1093U,	// EORV_VPZ_S
    2181U,	// EORWri
    0U,	// EORWrr
    581U,	// EORWrs
    2245U,	// EORXri
    0U,	// EORXrr
    581U,	// EORXrs
    533386U,	// EOR_PPzPP
    2245U,	// EOR_ZI
    533376U,	// EOR_ZPmZ_B
    1057728U,	// EOR_ZPmZ_D
    1655817U,	// EOR_ZPmZ_H
    2106432U,	// EOR_ZPmZ_S
    965U,	// EOR_ZZZ
    41351U,	// EORv16i8
    65928U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    8453U,	// EXTRWrri
    8453U,	// EXTRXrri
    4727685U,	// EXT_ZZI
    106887U,	// EXTv16i8
    131464U,	// EXTv8i8
    0U,	// F128CSEL
    261U,	// FABD16
    261U,	// FABD32
    261U,	// FABD64
    1057728U,	// FABD_ZPmZ_D
    1655817U,	// FABD_ZPmZ_H
    2106432U,	// FABD_ZPmZ_S
    49543U,	// FABDv2f32
    16773U,	// FABDv2f64
    57736U,	// FABDv4f16
    24966U,	// FABDv4f32
    33158U,	// FABDv8f16
    1U,	// FABSDr
    1U,	// FABSHr
    1U,	// FABSSr
    64U,	// FABS_ZPmZ_D
    128U,	// FABS_ZPmZ_H
    192U,	// FABS_ZPmZ_S
    2U,	// FABSv2f32
    2U,	// FABSv2f64
    3U,	// FABSv4f16
    3U,	// FABSv4f32
    4U,	// FABSv8f16
    261U,	// FACGE16
    261U,	// FACGE32
    261U,	// FACGE64
    1057738U,	// FACGE_PPzZZ_D
    1655817U,	// FACGE_PPzZZ_H
    2106442U,	// FACGE_PPzZZ_S
    49543U,	// FACGEv2f32
    16773U,	// FACGEv2f64
    57736U,	// FACGEv4f16
    24966U,	// FACGEv4f32
    33158U,	// FACGEv8f16
    261U,	// FACGT16
    261U,	// FACGT32
    261U,	// FACGT64
    1057738U,	// FACGT_PPzZZ_D
    1655817U,	// FACGT_PPzZZ_H
    2106442U,	// FACGT_PPzZZ_S
    49543U,	// FACGTv2f32
    16773U,	// FACGTv2f64
    57736U,	// FACGTv4f16
    24966U,	// FACGTv4f32
    33158U,	// FACGTv8f16
    1057029U,	// FADDA_VPZ_D
    4202757U,	// FADDA_VPZ_H
    2105605U,	// FADDA_VPZ_S
    261U,	// FADDDrr
    261U,	// FADDHrr
    49543U,	// FADDPv2f32
    16773U,	// FADDPv2f64
    20U,	// FADDPv2i16p
    2U,	// FADDPv2i32p
    2U,	// FADDPv2i64p
    57736U,	// FADDPv4f16
    24966U,	// FADDPv4f32
    33158U,	// FADDPv8f16
    261U,	// FADDSrr
    965U,	// FADDV_VPZ_D
    2309U,	// FADDV_VPZ_H
    1093U,	// FADDV_VPZ_S
    5252032U,	// FADD_ZPmI_D
    140297U,	// FADD_ZPmI_H
    5252160U,	// FADD_ZPmI_S
    1057728U,	// FADD_ZPmZ_D
    1655817U,	// FADD_ZPmZ_H
    2106432U,	// FADD_ZPmZ_S
    965U,	// FADD_ZZZ_D
    137U,	// FADD_ZZZ_H
    1093U,	// FADD_ZZZ_S
    49543U,	// FADDv2f32
    16773U,	// FADDv2f64
    57736U,	// FADDv4f16
    24966U,	// FADDv4f32
    33158U,	// FADDv8f16
    68166592U,	// FCADD_ZPmZ_D
    106513417U,	// FCADD_ZPmZ_H
    69215296U,	// FCADD_ZPmZ_S
    6439303U,	// FCADDv2f32
    6447493U,	// FCADDv2f64
    6455688U,	// FCADDv4f16
    6463878U,	// FCADDv4f32
    6472070U,	// FCADDv8f16
    3678469U,	// FCCMPDrr
    3678469U,	// FCCMPEDrr
    3678469U,	// FCCMPEHrr
    3678469U,	// FCCMPESrr
    3678469U,	// FCCMPHrr
    3678469U,	// FCCMPSrr
    261U,	// FCMEQ16
    261U,	// FCMEQ32
    261U,	// FCMEQ64
    189386U,	// FCMEQ_PPzZ0_D
    2889U,	// FCMEQ_PPzZ0_H
    189514U,	// FCMEQ_PPzZ0_S
    1057738U,	// FCMEQ_PPzZZ_D
    1655817U,	// FCMEQ_PPzZZ_H
    2106442U,	// FCMEQ_PPzZZ_S
    21U,	// FCMEQv1i16rz
    21U,	// FCMEQv1i32rz
    21U,	// FCMEQv1i64rz
    49543U,	// FCMEQv2f32
    16773U,	// FCMEQv2f64
    21U,	// FCMEQv2i32rz
    22U,	// FCMEQv2i64rz
    57736U,	// FCMEQv4f16
    24966U,	// FCMEQv4f32
    22U,	// FCMEQv4i16rz
    23U,	// FCMEQv4i32rz
    33158U,	// FCMEQv8f16
    23U,	// FCMEQv8i16rz
    261U,	// FCMGE16
    261U,	// FCMGE32
    261U,	// FCMGE64
    189386U,	// FCMGE_PPzZ0_D
    2889U,	// FCMGE_PPzZ0_H
    189514U,	// FCMGE_PPzZ0_S
    1057738U,	// FCMGE_PPzZZ_D
    1655817U,	// FCMGE_PPzZZ_H
    2106442U,	// FCMGE_PPzZZ_S
    21U,	// FCMGEv1i16rz
    21U,	// FCMGEv1i32rz
    21U,	// FCMGEv1i64rz
    49543U,	// FCMGEv2f32
    16773U,	// FCMGEv2f64
    21U,	// FCMGEv2i32rz
    22U,	// FCMGEv2i64rz
    57736U,	// FCMGEv4f16
    24966U,	// FCMGEv4f32
    22U,	// FCMGEv4i16rz
    23U,	// FCMGEv4i32rz
    33158U,	// FCMGEv8f16
    23U,	// FCMGEv8i16rz
    261U,	// FCMGT16
    261U,	// FCMGT32
    261U,	// FCMGT64
    189386U,	// FCMGT_PPzZ0_D
    2889U,	// FCMGT_PPzZ0_H
    189514U,	// FCMGT_PPzZ0_S
    1057738U,	// FCMGT_PPzZZ_D
    1655817U,	// FCMGT_PPzZZ_H
    2106442U,	// FCMGT_PPzZZ_S
    21U,	// FCMGTv1i16rz
    21U,	// FCMGTv1i32rz
    21U,	// FCMGTv1i64rz
    49543U,	// FCMGTv2f32
    16773U,	// FCMGTv2f64
    21U,	// FCMGTv2i32rz
    22U,	// FCMGTv2i64rz
    57736U,	// FCMGTv4f16
    24966U,	// FCMGTv4f32
    22U,	// FCMGTv4i16rz
    23U,	// FCMGTv4i32rz
    33158U,	// FCMGTv8f16
    23U,	// FCMGTv8i16rz
    342368320U,	// FCMLA_ZPmZZ_D
    140182528U,	// FCMLA_ZPmZZ_H
    342892736U,	// FCMLA_ZPmZZ_S
    24U,	// FCMLA_ZZZI_H
    7875480U,	// FCMLA_ZZZI_S
    8536519U,	// FCMLAv2f32
    8544709U,	// FCMLAv2f64
    8552904U,	// FCMLAv4f16
    344662472U,	// FCMLAv4f16_indexed
    8561094U,	// FCMLAv4f32
    344670662U,	// FCMLAv4f32_indexed
    8569286U,	// FCMLAv8f16
    344662470U,	// FCMLAv8f16_indexed
    189386U,	// FCMLE_PPzZ0_D
    2889U,	// FCMLE_PPzZ0_H
    189514U,	// FCMLE_PPzZ0_S
    21U,	// FCMLEv1i16rz
    21U,	// FCMLEv1i32rz
    21U,	// FCMLEv1i64rz
    21U,	// FCMLEv2i32rz
    22U,	// FCMLEv2i64rz
    22U,	// FCMLEv4i16rz
    23U,	// FCMLEv4i32rz
    23U,	// FCMLEv8i16rz
    189386U,	// FCMLT_PPzZ0_D
    2889U,	// FCMLT_PPzZ0_H
    189514U,	// FCMLT_PPzZ0_S
    21U,	// FCMLTv1i16rz
    21U,	// FCMLTv1i32rz
    21U,	// FCMLTv1i64rz
    21U,	// FCMLTv2i32rz
    22U,	// FCMLTv2i64rz
    22U,	// FCMLTv4i16rz
    23U,	// FCMLTv4i32rz
    23U,	// FCMLTv8i16rz
    189386U,	// FCMNE_PPzZ0_D
    2889U,	// FCMNE_PPzZ0_H
    189514U,	// FCMNE_PPzZ0_S
    1057738U,	// FCMNE_PPzZZ_D
    1655817U,	// FCMNE_PPzZZ_H
    2106442U,	// FCMNE_PPzZZ_S
    0U,	// FCMPDri
    1U,	// FCMPDrr
    0U,	// FCMPEDri
    1U,	// FCMPEDrr
    0U,	// FCMPEHri
    1U,	// FCMPEHrr
    0U,	// FCMPESri
    1U,	// FCMPESrr
    0U,	// FCMPHri
    1U,	// FCMPHrr
    0U,	// FCMPSri
    1U,	// FCMPSrr
    1057738U,	// FCMUO_PPzZZ_D
    1655817U,	// FCMUO_PPzZZ_H
    2106442U,	// FCMUO_PPzZZ_S
    3008U,	// FCPY_ZPmI_D
    25U,	// FCPY_ZPmI_H
    3008U,	// FCPY_ZPmI_S
    3678469U,	// FCSELDrrr
    3678469U,	// FCSELHrrr
    3678469U,	// FCSELSrrr
    1U,	// FCVTASUWDr
    1U,	// FCVTASUWHr
    1U,	// FCVTASUWSr
    1U,	// FCVTASUXDr
    1U,	// FCVTASUXHr
    1U,	// FCVTASUXSr
    1U,	// FCVTASv1f16
    1U,	// FCVTASv1i32
    1U,	// FCVTASv1i64
    2U,	// FCVTASv2f32
    2U,	// FCVTASv2f64
    3U,	// FCVTASv4f16
    3U,	// FCVTASv4f32
    4U,	// FCVTASv8f16
    1U,	// FCVTAUUWDr
    1U,	// FCVTAUUWHr
    1U,	// FCVTAUUWSr
    1U,	// FCVTAUUXDr
    1U,	// FCVTAUUXHr
    1U,	// FCVTAUUXSr
    1U,	// FCVTAUv1f16
    1U,	// FCVTAUv1i32
    1U,	// FCVTAUv1i64
    2U,	// FCVTAUv2f32
    2U,	// FCVTAUv2f64
    3U,	// FCVTAUv4f16
    3U,	// FCVTAUv4f32
    4U,	// FCVTAUv8f16
    1U,	// FCVTDHr
    1U,	// FCVTDSr
    1U,	// FCVTHDr
    1U,	// FCVTHSr
    2U,	// FCVTLv2i32
    3U,	// FCVTLv4i16
    3U,	// FCVTLv4i32
    4U,	// FCVTLv8i16
    1U,	// FCVTMSUWDr
    1U,	// FCVTMSUWHr
    1U,	// FCVTMSUWSr
    1U,	// FCVTMSUXDr
    1U,	// FCVTMSUXHr
    1U,	// FCVTMSUXSr
    1U,	// FCVTMSv1f16
    1U,	// FCVTMSv1i32
    1U,	// FCVTMSv1i64
    2U,	// FCVTMSv2f32
    2U,	// FCVTMSv2f64
    3U,	// FCVTMSv4f16
    3U,	// FCVTMSv4f32
    4U,	// FCVTMSv8f16
    1U,	// FCVTMUUWDr
    1U,	// FCVTMUUWHr
    1U,	// FCVTMUUWSr
    1U,	// FCVTMUUXDr
    1U,	// FCVTMUUXHr
    1U,	// FCVTMUUXSr
    1U,	// FCVTMUv1f16
    1U,	// FCVTMUv1i32
    1U,	// FCVTMUv1i64
    2U,	// FCVTMUv2f32
    2U,	// FCVTMUv2f64
    3U,	// FCVTMUv4f16
    3U,	// FCVTMUv4f32
    4U,	// FCVTMUv8f16
    1U,	// FCVTNSUWDr
    1U,	// FCVTNSUWHr
    1U,	// FCVTNSUWSr
    1U,	// FCVTNSUXDr
    1U,	// FCVTNSUXHr
    1U,	// FCVTNSUXSr
    1U,	// FCVTNSv1f16
    1U,	// FCVTNSv1i32
    1U,	// FCVTNSv1i64
    2U,	// FCVTNSv2f32
    2U,	// FCVTNSv2f64
    3U,	// FCVTNSv4f16
    3U,	// FCVTNSv4f32
    4U,	// FCVTNSv8f16
    1U,	// FCVTNUUWDr
    1U,	// FCVTNUUWHr
    1U,	// FCVTNUUWSr
    1U,	// FCVTNUUXDr
    1U,	// FCVTNUUXHr
    1U,	// FCVTNUUXSr
    1U,	// FCVTNUv1f16
    1U,	// FCVTNUv1i32
    1U,	// FCVTNUv1i64
    2U,	// FCVTNUv2f32
    2U,	// FCVTNUv2f64
    3U,	// FCVTNUv4f16
    3U,	// FCVTNUv4f32
    4U,	// FCVTNUv8f16
    2U,	// FCVTNv2i32
    3U,	// FCVTNv4i16
    2U,	// FCVTNv4i32
    3U,	// FCVTNv8i16
    1U,	// FCVTPSUWDr
    1U,	// FCVTPSUWHr
    1U,	// FCVTPSUWSr
    1U,	// FCVTPSUXDr
    1U,	// FCVTPSUXHr
    1U,	// FCVTPSUXSr
    1U,	// FCVTPSv1f16
    1U,	// FCVTPSv1i32
    1U,	// FCVTPSv1i64
    2U,	// FCVTPSv2f32
    2U,	// FCVTPSv2f64
    3U,	// FCVTPSv4f16
    3U,	// FCVTPSv4f32
    4U,	// FCVTPSv8f16
    1U,	// FCVTPUUWDr
    1U,	// FCVTPUUWHr
    1U,	// FCVTPUUWSr
    1U,	// FCVTPUUXDr
    1U,	// FCVTPUUXHr
    1U,	// FCVTPUUXSr
    1U,	// FCVTPUv1f16
    1U,	// FCVTPUv1i32
    1U,	// FCVTPUv1i64
    2U,	// FCVTPUv2f32
    2U,	// FCVTPUv2f64
    3U,	// FCVTPUv4f16
    3U,	// FCVTPUv4f32
    4U,	// FCVTPUv8f16
    1U,	// FCVTSDr
    1U,	// FCVTSHr
    1U,	// FCVTXNv1i64
    2U,	// FCVTXNv2f32
    2U,	// FCVTXNv4f32
    261U,	// FCVTZSSWDri
    261U,	// FCVTZSSWHri
    261U,	// FCVTZSSWSri
    261U,	// FCVTZSSXDri
    261U,	// FCVTZSSXHri
    261U,	// FCVTZSSXSri
    1U,	// FCVTZSUWDr
    1U,	// FCVTZSUWHr
    1U,	// FCVTZSUWSr
    1U,	// FCVTZSUXDr
    1U,	// FCVTZSUXHr
    1U,	// FCVTZSUXSr
    64U,	// FCVTZS_ZPmZ_DtoD
    64U,	// FCVTZS_ZPmZ_DtoS
    3072U,	// FCVTZS_ZPmZ_HtoD
    128U,	// FCVTZS_ZPmZ_HtoH
    3072U,	// FCVTZS_ZPmZ_HtoS
    192U,	// FCVTZS_ZPmZ_StoD
    192U,	// FCVTZS_ZPmZ_StoS
    261U,	// FCVTZSd
    261U,	// FCVTZSh
    261U,	// FCVTZSs
    1U,	// FCVTZSv1f16
    1U,	// FCVTZSv1i32
    1U,	// FCVTZSv1i64
    2U,	// FCVTZSv2f32
    2U,	// FCVTZSv2f64
    263U,	// FCVTZSv2i32_shift
    261U,	// FCVTZSv2i64_shift
    3U,	// FCVTZSv4f16
    3U,	// FCVTZSv4f32
    264U,	// FCVTZSv4i16_shift
    262U,	// FCVTZSv4i32_shift
    4U,	// FCVTZSv8f16
    262U,	// FCVTZSv8i16_shift
    261U,	// FCVTZUSWDri
    261U,	// FCVTZUSWHri
    261U,	// FCVTZUSWSri
    261U,	// FCVTZUSXDri
    261U,	// FCVTZUSXHri
    261U,	// FCVTZUSXSri
    1U,	// FCVTZUUWDr
    1U,	// FCVTZUUWHr
    1U,	// FCVTZUUWSr
    1U,	// FCVTZUUXDr
    1U,	// FCVTZUUXHr
    1U,	// FCVTZUUXSr
    64U,	// FCVTZU_ZPmZ_DtoD
    64U,	// FCVTZU_ZPmZ_DtoS
    3072U,	// FCVTZU_ZPmZ_HtoD
    128U,	// FCVTZU_ZPmZ_HtoH
    3072U,	// FCVTZU_ZPmZ_HtoS
    192U,	// FCVTZU_ZPmZ_StoD
    192U,	// FCVTZU_ZPmZ_StoS
    261U,	// FCVTZUd
    261U,	// FCVTZUh
    261U,	// FCVTZUs
    1U,	// FCVTZUv1f16
    1U,	// FCVTZUv1i32
    1U,	// FCVTZUv1i64
    2U,	// FCVTZUv2f32
    2U,	// FCVTZUv2f64
    263U,	// FCVTZUv2i32_shift
    261U,	// FCVTZUv2i64_shift
    3U,	// FCVTZUv4f16
    3U,	// FCVTZUv4f32
    264U,	// FCVTZUv4i16_shift
    262U,	// FCVTZUv4i32_shift
    4U,	// FCVTZUv8f16
    262U,	// FCVTZUv8i16_shift
    153U,	// FCVT_ZPmZ_DtoH
    64U,	// FCVT_ZPmZ_DtoS
    3072U,	// FCVT_ZPmZ_HtoD
    3072U,	// FCVT_ZPmZ_HtoS
    192U,	// FCVT_ZPmZ_StoD
    152U,	// FCVT_ZPmZ_StoH
    261U,	// FDIVDrr
    261U,	// FDIVHrr
    1057728U,	// FDIVR_ZPmZ_D
    1655817U,	// FDIVR_ZPmZ_H
    2106432U,	// FDIVR_ZPmZ_S
    261U,	// FDIVSrr
    1057728U,	// FDIV_ZPmZ_D
    1655817U,	// FDIV_ZPmZ_H
    2106432U,	// FDIV_ZPmZ_S
    49543U,	// FDIVv2f32
    16773U,	// FDIVv2f64
    57736U,	// FDIVv4f16
    24966U,	// FDIVv4f32
    33158U,	// FDIVv8f16
    0U,	// FDUP_ZI_D
    0U,	// FDUP_ZI_H
    0U,	// FDUP_ZI_S
    1U,	// FEXPA_ZZ_D
    0U,	// FEXPA_ZZ_H
    1U,	// FEXPA_ZZ_S
    1U,	// FJCVTZS
    8453U,	// FMADDDrrr
    8453U,	// FMADDHrrr
    8453U,	// FMADDSrrr
    6824000U,	// FMAD_ZPmZZ_D
    1770496U,	// FMAD_ZPmZZ_H
    7348416U,	// FMAD_ZPmZZ_S
    261U,	// FMAXDrr
    261U,	// FMAXHrr
    261U,	// FMAXNMDrr
    261U,	// FMAXNMHrr
    49543U,	// FMAXNMPv2f32
    16773U,	// FMAXNMPv2f64
    20U,	// FMAXNMPv2i16p
    2U,	// FMAXNMPv2i32p
    2U,	// FMAXNMPv2i64p
    57736U,	// FMAXNMPv4f16
    24966U,	// FMAXNMPv4f32
    33158U,	// FMAXNMPv8f16
    261U,	// FMAXNMSrr
    965U,	// FMAXNMV_VPZ_D
    2309U,	// FMAXNMV_VPZ_H
    1093U,	// FMAXNMV_VPZ_S
    3U,	// FMAXNMVv4i16v
    3U,	// FMAXNMVv4i32v
    4U,	// FMAXNMVv8i16v
    9446336U,	// FMAXNM_ZPmI_D
    222217U,	// FMAXNM_ZPmI_H
    9446464U,	// FMAXNM_ZPmI_S
    1057728U,	// FMAXNM_ZPmZ_D
    1655817U,	// FMAXNM_ZPmZ_H
    2106432U,	// FMAXNM_ZPmZ_S
    49543U,	// FMAXNMv2f32
    16773U,	// FMAXNMv2f64
    57736U,	// FMAXNMv4f16
    24966U,	// FMAXNMv4f32
    33158U,	// FMAXNMv8f16
    49543U,	// FMAXPv2f32
    16773U,	// FMAXPv2f64
    20U,	// FMAXPv2i16p
    2U,	// FMAXPv2i32p
    2U,	// FMAXPv2i64p
    57736U,	// FMAXPv4f16
    24966U,	// FMAXPv4f32
    33158U,	// FMAXPv8f16
    261U,	// FMAXSrr
    965U,	// FMAXV_VPZ_D
    2309U,	// FMAXV_VPZ_H
    1093U,	// FMAXV_VPZ_S
    3U,	// FMAXVv4i16v
    3U,	// FMAXVv4i32v
    4U,	// FMAXVv8i16v
    9446336U,	// FMAX_ZPmI_D
    222217U,	// FMAX_ZPmI_H
    9446464U,	// FMAX_ZPmI_S
    1057728U,	// FMAX_ZPmZ_D
    1655817U,	// FMAX_ZPmZ_H
    2106432U,	// FMAX_ZPmZ_S
    49543U,	// FMAXv2f32
    16773U,	// FMAXv2f64
    57736U,	// FMAXv4f16
    24966U,	// FMAXv4f32
    33158U,	// FMAXv8f16
    261U,	// FMINDrr
    261U,	// FMINHrr
    261U,	// FMINNMDrr
    261U,	// FMINNMHrr
    49543U,	// FMINNMPv2f32
    16773U,	// FMINNMPv2f64
    20U,	// FMINNMPv2i16p
    2U,	// FMINNMPv2i32p
    2U,	// FMINNMPv2i64p
    57736U,	// FMINNMPv4f16
    24966U,	// FMINNMPv4f32
    33158U,	// FMINNMPv8f16
    261U,	// FMINNMSrr
    965U,	// FMINNMV_VPZ_D
    2309U,	// FMINNMV_VPZ_H
    1093U,	// FMINNMV_VPZ_S
    3U,	// FMINNMVv4i16v
    3U,	// FMINNMVv4i32v
    4U,	// FMINNMVv8i16v
    9446336U,	// FMINNM_ZPmI_D
    222217U,	// FMINNM_ZPmI_H
    9446464U,	// FMINNM_ZPmI_S
    1057728U,	// FMINNM_ZPmZ_D
    1655817U,	// FMINNM_ZPmZ_H
    2106432U,	// FMINNM_ZPmZ_S
    49543U,	// FMINNMv2f32
    16773U,	// FMINNMv2f64
    57736U,	// FMINNMv4f16
    24966U,	// FMINNMv4f32
    33158U,	// FMINNMv8f16
    49543U,	// FMINPv2f32
    16773U,	// FMINPv2f64
    20U,	// FMINPv2i16p
    2U,	// FMINPv2i32p
    2U,	// FMINPv2i64p
    57736U,	// FMINPv4f16
    24966U,	// FMINPv4f32
    33158U,	// FMINPv8f16
    261U,	// FMINSrr
    965U,	// FMINV_VPZ_D
    2309U,	// FMINV_VPZ_H
    1093U,	// FMINV_VPZ_S
    3U,	// FMINVv4i16v
    3U,	// FMINVv4i32v
    4U,	// FMINVv8i16v
    9446336U,	// FMIN_ZPmI_D
    222217U,	// FMIN_ZPmI_H
    9446464U,	// FMIN_ZPmI_S
    1057728U,	// FMIN_ZPmZ_D
    1655817U,	// FMIN_ZPmZ_H
    2106432U,	// FMIN_ZPmZ_S
    49543U,	// FMINv2f32
    16773U,	// FMINv2f64
    57736U,	// FMINv4f16
    24966U,	// FMINv4f32
    33158U,	// FMINv8f16
    3162U,	// FMLAL2lanev4f16
    9118152U,	// FMLAL2lanev8f16
    3226U,	// FMLAL2v4f16
    57800U,	// FMLAL2v8f16
    3162U,	// FMLALlanev4f16
    9118152U,	// FMLALlanev8f16
    3226U,	// FMLALv4f16
    57800U,	// FMLALv8f16
    6824000U,	// FMLA_ZPmZZ_D
    1770496U,	// FMLA_ZPmZZ_H
    7348416U,	// FMLA_ZPmZZ_S
    2969U,	// FMLA_ZZZI_D
    0U,	// FMLA_ZZZI_H
    2968U,	// FMLA_ZZZI_S
    9118149U,	// FMLAv1i16_indexed
    9126341U,	// FMLAv1i32_indexed
    9142725U,	// FMLAv1i64_indexed
    49607U,	// FMLAv2f32
    16837U,	// FMLAv2f64
    9126343U,	// FMLAv2i32_indexed
    9142725U,	// FMLAv2i64_indexed
    57800U,	// FMLAv4f16
    25030U,	// FMLAv4f32
    9118152U,	// FMLAv4i16_indexed
    9126342U,	// FMLAv4i32_indexed
    33222U,	// FMLAv8f16
    9118150U,	// FMLAv8i16_indexed
    3162U,	// FMLSL2lanev4f16
    9118152U,	// FMLSL2lanev8f16
    3226U,	// FMLSL2v4f16
    57800U,	// FMLSL2v8f16
    3162U,	// FMLSLlanev4f16
    9118152U,	// FMLSLlanev8f16
    3226U,	// FMLSLv4f16
    57800U,	// FMLSLv8f16
    6824000U,	// FMLS_ZPmZZ_D
    1770496U,	// FMLS_ZPmZZ_H
    7348416U,	// FMLS_ZPmZZ_S
    2969U,	// FMLS_ZZZI_D
    0U,	// FMLS_ZZZI_H
    2968U,	// FMLS_ZZZI_S
    9118149U,	// FMLSv1i16_indexed
    9126341U,	// FMLSv1i32_indexed
    9142725U,	// FMLSv1i64_indexed
    49607U,	// FMLSv2f32
    16837U,	// FMLSv2f64
    9126343U,	// FMLSv2i32_indexed
    9142725U,	// FMLSv2i64_indexed
    57800U,	// FMLSv4f16
    25030U,	// FMLSv4f32
    9118152U,	// FMLSv4i16_indexed
    9126342U,	// FMLSv4i32_indexed
    33222U,	// FMLSv8f16
    9118150U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    2835U,	// FMOVDXHighr
    1U,	// FMOVDXr
    0U,	// FMOVDi
    1U,	// FMOVDr
    0U,	// FMOVH0
    1U,	// FMOVHWr
    1U,	// FMOVHXr
    0U,	// FMOVHi
    1U,	// FMOVHr
    0U,	// FMOVS0
    1U,	// FMOVSWr
    0U,	// FMOVSi
    1U,	// FMOVSr
    1U,	// FMOVWHr
    1U,	// FMOVWSr
    1U,	// FMOVXDHighr
    1U,	// FMOVXDr
    1U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    6824000U,	// FMSB_ZPmZZ_D
    1770496U,	// FMSB_ZPmZZ_H
    7348416U,	// FMSB_ZPmZZ_S
    8453U,	// FMSUBDrrr
    8453U,	// FMSUBHrrr
    8453U,	// FMSUBSrrr
    261U,	// FMULDrr
    261U,	// FMULHrr
    261U,	// FMULSrr
    261U,	// FMULX16
    261U,	// FMULX32
    261U,	// FMULX64
    1057728U,	// FMULX_ZPmZ_D
    1655817U,	// FMULX_ZPmZ_H
    2106432U,	// FMULX_ZPmZ_S
    10166661U,	// FMULXv1i16_indexed
    10174853U,	// FMULXv1i32_indexed
    10191237U,	// FMULXv1i64_indexed
    49543U,	// FMULXv2f32
    16773U,	// FMULXv2f64
    10174855U,	// FMULXv2i32_indexed
    10191237U,	// FMULXv2i64_indexed
    57736U,	// FMULXv4f16
    24966U,	// FMULXv4f32
    10166664U,	// FMULXv4i16_indexed
    10174854U,	// FMULXv4i32_indexed
    33158U,	// FMULXv8f16
    10166662U,	// FMULXv8i16_indexed
    10494912U,	// FMUL_ZPmI_D
    238601U,	// FMUL_ZPmI_H
    10495040U,	// FMUL_ZPmI_S
    1057728U,	// FMUL_ZPmZ_D
    1655817U,	// FMUL_ZPmZ_H
    2106432U,	// FMUL_ZPmZ_S
    246725U,	// FMUL_ZZZI_D
    3273U,	// FMUL_ZZZI_H
    246853U,	// FMUL_ZZZI_S
    965U,	// FMUL_ZZZ_D
    137U,	// FMUL_ZZZ_H
    1093U,	// FMUL_ZZZ_S
    10166661U,	// FMULv1i16_indexed
    10174853U,	// FMULv1i32_indexed
    10191237U,	// FMULv1i64_indexed
    49543U,	// FMULv2f32
    16773U,	// FMULv2f64
    10174855U,	// FMULv2i32_indexed
    10191237U,	// FMULv2i64_indexed
    57736U,	// FMULv4f16
    24966U,	// FMULv4f32
    10166664U,	// FMULv4i16_indexed
    10174854U,	// FMULv4i32_indexed
    33158U,	// FMULv8f16
    10166662U,	// FMULv8i16_indexed
    1U,	// FNEGDr
    1U,	// FNEGHr
    1U,	// FNEGSr
    64U,	// FNEG_ZPmZ_D
    128U,	// FNEG_ZPmZ_H
    192U,	// FNEG_ZPmZ_S
    2U,	// FNEGv2f32
    2U,	// FNEGv2f64
    3U,	// FNEGv4f16
    3U,	// FNEGv4f32
    4U,	// FNEGv8f16
    8453U,	// FNMADDDrrr
    8453U,	// FNMADDHrrr
    8453U,	// FNMADDSrrr
    6824000U,	// FNMAD_ZPmZZ_D
    1770496U,	// FNMAD_ZPmZZ_H
    7348416U,	// FNMAD_ZPmZZ_S
    6824000U,	// FNMLA_ZPmZZ_D
    1770496U,	// FNMLA_ZPmZZ_H
    7348416U,	// FNMLA_ZPmZZ_S
    6824000U,	// FNMLS_ZPmZZ_D
    1770496U,	// FNMLS_ZPmZZ_H
    7348416U,	// FNMLS_ZPmZZ_S
    6824000U,	// FNMSB_ZPmZZ_D
    1770496U,	// FNMSB_ZPmZZ_H
    7348416U,	// FNMSB_ZPmZZ_S
    8453U,	// FNMSUBDrrr
    8453U,	// FNMSUBHrrr
    8453U,	// FNMSUBSrrr
    261U,	// FNMULDrr
    261U,	// FNMULHrr
    261U,	// FNMULSrr
    1U,	// FRECPE_ZZ_D
    0U,	// FRECPE_ZZ_H
    1U,	// FRECPE_ZZ_S
    1U,	// FRECPEv1f16
    1U,	// FRECPEv1i32
    1U,	// FRECPEv1i64
    2U,	// FRECPEv2f32
    2U,	// FRECPEv2f64
    3U,	// FRECPEv4f16
    3U,	// FRECPEv4f32
    4U,	// FRECPEv8f16
    261U,	// FRECPS16
    261U,	// FRECPS32
    261U,	// FRECPS64
    965U,	// FRECPS_ZZZ_D
    137U,	// FRECPS_ZZZ_H
    1093U,	// FRECPS_ZZZ_S
    49543U,	// FRECPSv2f32
    16773U,	// FRECPSv2f64
    57736U,	// FRECPSv4f16
    24966U,	// FRECPSv4f32
    33158U,	// FRECPSv8f16
    64U,	// FRECPX_ZPmZ_D
    128U,	// FRECPX_ZPmZ_H
    192U,	// FRECPX_ZPmZ_S
    1U,	// FRECPXv1f16
    1U,	// FRECPXv1i32
    1U,	// FRECPXv1i64
    1U,	// FRINT32XDr
    1U,	// FRINT32XSr
    2U,	// FRINT32Xv2f32
    2U,	// FRINT32Xv2f64
    3U,	// FRINT32Xv4f32
    1U,	// FRINT32ZDr
    1U,	// FRINT32ZSr
    2U,	// FRINT32Zv2f32
    2U,	// FRINT32Zv2f64
    3U,	// FRINT32Zv4f32
    1U,	// FRINT64XDr
    1U,	// FRINT64XSr
    2U,	// FRINT64Xv2f32
    2U,	// FRINT64Xv2f64
    3U,	// FRINT64Xv4f32
    1U,	// FRINT64ZDr
    1U,	// FRINT64ZSr
    2U,	// FRINT64Zv2f32
    2U,	// FRINT64Zv2f64
    3U,	// FRINT64Zv4f32
    1U,	// FRINTADr
    1U,	// FRINTAHr
    1U,	// FRINTASr
    64U,	// FRINTA_ZPmZ_D
    128U,	// FRINTA_ZPmZ_H
    192U,	// FRINTA_ZPmZ_S
    2U,	// FRINTAv2f32
    2U,	// FRINTAv2f64
    3U,	// FRINTAv4f16
    3U,	// FRINTAv4f32
    4U,	// FRINTAv8f16
    1U,	// FRINTIDr
    1U,	// FRINTIHr
    1U,	// FRINTISr
    64U,	// FRINTI_ZPmZ_D
    128U,	// FRINTI_ZPmZ_H
    192U,	// FRINTI_ZPmZ_S
    2U,	// FRINTIv2f32
    2U,	// FRINTIv2f64
    3U,	// FRINTIv4f16
    3U,	// FRINTIv4f32
    4U,	// FRINTIv8f16
    1U,	// FRINTMDr
    1U,	// FRINTMHr
    1U,	// FRINTMSr
    64U,	// FRINTM_ZPmZ_D
    128U,	// FRINTM_ZPmZ_H
    192U,	// FRINTM_ZPmZ_S
    2U,	// FRINTMv2f32
    2U,	// FRINTMv2f64
    3U,	// FRINTMv4f16
    3U,	// FRINTMv4f32
    4U,	// FRINTMv8f16
    1U,	// FRINTNDr
    1U,	// FRINTNHr
    1U,	// FRINTNSr
    64U,	// FRINTN_ZPmZ_D
    128U,	// FRINTN_ZPmZ_H
    192U,	// FRINTN_ZPmZ_S
    2U,	// FRINTNv2f32
    2U,	// FRINTNv2f64
    3U,	// FRINTNv4f16
    3U,	// FRINTNv4f32
    4U,	// FRINTNv8f16
    1U,	// FRINTPDr
    1U,	// FRINTPHr
    1U,	// FRINTPSr
    64U,	// FRINTP_ZPmZ_D
    128U,	// FRINTP_ZPmZ_H
    192U,	// FRINTP_ZPmZ_S
    2U,	// FRINTPv2f32
    2U,	// FRINTPv2f64
    3U,	// FRINTPv4f16
    3U,	// FRINTPv4f32
    4U,	// FRINTPv8f16
    1U,	// FRINTXDr
    1U,	// FRINTXHr
    1U,	// FRINTXSr
    64U,	// FRINTX_ZPmZ_D
    128U,	// FRINTX_ZPmZ_H
    192U,	// FRINTX_ZPmZ_S
    2U,	// FRINTXv2f32
    2U,	// FRINTXv2f64
    3U,	// FRINTXv4f16
    3U,	// FRINTXv4f32
    4U,	// FRINTXv8f16
    1U,	// FRINTZDr
    1U,	// FRINTZHr
    1U,	// FRINTZSr
    64U,	// FRINTZ_ZPmZ_D
    128U,	// FRINTZ_ZPmZ_H
    192U,	// FRINTZ_ZPmZ_S
    2U,	// FRINTZv2f32
    2U,	// FRINTZv2f64
    3U,	// FRINTZv4f16
    3U,	// FRINTZv4f32
    4U,	// FRINTZv8f16
    1U,	// FRSQRTE_ZZ_D
    0U,	// FRSQRTE_ZZ_H
    1U,	// FRSQRTE_ZZ_S
    1U,	// FRSQRTEv1f16
    1U,	// FRSQRTEv1i32
    1U,	// FRSQRTEv1i64
    2U,	// FRSQRTEv2f32
    2U,	// FRSQRTEv2f64
    3U,	// FRSQRTEv4f16
    3U,	// FRSQRTEv4f32
    4U,	// FRSQRTEv8f16
    261U,	// FRSQRTS16
    261U,	// FRSQRTS32
    261U,	// FRSQRTS64
    965U,	// FRSQRTS_ZZZ_D
    137U,	// FRSQRTS_ZZZ_H
    1093U,	// FRSQRTS_ZZZ_S
    49543U,	// FRSQRTSv2f32
    16773U,	// FRSQRTSv2f64
    57736U,	// FRSQRTSv4f16
    24966U,	// FRSQRTSv4f32
    33158U,	// FRSQRTSv8f16
    1057728U,	// FSCALE_ZPmZ_D
    1655817U,	// FSCALE_ZPmZ_H
    2106432U,	// FSCALE_ZPmZ_S
    1U,	// FSQRTDr
    1U,	// FSQRTHr
    1U,	// FSQRTSr
    64U,	// FSQRT_ZPmZ_D
    128U,	// FSQRT_ZPmZ_H
    192U,	// FSQRT_ZPmZ_S
    2U,	// FSQRTv2f32
    2U,	// FSQRTv2f64
    3U,	// FSQRTv4f16
    3U,	// FSQRTv4f32
    4U,	// FSQRTv8f16
    261U,	// FSUBDrr
    261U,	// FSUBHrr
    5252032U,	// FSUBR_ZPmI_D
    140297U,	// FSUBR_ZPmI_H
    5252160U,	// FSUBR_ZPmI_S
    1057728U,	// FSUBR_ZPmZ_D
    1655817U,	// FSUBR_ZPmZ_H
    2106432U,	// FSUBR_ZPmZ_S
    261U,	// FSUBSrr
    5252032U,	// FSUB_ZPmI_D
    140297U,	// FSUB_ZPmI_H
    5252160U,	// FSUB_ZPmI_S
    1057728U,	// FSUB_ZPmZ_D
    1655817U,	// FSUB_ZPmZ_H
    2106432U,	// FSUB_ZPmZ_S
    965U,	// FSUB_ZZZ_D
    137U,	// FSUB_ZZZ_H
    1093U,	// FSUB_ZZZ_S
    49543U,	// FSUBv2f32
    16773U,	// FSUBv2f64
    57736U,	// FSUBv4f16
    24966U,	// FSUBv4f32
    33158U,	// FSUBv8f16
    9157U,	// FTMAD_ZZI_D
    91145U,	// FTMAD_ZZI_H
    9285U,	// FTMAD_ZZI_S
    965U,	// FTSMUL_ZZZ_D
    137U,	// FTSMUL_ZZZ_H
    1093U,	// FTSMUL_ZZZ_S
    965U,	// FTSSEL_ZZZ_D
    137U,	// FTSSEL_ZZZ_H
    1093U,	// FTSSEL_ZZZ_S
    3345U,	// GLD1B_D_IMM_REAL
    3397U,	// GLD1B_D_REAL
    3461U,	// GLD1B_D_SXTW_REAL
    3525U,	// GLD1B_D_UXTW_REAL
    3345U,	// GLD1B_S_IMM_REAL
    3589U,	// GLD1B_S_SXTW_REAL
    3653U,	// GLD1B_S_UXTW_REAL
    26U,	// GLD1D_IMM_REAL
    3397U,	// GLD1D_REAL
    3717U,	// GLD1D_SCALED_REAL
    3461U,	// GLD1D_SXTW_REAL
    3781U,	// GLD1D_SXTW_SCALED_REAL
    3525U,	// GLD1D_UXTW_REAL
    3845U,	// GLD1D_UXTW_SCALED_REAL
    27U,	// GLD1H_D_IMM_REAL
    3397U,	// GLD1H_D_REAL
    3909U,	// GLD1H_D_SCALED_REAL
    3461U,	// GLD1H_D_SXTW_REAL
    3973U,	// GLD1H_D_SXTW_SCALED_REAL
    3525U,	// GLD1H_D_UXTW_REAL
    4037U,	// GLD1H_D_UXTW_SCALED_REAL
    27U,	// GLD1H_S_IMM_REAL
    3589U,	// GLD1H_S_SXTW_REAL
    4101U,	// GLD1H_S_SXTW_SCALED_REAL
    3653U,	// GLD1H_S_UXTW_REAL
    4165U,	// GLD1H_S_UXTW_SCALED_REAL
    3345U,	// GLD1SB_D_IMM_REAL
    3397U,	// GLD1SB_D_REAL
    3461U,	// GLD1SB_D_SXTW_REAL
    3525U,	// GLD1SB_D_UXTW_REAL
    3345U,	// GLD1SB_S_IMM_REAL
    3589U,	// GLD1SB_S_SXTW_REAL
    3653U,	// GLD1SB_S_UXTW_REAL
    27U,	// GLD1SH_D_IMM_REAL
    3397U,	// GLD1SH_D_REAL
    3909U,	// GLD1SH_D_SCALED_REAL
    3461U,	// GLD1SH_D_SXTW_REAL
    3973U,	// GLD1SH_D_SXTW_SCALED_REAL
    3525U,	// GLD1SH_D_UXTW_REAL
    4037U,	// GLD1SH_D_UXTW_SCALED_REAL
    27U,	// GLD1SH_S_IMM_REAL
    3589U,	// GLD1SH_S_SXTW_REAL
    4101U,	// GLD1SH_S_SXTW_SCALED_REAL
    3653U,	// GLD1SH_S_UXTW_REAL
    4165U,	// GLD1SH_S_UXTW_SCALED_REAL
    27U,	// GLD1SW_D_IMM_REAL
    3397U,	// GLD1SW_D_REAL
    4229U,	// GLD1SW_D_SCALED_REAL
    3461U,	// GLD1SW_D_SXTW_REAL
    4293U,	// GLD1SW_D_SXTW_SCALED_REAL
    3525U,	// GLD1SW_D_UXTW_REAL
    4357U,	// GLD1SW_D_UXTW_SCALED_REAL
    27U,	// GLD1W_D_IMM_REAL
    3397U,	// GLD1W_D_REAL
    4229U,	// GLD1W_D_SCALED_REAL
    3461U,	// GLD1W_D_SXTW_REAL
    4293U,	// GLD1W_D_SXTW_SCALED_REAL
    3525U,	// GLD1W_D_UXTW_REAL
    4357U,	// GLD1W_D_UXTW_SCALED_REAL
    27U,	// GLD1W_IMM_REAL
    3589U,	// GLD1W_SXTW_REAL
    4421U,	// GLD1W_SXTW_SCALED_REAL
    3653U,	// GLD1W_UXTW_REAL
    4485U,	// GLD1W_UXTW_SCALED_REAL
    3345U,	// GLDFF1B_D_IMM_REAL
    3397U,	// GLDFF1B_D_REAL
    3461U,	// GLDFF1B_D_SXTW_REAL
    3525U,	// GLDFF1B_D_UXTW_REAL
    3345U,	// GLDFF1B_S_IMM_REAL
    3589U,	// GLDFF1B_S_SXTW_REAL
    3653U,	// GLDFF1B_S_UXTW_REAL
    26U,	// GLDFF1D_IMM_REAL
    3397U,	// GLDFF1D_REAL
    3717U,	// GLDFF1D_SCALED_REAL
    3461U,	// GLDFF1D_SXTW_REAL
    3781U,	// GLDFF1D_SXTW_SCALED_REAL
    3525U,	// GLDFF1D_UXTW_REAL
    3845U,	// GLDFF1D_UXTW_SCALED_REAL
    27U,	// GLDFF1H_D_IMM_REAL
    3397U,	// GLDFF1H_D_REAL
    3909U,	// GLDFF1H_D_SCALED_REAL
    3461U,	// GLDFF1H_D_SXTW_REAL
    3973U,	// GLDFF1H_D_SXTW_SCALED_REAL
    3525U,	// GLDFF1H_D_UXTW_REAL
    4037U,	// GLDFF1H_D_UXTW_SCALED_REAL
    27U,	// GLDFF1H_S_IMM_REAL
    3589U,	// GLDFF1H_S_SXTW_REAL
    4101U,	// GLDFF1H_S_SXTW_SCALED_REAL
    3653U,	// GLDFF1H_S_UXTW_REAL
    4165U,	// GLDFF1H_S_UXTW_SCALED_REAL
    3345U,	// GLDFF1SB_D_IMM_REAL
    3397U,	// GLDFF1SB_D_REAL
    3461U,	// GLDFF1SB_D_SXTW_REAL
    3525U,	// GLDFF1SB_D_UXTW_REAL
    3345U,	// GLDFF1SB_S_IMM_REAL
    3589U,	// GLDFF1SB_S_SXTW_REAL
    3653U,	// GLDFF1SB_S_UXTW_REAL
    27U,	// GLDFF1SH_D_IMM_REAL
    3397U,	// GLDFF1SH_D_REAL
    3909U,	// GLDFF1SH_D_SCALED_REAL
    3461U,	// GLDFF1SH_D_SXTW_REAL
    3973U,	// GLDFF1SH_D_SXTW_SCALED_REAL
    3525U,	// GLDFF1SH_D_UXTW_REAL
    4037U,	// GLDFF1SH_D_UXTW_SCALED_REAL
    27U,	// GLDFF1SH_S_IMM_REAL
    3589U,	// GLDFF1SH_S_SXTW_REAL
    4101U,	// GLDFF1SH_S_SXTW_SCALED_REAL
    3653U,	// GLDFF1SH_S_UXTW_REAL
    4165U,	// GLDFF1SH_S_UXTW_SCALED_REAL
    27U,	// GLDFF1SW_D_IMM_REAL
    3397U,	// GLDFF1SW_D_REAL
    4229U,	// GLDFF1SW_D_SCALED_REAL
    3461U,	// GLDFF1SW_D_SXTW_REAL
    4293U,	// GLDFF1SW_D_SXTW_SCALED_REAL
    3525U,	// GLDFF1SW_D_UXTW_REAL
    4357U,	// GLDFF1SW_D_UXTW_SCALED_REAL
    27U,	// GLDFF1W_D_IMM_REAL
    3397U,	// GLDFF1W_D_REAL
    4229U,	// GLDFF1W_D_SCALED_REAL
    3461U,	// GLDFF1W_D_SXTW_REAL
    4293U,	// GLDFF1W_D_SXTW_SCALED_REAL
    3525U,	// GLDFF1W_D_UXTW_REAL
    4357U,	// GLDFF1W_D_UXTW_SCALED_REAL
    27U,	// GLDFF1W_IMM_REAL
    3589U,	// GLDFF1W_SXTW_REAL
    4421U,	// GLDFF1W_SXTW_SCALED_REAL
    3653U,	// GLDFF1W_UXTW_REAL
    4485U,	// GLDFF1W_UXTW_SCALED_REAL
    261U,	// GMI
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INCB_XPiI
    0U,	// INCD_XPiI
    0U,	// INCD_ZPiI
    0U,	// INCH_XPiI
    0U,	// INCH_ZPiI
    1U,	// INCP_XP_B
    1U,	// INCP_XP_D
    1U,	// INCP_XP_H
    1U,	// INCP_XP_S
    1U,	// INCP_ZP_D
    0U,	// INCP_ZP_H
    1U,	// INCP_ZP_S
    0U,	// INCW_XPiI
    0U,	// INCW_ZPiI
    261U,	// INDEX_II_B
    261U,	// INDEX_II_D
    11U,	// INDEX_II_H
    261U,	// INDEX_II_S
    261U,	// INDEX_IR_B
    261U,	// INDEX_IR_D
    11U,	// INDEX_IR_H
    261U,	// INDEX_IR_S
    261U,	// INDEX_RI_B
    261U,	// INDEX_RI_D
    11U,	// INDEX_RI_H
    261U,	// INDEX_RI_S
    261U,	// INDEX_RR_B
    261U,	// INDEX_RR_D
    11U,	// INDEX_RR_H
    261U,	// INDEX_RR_S
    1U,	// INSR_ZR_B
    1U,	// INSR_ZR_D
    0U,	// INSR_ZR_H
    1U,	// INSR_ZR_S
    1U,	// INSR_ZV_B
    1U,	// INSR_ZV_D
    0U,	// INSR_ZV_H
    1U,	// INSR_ZV_S
    1U,	// INSvi16gpr
    2962U,	// INSvi16lane
    1U,	// INSvi32gpr
    2962U,	// INSvi32lane
    1U,	// INSvi64gpr
    2963U,	// INSvi64lane
    1U,	// INSvi8gpr
    2963U,	// INSvi8lane
    261U,	// IRG
    0U,	// ISB
    0U,	// JumpTableDest16
    0U,	// JumpTableDest32
    0U,	// JumpTableDest8
    901U,	// LASTA_RPZ_B
    965U,	// LASTA_RPZ_D
    2309U,	// LASTA_RPZ_H
    1093U,	// LASTA_RPZ_S
    901U,	// LASTA_VPZ_B
    965U,	// LASTA_VPZ_D
    2309U,	// LASTA_VPZ_H
    1093U,	// LASTA_VPZ_S
    901U,	// LASTB_RPZ_B
    965U,	// LASTB_RPZ_D
    2309U,	// LASTB_RPZ_H
    1093U,	// LASTB_RPZ_S
    901U,	// LASTB_VPZ_B
    965U,	// LASTB_VPZ_D
    2309U,	// LASTB_VPZ_H
    1093U,	// LASTB_VPZ_S
    4549U,	// LD1B
    4549U,	// LD1B_D
    256325U,	// LD1B_D_IMM_REAL
    4549U,	// LD1B_H
    256325U,	// LD1B_H_IMM_REAL
    256325U,	// LD1B_IMM_REAL
    4549U,	// LD1B_S
    256325U,	// LD1B_S_IMM_REAL
    4613U,	// LD1D
    256325U,	// LD1D_IMM_REAL
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    4677U,	// LD1H
    4677U,	// LD1H_D
    256325U,	// LD1H_D_IMM_REAL
    256325U,	// LD1H_IMM_REAL
    4677U,	// LD1H_S
    256325U,	// LD1H_S_IMM_REAL
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    117061U,	// LD1RB_D_IMM
    117061U,	// LD1RB_H_IMM
    117061U,	// LD1RB_IMM
    117061U,	// LD1RB_S_IMM
    119429U,	// LD1RD_IMM
    119493U,	// LD1RH_D_IMM
    119493U,	// LD1RH_IMM
    119493U,	// LD1RH_S_IMM
    4549U,	// LD1RQ_B
    4869U,	// LD1RQ_B_IMM
    4613U,	// LD1RQ_D
    4869U,	// LD1RQ_D_IMM
    4677U,	// LD1RQ_H
    4869U,	// LD1RQ_H_IMM
    4933U,	// LD1RQ_W
    4869U,	// LD1RQ_W_IMM
    117061U,	// LD1RSB_D_IMM
    117061U,	// LD1RSB_H_IMM
    117061U,	// LD1RSB_S_IMM
    119493U,	// LD1RSH_D_IMM
    119493U,	// LD1RSH_S_IMM
    119685U,	// LD1RSW_IMM
    119685U,	// LD1RW_D_IMM
    119685U,	// LD1RW_IMM
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    4549U,	// LD1SB_D
    256325U,	// LD1SB_D_IMM_REAL
    4549U,	// LD1SB_H
    256325U,	// LD1SB_H_IMM_REAL
    4549U,	// LD1SB_S
    256325U,	// LD1SB_S_IMM_REAL
    4677U,	// LD1SH_D
    256325U,	// LD1SH_D_IMM_REAL
    4677U,	// LD1SH_S
    256325U,	// LD1SH_S_IMM_REAL
    4933U,	// LD1SW_D
    256325U,	// LD1SW_D_IMM_REAL
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    4933U,	// LD1W
    4933U,	// LD1W_D
    256325U,	// LD1W_D_IMM_REAL
    256325U,	// LD1W_IMM_REAL
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    4549U,	// LD2B
    258757U,	// LD2B_IMM
    4613U,	// LD2D
    258757U,	// LD2D_IMM
    4677U,	// LD2H
    258757U,	// LD2H_IMM
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    4933U,	// LD2W
    258757U,	// LD2W_IMM
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    4549U,	// LD3B
    5061U,	// LD3B_IMM
    4613U,	// LD3D
    5061U,	// LD3D_IMM
    4677U,	// LD3H
    5061U,	// LD3H_IMM
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    4933U,	// LD3W
    5061U,	// LD3W_IMM
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    4549U,	// LD4B
    258949U,	// LD4B_IMM
    4613U,	// LD4D
    258949U,	// LD4D_IMM
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    4677U,	// LD4H
    258949U,	// LD4H_IMM
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    4933U,	// LD4W
    258949U,	// LD4W_IMM
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    28U,	// LDAPRB
    28U,	// LDAPRH
    28U,	// LDAPRW
    28U,	// LDAPRX
    114949U,	// LDAPURBi
    114949U,	// LDAPURHi
    114949U,	// LDAPURSBWi
    114949U,	// LDAPURSBXi
    114949U,	// LDAPURSHWi
    114949U,	// LDAPURSHXi
    114949U,	// LDAPURSWi
    114949U,	// LDAPURXi
    114949U,	// LDAPURi
    28U,	// LDARB
    28U,	// LDARH
    28U,	// LDARW
    28U,	// LDARX
    114955U,	// LDAXPW
    114955U,	// LDAXPX
    28U,	// LDAXRB
    28U,	// LDAXRH
    28U,	// LDAXRW
    28U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    4549U,	// LDFF1B_D_REAL
    4549U,	// LDFF1B_H_REAL
    4549U,	// LDFF1B_REAL
    4549U,	// LDFF1B_S_REAL
    4613U,	// LDFF1D_REAL
    4677U,	// LDFF1H_D_REAL
    4677U,	// LDFF1H_REAL
    4677U,	// LDFF1H_S_REAL
    4549U,	// LDFF1SB_D_REAL
    4549U,	// LDFF1SB_H_REAL
    4549U,	// LDFF1SB_S_REAL
    4677U,	// LDFF1SH_D_REAL
    4677U,	// LDFF1SH_S_REAL
    4933U,	// LDFF1SW_D_REAL
    4933U,	// LDFF1W_D_REAL
    4933U,	// LDFF1W_REAL
    115013U,	// LDG
    28U,	// LDGV
    28U,	// LDLARB
    28U,	// LDLARH
    28U,	// LDLARW
    28U,	// LDLARX
    256325U,	// LDNF1B_D_IMM_REAL
    256325U,	// LDNF1B_H_IMM_REAL
    256325U,	// LDNF1B_IMM_REAL
    256325U,	// LDNF1B_S_IMM_REAL
    256325U,	// LDNF1D_IMM_REAL
    256325U,	// LDNF1H_D_IMM_REAL
    256325U,	// LDNF1H_IMM_REAL
    256325U,	// LDNF1H_S_IMM_REAL
    256325U,	// LDNF1SB_D_IMM_REAL
    256325U,	// LDNF1SB_H_IMM_REAL
    256325U,	// LDNF1SB_S_IMM_REAL
    256325U,	// LDNF1SH_D_IMM_REAL
    256325U,	// LDNF1SH_S_IMM_REAL
    256325U,	// LDNF1SW_D_IMM_REAL
    256325U,	// LDNF1W_D_IMM_REAL
    256325U,	// LDNF1W_IMM_REAL
    11018507U,	// LDNPDi
    11542795U,	// LDNPQi
    12067083U,	// LDNPSi
    12067083U,	// LDNPWi
    11018507U,	// LDNPXi
    256325U,	// LDNT1B_ZRI
    4549U,	// LDNT1B_ZRR
    256325U,	// LDNT1D_ZRI
    4613U,	// LDNT1D_ZRR
    256325U,	// LDNT1H_ZRI
    4677U,	// LDNT1H_ZRR
    256325U,	// LDNT1W_ZRI
    4933U,	// LDNT1W_ZRR
    11018507U,	// LDPDi
    12847435U,	// LDPDpost
    180365643U,	// LDPDpre
    11542795U,	// LDPQi
    13371723U,	// LDPQpost
    180889931U,	// LDPQpre
    12067083U,	// LDPSWi
    13896011U,	// LDPSWpost
    181414219U,	// LDPSWpre
    12067083U,	// LDPSi
    13896011U,	// LDPSpost
    181414219U,	// LDPSpre
    12067083U,	// LDPWi
    13896011U,	// LDPWpost
    181414219U,	// LDPWpre
    11018507U,	// LDPXi
    12847435U,	// LDPXpost
    180365643U,	// LDPXpre
    5125U,	// LDRAAindexed
    275077U,	// LDRAAwriteback
    5125U,	// LDRABindexed
    275077U,	// LDRABwriteback
    29U,	// LDRBBpost
    272709U,	// LDRBBpre
    14164229U,	// LDRBBroW
    14688517U,	// LDRBBroX
    5189U,	// LDRBBui
    29U,	// LDRBpost
    272709U,	// LDRBpre
    14164229U,	// LDRBroW
    14688517U,	// LDRBroX
    5189U,	// LDRBui
    0U,	// LDRDl
    29U,	// LDRDpost
    272709U,	// LDRDpre
    15212805U,	// LDRDroW
    15737093U,	// LDRDroX
    5253U,	// LDRDui
    29U,	// LDRHHpost
    272709U,	// LDRHHpre
    16261381U,	// LDRHHroW
    16785669U,	// LDRHHroX
    5317U,	// LDRHHui
    29U,	// LDRHpost
    272709U,	// LDRHpre
    16261381U,	// LDRHroW
    16785669U,	// LDRHroX
    5317U,	// LDRHui
    0U,	// LDRQl
    29U,	// LDRQpost
    272709U,	// LDRQpre
    17309957U,	// LDRQroW
    17834245U,	// LDRQroX
    5381U,	// LDRQui
    29U,	// LDRSBWpost
    272709U,	// LDRSBWpre
    14164229U,	// LDRSBWroW
    14688517U,	// LDRSBWroX
    5189U,	// LDRSBWui
    29U,	// LDRSBXpost
    272709U,	// LDRSBXpre
    14164229U,	// LDRSBXroW
    14688517U,	// LDRSBXroX
    5189U,	// LDRSBXui
    29U,	// LDRSHWpost
    272709U,	// LDRSHWpre
    16261381U,	// LDRSHWroW
    16785669U,	// LDRSHWroX
    5317U,	// LDRSHWui
    29U,	// LDRSHXpost
    272709U,	// LDRSHXpre
    16261381U,	// LDRSHXroW
    16785669U,	// LDRSHXroX
    5317U,	// LDRSHXui
    0U,	// LDRSWl
    29U,	// LDRSWpost
    272709U,	// LDRSWpre
    18358533U,	// LDRSWroW
    18882821U,	// LDRSWroX
    5445U,	// LDRSWui
    0U,	// LDRSl
    29U,	// LDRSpost
    272709U,	// LDRSpre
    18358533U,	// LDRSroW
    18882821U,	// LDRSroX
    5445U,	// LDRSui
    0U,	// LDRWl
    29U,	// LDRWpost
    272709U,	// LDRWpre
    18358533U,	// LDRWroW
    18882821U,	// LDRWroX
    5445U,	// LDRWui
    0U,	// LDRXl
    29U,	// LDRXpost
    272709U,	// LDRXpre
    15212805U,	// LDRXroW
    15737093U,	// LDRXroX
    5253U,	// LDRXui
    254213U,	// LDR_PXI
    254213U,	// LDR_ZXI
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    114949U,	// LDTRBi
    114949U,	// LDTRHi
    114949U,	// LDTRSBWi
    114949U,	// LDTRSBXi
    114949U,	// LDTRSHWi
    114949U,	// LDTRSHXi
    114949U,	// LDTRSWi
    114949U,	// LDTRWi
    114949U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    114949U,	// LDURBBi
    114949U,	// LDURBi
    114949U,	// LDURDi
    114949U,	// LDURHHi
    114949U,	// LDURHi
    114949U,	// LDURQi
    114949U,	// LDURSBWi
    114949U,	// LDURSBXi
    114949U,	// LDURSHWi
    114949U,	// LDURSHXi
    114949U,	// LDURSWi
    114949U,	// LDURSi
    114949U,	// LDURWi
    114949U,	// LDURXi
    114955U,	// LDXPW
    114955U,	// LDXPX
    28U,	// LDXRB
    28U,	// LDXRH
    28U,	// LDXRW
    28U,	// LDXRX
    0U,	// LOADgot
    533376U,	// LSLR_ZPmZ_B
    1057728U,	// LSLR_ZPmZ_D
    1655817U,	// LSLR_ZPmZ_H
    2106432U,	// LSLR_ZPmZ_S
    261U,	// LSLVWr
    261U,	// LSLVXr
    1057664U,	// LSL_WIDE_ZPmZ_B
    99337U,	// LSL_WIDE_ZPmZ_H
    1057856U,	// LSL_WIDE_ZPmZ_S
    965U,	// LSL_WIDE_ZZZ_B
    10U,	// LSL_WIDE_ZZZ_H
    965U,	// LSL_WIDE_ZZZ_S
    9088U,	// LSL_ZPmI_B
    9152U,	// LSL_ZPmI_D
    91145U,	// LSL_ZPmI_H
    9280U,	// LSL_ZPmI_S
    533376U,	// LSL_ZPmZ_B
    1057728U,	// LSL_ZPmZ_D
    1655817U,	// LSL_ZPmZ_H
    2106432U,	// LSL_ZPmZ_S
    261U,	// LSL_ZZI_B
    261U,	// LSL_ZZI_D
    11U,	// LSL_ZZI_H
    261U,	// LSL_ZZI_S
    533376U,	// LSRR_ZPmZ_B
    1057728U,	// LSRR_ZPmZ_D
    1655817U,	// LSRR_ZPmZ_H
    2106432U,	// LSRR_ZPmZ_S
    261U,	// LSRVWr
    261U,	// LSRVXr
    1057664U,	// LSR_WIDE_ZPmZ_B
    99337U,	// LSR_WIDE_ZPmZ_H
    1057856U,	// LSR_WIDE_ZPmZ_S
    965U,	// LSR_WIDE_ZZZ_B
    10U,	// LSR_WIDE_ZZZ_H
    965U,	// LSR_WIDE_ZZZ_S
    9088U,	// LSR_ZPmI_B
    9152U,	// LSR_ZPmI_D
    91145U,	// LSR_ZPmI_H
    9280U,	// LSR_ZPmI_S
    533376U,	// LSR_ZPmZ_B
    1057728U,	// LSR_ZPmZ_D
    1655817U,	// LSR_ZPmZ_H
    2106432U,	// LSR_ZPmZ_S
    261U,	// LSR_ZZI_B
    261U,	// LSR_ZZI_D
    11U,	// LSR_ZZI_H
    261U,	// LSR_ZZI_S
    8453U,	// MADDWrrr
    8453U,	// MADDXrrr
    19406848U,	// MAD_ZPmZZ_B
    6824000U,	// MAD_ZPmZZ_D
    1770496U,	// MAD_ZPmZZ_H
    7348416U,	// MAD_ZPmZZ_S
    19406848U,	// MLA_ZPmZZ_B
    6824000U,	// MLA_ZPmZZ_D
    1770496U,	// MLA_ZPmZZ_H
    7348416U,	// MLA_ZPmZZ_S
    41415U,	// MLAv16i8
    49607U,	// MLAv2i32
    9126343U,	// MLAv2i32_indexed
    57800U,	// MLAv4i16
    9118152U,	// MLAv4i16_indexed
    25030U,	// MLAv4i32
    9126342U,	// MLAv4i32_indexed
    33222U,	// MLAv8i16
    9118150U,	// MLAv8i16_indexed
    65992U,	// MLAv8i8
    19406848U,	// MLS_ZPmZZ_B
    6824000U,	// MLS_ZPmZZ_D
    1770496U,	// MLS_ZPmZZ_H
    7348416U,	// MLS_ZPmZZ_S
    41415U,	// MLSv16i8
    49607U,	// MLSv2i32
    9126343U,	// MLSv2i32_indexed
    57800U,	// MLSv4i16
    9118152U,	// MLSv4i16_indexed
    25030U,	// MLSv4i32
    9126342U,	// MLSv4i32_indexed
    33222U,	// MLSv8i16
    9118150U,	// MLSv8i16_indexed
    65992U,	// MLSv8i8
    0U,	// MOVID
    1U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    29U,	// MOVIv2i32
    29U,	// MOVIv2s_msl
    29U,	// MOVIv4i16
    29U,	// MOVIv4i32
    29U,	// MOVIv4s_msl
    1U,	// MOVIv8b_ns
    29U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    0U,	// MOVMCSym
    29U,	// MOVNWi
    29U,	// MOVNXi
    0U,	// MOVPRFX_ZPmZ_B
    64U,	// MOVPRFX_ZPmZ_D
    128U,	// MOVPRFX_ZPmZ_H
    192U,	// MOVPRFX_ZPmZ_S
    906U,	// MOVPRFX_ZPzZ_B
    970U,	// MOVPRFX_ZPzZ_D
    137U,	// MOVPRFX_ZPzZ_H
    1098U,	// MOVPRFX_ZPzZ_S
    1U,	// MOVPRFX_ZZ
    29U,	// MOVZWi
    29U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    19406848U,	// MSB_ZPmZZ_B
    6824000U,	// MSB_ZPmZZ_D
    1770496U,	// MSB_ZPmZZ_H
    7348416U,	// MSB_ZPmZZ_S
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    8453U,	// MSUBWrrr
    8453U,	// MSUBXrrr
    261U,	// MUL_ZI_B
    261U,	// MUL_ZI_D
    11U,	// MUL_ZI_H
    261U,	// MUL_ZI_S
    533376U,	// MUL_ZPmZ_B
    1057728U,	// MUL_ZPmZ_D
    1655817U,	// MUL_ZPmZ_H
    2106432U,	// MUL_ZPmZ_S
    41351U,	// MULv16i8
    49543U,	// MULv2i32
    10174855U,	// MULv2i32_indexed
    57736U,	// MULv4i16
    10166664U,	// MULv4i16_indexed
    24966U,	// MULv4i32
    10174854U,	// MULv4i32_indexed
    33158U,	// MULv8i16
    10166662U,	// MULv8i16_indexed
    65928U,	// MULv8i8
    29U,	// MVNIv2i32
    29U,	// MVNIv2s_msl
    29U,	// MVNIv4i16
    29U,	// MVNIv4i32
    29U,	// MVNIv4s_msl
    29U,	// MVNIv8i16
    533386U,	// NANDS_PPzPP
    533386U,	// NAND_PPzPP
    0U,	// NEG_ZPmZ_B
    64U,	// NEG_ZPmZ_D
    128U,	// NEG_ZPmZ_H
    192U,	// NEG_ZPmZ_S
    1U,	// NEGv16i8
    1U,	// NEGv1i64
    2U,	// NEGv2i32
    2U,	// NEGv2i64
    3U,	// NEGv4i16
    3U,	// NEGv4i32
    4U,	// NEGv8i16
    4U,	// NEGv8i8
    533386U,	// NORS_PPzPP
    533386U,	// NOR_PPzPP
    0U,	// NOT_ZPmZ_B
    64U,	// NOT_ZPmZ_D
    128U,	// NOT_ZPmZ_H
    192U,	// NOT_ZPmZ_S
    1U,	// NOTv16i8
    4U,	// NOTv8i8
    533386U,	// ORNS_PPzPP
    0U,	// ORNWrr
    581U,	// ORNWrs
    0U,	// ORNXrr
    581U,	// ORNXrs
    533386U,	// ORN_PPzPP
    41351U,	// ORNv16i8
    65928U,	// ORNv8i8
    533386U,	// ORRS_PPzPP
    2181U,	// ORRWri
    0U,	// ORRWrr
    581U,	// ORRWrs
    2245U,	// ORRXri
    0U,	// ORRXrr
    581U,	// ORRXrs
    533386U,	// ORR_PPzPP
    2245U,	// ORR_ZI
    533376U,	// ORR_ZPmZ_B
    1057728U,	// ORR_ZPmZ_D
    1655817U,	// ORR_ZPmZ_H
    2106432U,	// ORR_ZPmZ_S
    965U,	// ORR_ZZZ
    41351U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    65928U,	// ORRv8i8
    901U,	// ORV_VPZ_B
    965U,	// ORV_VPZ_D
    2309U,	// ORV_VPZ_H
    1093U,	// ORV_VPZ_S
    1U,	// PACDA
    1U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    261U,	// PACGA
    1U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    1U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    0U,	// PFALSE
    41351U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    65928U,	// PMULLv8i8
    41351U,	// PMULv16i8
    65928U,	// PMULv8i8
    901U,	// PNEXT_B
    965U,	// PNEXT_D
    137U,	// PNEXT_H
    1093U,	// PNEXT_S
    28U,	// PRFB_D_PZI
    30U,	// PRFB_D_SCALED
    30U,	// PRFB_D_SXTW_SCALED
    31U,	// PRFB_D_UXTW_SCALED
    5521U,	// PRFB_PRI
    31U,	// PRFB_PRR
    28U,	// PRFB_S_PZI
    32U,	// PRFB_S_SXTW_SCALED
    32U,	// PRFB_S_UXTW_SCALED
    0U,	// PRFD_D_PZI
    33U,	// PRFD_D_SCALED
    33U,	// PRFD_D_SXTW_SCALED
    34U,	// PRFD_D_UXTW_SCALED
    5521U,	// PRFD_PRI
    34U,	// PRFD_PRR
    0U,	// PRFD_S_PZI
    35U,	// PRFD_S_SXTW_SCALED
    35U,	// PRFD_S_UXTW_SCALED
    0U,	// PRFH_D_PZI
    36U,	// PRFH_D_SCALED
    36U,	// PRFH_D_SXTW_SCALED
    37U,	// PRFH_D_UXTW_SCALED
    5521U,	// PRFH_PRI
    37U,	// PRFH_PRR
    0U,	// PRFH_S_PZI
    38U,	// PRFH_S_SXTW_SCALED
    38U,	// PRFH_S_UXTW_SCALED
    0U,	// PRFMl
    15212805U,	// PRFMroW
    15737093U,	// PRFMroX
    5253U,	// PRFMui
    39U,	// PRFS_PRR
    114949U,	// PRFUMi
    0U,	// PRFW_D_PZI
    39U,	// PRFW_D_SCALED
    40U,	// PRFW_D_SXTW_SCALED
    40U,	// PRFW_D_UXTW_SCALED
    5521U,	// PRFW_PRI
    0U,	// PRFW_S_PZI
    41U,	// PRFW_S_SXTW_SCALED
    41U,	// PRFW_S_UXTW_SCALED
    1U,	// PTEST_PP
    1U,	// PTRUES_B
    1U,	// PTRUES_D
    0U,	// PTRUES_H
    1U,	// PTRUES_S
    1U,	// PTRUE_B
    1U,	// PTRUE_D
    0U,	// PTRUE_H
    1U,	// PTRUE_S
    0U,	// PUNPKHI_PP
    0U,	// PUNPKLO_PP
    16773U,	// RADDHNv2i64_v2i32
    16837U,	// RADDHNv2i64_v4i32
    24966U,	// RADDHNv4i32_v4i16
    25030U,	// RADDHNv4i32_v8i16
    33222U,	// RADDHNv8i16_v16i8
    33158U,	// RADDHNv8i16_v8i8
    16773U,	// RAX1
    1U,	// RBITWr
    1U,	// RBITXr
    0U,	// RBIT_ZPmZ_B
    64U,	// RBIT_ZPmZ_D
    128U,	// RBIT_ZPmZ_H
    192U,	// RBIT_ZPmZ_S
    1U,	// RBITv16i8
    4U,	// RBITv8i8
    42U,	// RDFFRS_PPz
    0U,	// RDFFR_P
    42U,	// RDFFR_PPz
    1U,	// RDVLI_XI
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    1U,	// REV16Wr
    1U,	// REV16Xr
    1U,	// REV16v16i8
    4U,	// REV16v8i8
    1U,	// REV32Xr
    1U,	// REV32v16i8
    3U,	// REV32v4i16
    4U,	// REV32v8i16
    4U,	// REV32v8i8
    1U,	// REV64v16i8
    2U,	// REV64v2i32
    3U,	// REV64v4i16
    3U,	// REV64v4i32
    4U,	// REV64v8i16
    4U,	// REV64v8i8
    64U,	// REVB_ZPmZ_D
    128U,	// REVB_ZPmZ_H
    192U,	// REVB_ZPmZ_S
    64U,	// REVH_ZPmZ_D
    192U,	// REVH_ZPmZ_S
    64U,	// REVW_ZPmZ_D
    1U,	// REVWr
    1U,	// REVXr
    1U,	// REV_PP_B
    1U,	// REV_PP_D
    0U,	// REV_PP_H
    1U,	// REV_PP_S
    1U,	// REV_ZZ_B
    1U,	// REV_ZZ_D
    0U,	// REV_ZZ_H
    1U,	// REV_ZZ_S
    261U,	// RMIF
    261U,	// RORVWr
    261U,	// RORVXr
    2374U,	// RSHRNv16i8_shift
    261U,	// RSHRNv2i32_shift
    262U,	// RSHRNv4i16_shift
    2373U,	// RSHRNv4i32_shift
    2374U,	// RSHRNv8i16_shift
    262U,	// RSHRNv8i8_shift
    16773U,	// RSUBHNv2i64_v2i32
    16837U,	// RSUBHNv2i64_v4i32
    24966U,	// RSUBHNv4i32_v4i16
    25030U,	// RSUBHNv4i32_v8i16
    33222U,	// RSUBHNv8i16_v16i8
    33158U,	// RSUBHNv8i16_v8i8
    41415U,	// SABALv16i8_v8i16
    49607U,	// SABALv2i32_v2i64
    57800U,	// SABALv4i16_v4i32
    25030U,	// SABALv4i32_v2i64
    33222U,	// SABALv8i16_v4i32
    65992U,	// SABALv8i8_v8i16
    41415U,	// SABAv16i8
    49607U,	// SABAv2i32
    57800U,	// SABAv4i16
    25030U,	// SABAv4i32
    33222U,	// SABAv8i16
    65992U,	// SABAv8i8
    41351U,	// SABDLv16i8_v8i16
    49543U,	// SABDLv2i32_v2i64
    57736U,	// SABDLv4i16_v4i32
    24966U,	// SABDLv4i32_v2i64
    33158U,	// SABDLv8i16_v4i32
    65928U,	// SABDLv8i8_v8i16
    533376U,	// SABD_ZPmZ_B
    1057728U,	// SABD_ZPmZ_D
    1655817U,	// SABD_ZPmZ_H
    2106432U,	// SABD_ZPmZ_S
    41351U,	// SABDv16i8
    49543U,	// SABDv2i32
    57736U,	// SABDv4i16
    24966U,	// SABDv4i32
    33158U,	// SABDv8i16
    65928U,	// SABDv8i8
    1U,	// SADALPv16i8_v8i16
    2U,	// SADALPv2i32_v1i64
    3U,	// SADALPv4i16_v2i32
    3U,	// SADALPv4i32_v2i64
    4U,	// SADALPv8i16_v4i32
    4U,	// SADALPv8i8_v4i16
    1U,	// SADDLPv16i8_v8i16
    2U,	// SADDLPv2i32_v1i64
    3U,	// SADDLPv4i16_v2i32
    3U,	// SADDLPv4i32_v2i64
    4U,	// SADDLPv8i16_v4i32
    4U,	// SADDLPv8i8_v4i16
    1U,	// SADDLVv16i8v
    3U,	// SADDLVv4i16v
    3U,	// SADDLVv4i32v
    4U,	// SADDLVv8i16v
    4U,	// SADDLVv8i8v
    41351U,	// SADDLv16i8_v8i16
    49543U,	// SADDLv2i32_v2i64
    57736U,	// SADDLv4i16_v4i32
    24966U,	// SADDLv4i32_v2i64
    33158U,	// SADDLv8i16_v4i32
    65928U,	// SADDLv8i8_v8i16
    901U,	// SADDV_VPZ_B
    2309U,	// SADDV_VPZ_H
    1093U,	// SADDV_VPZ_S
    41350U,	// SADDWv16i8_v8i16
    49541U,	// SADDWv2i32_v2i64
    57734U,	// SADDWv4i16_v4i32
    24965U,	// SADDWv4i32_v2i64
    33158U,	// SADDWv8i16_v4i32
    65926U,	// SADDWv8i8_v8i16
    0U,	// SB
    261U,	// SBCSWr
    261U,	// SBCSXr
    261U,	// SBCWr
    261U,	// SBCXr
    8453U,	// SBFMWri
    8453U,	// SBFMXri
    261U,	// SCVTFSWDri
    261U,	// SCVTFSWHri
    261U,	// SCVTFSWSri
    261U,	// SCVTFSXDri
    261U,	// SCVTFSXHri
    261U,	// SCVTFSXSri
    1U,	// SCVTFUWDri
    1U,	// SCVTFUWHri
    1U,	// SCVTFUWSri
    1U,	// SCVTFUXDri
    1U,	// SCVTFUXHri
    1U,	// SCVTFUXSri
    64U,	// SCVTF_ZPmZ_DtoD
    153U,	// SCVTF_ZPmZ_DtoH
    64U,	// SCVTF_ZPmZ_DtoS
    128U,	// SCVTF_ZPmZ_HtoH
    192U,	// SCVTF_ZPmZ_StoD
    152U,	// SCVTF_ZPmZ_StoH
    192U,	// SCVTF_ZPmZ_StoS
    261U,	// SCVTFd
    261U,	// SCVTFh
    261U,	// SCVTFs
    1U,	// SCVTFv1i16
    1U,	// SCVTFv1i32
    1U,	// SCVTFv1i64
    2U,	// SCVTFv2f32
    2U,	// SCVTFv2f64
    263U,	// SCVTFv2i32_shift
    261U,	// SCVTFv2i64_shift
    3U,	// SCVTFv4f16
    3U,	// SCVTFv4f32
    264U,	// SCVTFv4i16_shift
    262U,	// SCVTFv4i32_shift
    4U,	// SCVTFv8f16
    262U,	// SCVTFv8i16_shift
    1057728U,	// SDIVR_ZPmZ_D
    2106432U,	// SDIVR_ZPmZ_S
    261U,	// SDIVWr
    261U,	// SDIVXr
    1057728U,	// SDIV_ZPmZ_D
    2106432U,	// SDIV_ZPmZ_S
    42U,	// SDOT_ZZZI_D
    42U,	// SDOT_ZZZI_S
    1U,	// SDOT_ZZZ_D
    1U,	// SDOT_ZZZ_S
    278983U,	// SDOTlanev16i8
    278984U,	// SDOTlanev8i8
    41415U,	// SDOTv16i8
    65992U,	// SDOTv8i8
    533381U,	// SEL_PPPP
    533381U,	// SEL_ZPZZ_B
    1057733U,	// SEL_ZPZZ_D
    1655817U,	// SEL_ZPZZ_H
    2106437U,	// SEL_ZPZZ_S
    0U,	// SETF16
    0U,	// SETF8
    0U,	// SETFFR
    25029U,	// SHA1Crrr
    1U,	// SHA1Hrr
    25029U,	// SHA1Mrrr
    25029U,	// SHA1Prrr
    25030U,	// SHA1SU0rrr
    3U,	// SHA1SU1rr
    25029U,	// SHA256H2rrr
    25029U,	// SHA256Hrrr
    3U,	// SHA256SU0rr
    25030U,	// SHA256SU1rrr
    16837U,	// SHA512H
    16837U,	// SHA512H2
    2U,	// SHA512SU0
    16837U,	// SHA512SU1
    41351U,	// SHADDv16i8
    49543U,	// SHADDv2i32
    57736U,	// SHADDv4i16
    24966U,	// SHADDv4i32
    33158U,	// SHADDv8i16
    65928U,	// SHADDv8i8
    43U,	// SHLLv16i8
    43U,	// SHLLv2i32
    44U,	// SHLLv4i16
    44U,	// SHLLv4i32
    45U,	// SHLLv8i16
    45U,	// SHLLv8i8
    261U,	// SHLd
    263U,	// SHLv16i8_shift
    263U,	// SHLv2i32_shift
    261U,	// SHLv2i64_shift
    264U,	// SHLv4i16_shift
    262U,	// SHLv4i32_shift
    262U,	// SHLv8i16_shift
    264U,	// SHLv8i8_shift
    2374U,	// SHRNv16i8_shift
    261U,	// SHRNv2i32_shift
    262U,	// SHRNv4i16_shift
    2373U,	// SHRNv4i32_shift
    2374U,	// SHRNv8i16_shift
    262U,	// SHRNv8i8_shift
    41351U,	// SHSUBv16i8
    49543U,	// SHSUBv2i32
    57736U,	// SHSUBv4i16
    24966U,	// SHSUBv4i32
    33158U,	// SHSUBv8i16
    65928U,	// SHSUBv8i8
    2373U,	// SLId
    2375U,	// SLIv16i8_shift
    2375U,	// SLIv2i32_shift
    2373U,	// SLIv2i64_shift
    2376U,	// SLIv4i16_shift
    2374U,	// SLIv4i32_shift
    2374U,	// SLIv8i16_shift
    2376U,	// SLIv8i8_shift
    25030U,	// SM3PARTW1
    25030U,	// SM3PARTW2
    204120454U,	// SM3SS1
    9126342U,	// SM3TT1A
    9126342U,	// SM3TT1B
    9126342U,	// SM3TT2A
    9126342U,	// SM3TT2B
    3U,	// SM4E
    24966U,	// SM4ENCKEY
    8453U,	// SMADDLrrr
    41351U,	// SMAXPv16i8
    49543U,	// SMAXPv2i32
    57736U,	// SMAXPv4i16
    24966U,	// SMAXPv4i32
    33158U,	// SMAXPv8i16
    65928U,	// SMAXPv8i8
    901U,	// SMAXV_VPZ_B
    965U,	// SMAXV_VPZ_D
    2309U,	// SMAXV_VPZ_H
    1093U,	// SMAXV_VPZ_S
    1U,	// SMAXVv16i8v
    3U,	// SMAXVv4i16v
    3U,	// SMAXVv4i32v
    4U,	// SMAXVv8i16v
    4U,	// SMAXVv8i8v
    261U,	// SMAX_ZI_B
    261U,	// SMAX_ZI_D
    11U,	// SMAX_ZI_H
    261U,	// SMAX_ZI_S
    533376U,	// SMAX_ZPmZ_B
    1057728U,	// SMAX_ZPmZ_D
    1655817U,	// SMAX_ZPmZ_H
    2106432U,	// SMAX_ZPmZ_S
    41351U,	// SMAXv16i8
    49543U,	// SMAXv2i32
    57736U,	// SMAXv4i16
    24966U,	// SMAXv4i32
    33158U,	// SMAXv8i16
    65928U,	// SMAXv8i8
    0U,	// SMC
    41351U,	// SMINPv16i8
    49543U,	// SMINPv2i32
    57736U,	// SMINPv4i16
    24966U,	// SMINPv4i32
    33158U,	// SMINPv8i16
    65928U,	// SMINPv8i8
    901U,	// SMINV_VPZ_B
    965U,	// SMINV_VPZ_D
    2309U,	// SMINV_VPZ_H
    1093U,	// SMINV_VPZ_S
    1U,	// SMINVv16i8v
    3U,	// SMINVv4i16v
    3U,	// SMINVv4i32v
    4U,	// SMINVv8i16v
    4U,	// SMINVv8i8v
    261U,	// SMIN_ZI_B
    261U,	// SMIN_ZI_D
    11U,	// SMIN_ZI_H
    261U,	// SMIN_ZI_S
    533376U,	// SMIN_ZPmZ_B
    1057728U,	// SMIN_ZPmZ_D
    1655817U,	// SMIN_ZPmZ_H
    2106432U,	// SMIN_ZPmZ_S
    41351U,	// SMINv16i8
    49543U,	// SMINv2i32
    57736U,	// SMINv4i16
    24966U,	// SMINv4i32
    33158U,	// SMINv8i16
    65928U,	// SMINv8i8
    41415U,	// SMLALv16i8_v8i16
    9126343U,	// SMLALv2i32_indexed
    49607U,	// SMLALv2i32_v2i64
    9118152U,	// SMLALv4i16_indexed
    57800U,	// SMLALv4i16_v4i32
    9126342U,	// SMLALv4i32_indexed
    25030U,	// SMLALv4i32_v2i64
    9118150U,	// SMLALv8i16_indexed
    33222U,	// SMLALv8i16_v4i32
    65992U,	// SMLALv8i8_v8i16
    41415U,	// SMLSLv16i8_v8i16
    9126343U,	// SMLSLv2i32_indexed
    49607U,	// SMLSLv2i32_v2i64
    9118152U,	// SMLSLv4i16_indexed
    57800U,	// SMLSLv4i16_v4i32
    9126342U,	// SMLSLv4i32_indexed
    25030U,	// SMLSLv4i32_v2i64
    9118150U,	// SMLSLv8i16_indexed
    33222U,	// SMLSLv8i16_v4i32
    65992U,	// SMLSLv8i8_v8i16
    2834U,	// SMOVvi16to32
    2834U,	// SMOVvi16to64
    2834U,	// SMOVvi32to64
    2835U,	// SMOVvi8to32
    2835U,	// SMOVvi8to64
    8453U,	// SMSUBLrrr
    533376U,	// SMULH_ZPmZ_B
    1057728U,	// SMULH_ZPmZ_D
    1655817U,	// SMULH_ZPmZ_H
    2106432U,	// SMULH_ZPmZ_S
    261U,	// SMULHrr
    41351U,	// SMULLv16i8_v8i16
    10174855U,	// SMULLv2i32_indexed
    49543U,	// SMULLv2i32_v2i64
    10166664U,	// SMULLv4i16_indexed
    57736U,	// SMULLv4i16_v4i32
    10174854U,	// SMULLv4i32_indexed
    24966U,	// SMULLv4i32_v2i64
    10166662U,	// SMULLv8i16_indexed
    33158U,	// SMULLv8i16_v4i32
    65928U,	// SMULLv8i8_v8i16
    0U,	// SPACE
    533381U,	// SPLICE_ZPZ_B
    1057733U,	// SPLICE_ZPZ_D
    1655817U,	// SPLICE_ZPZ_H
    2106437U,	// SPLICE_ZPZ_S
    1U,	// SQABSv16i8
    1U,	// SQABSv1i16
    1U,	// SQABSv1i32
    1U,	// SQABSv1i64
    1U,	// SQABSv1i8
    2U,	// SQABSv2i32
    2U,	// SQABSv2i64
    3U,	// SQABSv4i16
    3U,	// SQABSv4i32
    4U,	// SQABSv8i16
    4U,	// SQABSv8i8
    709U,	// SQADD_ZI_B
    773U,	// SQADD_ZI_D
    9U,	// SQADD_ZI_H
    837U,	// SQADD_ZI_S
    901U,	// SQADD_ZZZ_B
    965U,	// SQADD_ZZZ_D
    137U,	// SQADD_ZZZ_H
    1093U,	// SQADD_ZZZ_S
    41351U,	// SQADDv16i8
    261U,	// SQADDv1i16
    261U,	// SQADDv1i32
    261U,	// SQADDv1i64
    261U,	// SQADDv1i8
    49543U,	// SQADDv2i32
    16773U,	// SQADDv2i64
    57736U,	// SQADDv4i16
    24966U,	// SQADDv4i32
    33158U,	// SQADDv8i16
    65928U,	// SQADDv8i8
    0U,	// SQDECB_XPiI
    0U,	// SQDECB_XPiWdI
    0U,	// SQDECD_XPiI
    0U,	// SQDECD_XPiWdI
    0U,	// SQDECD_ZPiI
    0U,	// SQDECH_XPiI
    0U,	// SQDECH_XPiWdI
    0U,	// SQDECH_ZPiI
    5573U,	// SQDECP_XPWd_B
    5573U,	// SQDECP_XPWd_D
    5573U,	// SQDECP_XPWd_H
    5573U,	// SQDECP_XPWd_S
    1U,	// SQDECP_XP_B
    1U,	// SQDECP_XP_D
    1U,	// SQDECP_XP_H
    1U,	// SQDECP_XP_S
    1U,	// SQDECP_ZP_D
    0U,	// SQDECP_ZP_H
    1U,	// SQDECP_ZP_S
    0U,	// SQDECW_XPiI
    0U,	// SQDECW_XPiWdI
    0U,	// SQDECW_ZPiI
    2373U,	// SQDMLALi16
    2373U,	// SQDMLALi32
    9118149U,	// SQDMLALv1i32_indexed
    9126341U,	// SQDMLALv1i64_indexed
    9126343U,	// SQDMLALv2i32_indexed
    49607U,	// SQDMLALv2i32_v2i64
    9118152U,	// SQDMLALv4i16_indexed
    57800U,	// SQDMLALv4i16_v4i32
    9126342U,	// SQDMLALv4i32_indexed
    25030U,	// SQDMLALv4i32_v2i64
    9118150U,	// SQDMLALv8i16_indexed
    33222U,	// SQDMLALv8i16_v4i32
    2373U,	// SQDMLSLi16
    2373U,	// SQDMLSLi32
    9118149U,	// SQDMLSLv1i32_indexed
    9126341U,	// SQDMLSLv1i64_indexed
    9126343U,	// SQDMLSLv2i32_indexed
    49607U,	// SQDMLSLv2i32_v2i64
    9118152U,	// SQDMLSLv4i16_indexed
    57800U,	// SQDMLSLv4i16_v4i32
    9126342U,	// SQDMLSLv4i32_indexed
    25030U,	// SQDMLSLv4i32_v2i64
    9118150U,	// SQDMLSLv8i16_indexed
    33222U,	// SQDMLSLv8i16_v4i32
    261U,	// SQDMULHv1i16
    10166661U,	// SQDMULHv1i16_indexed
    261U,	// SQDMULHv1i32
    10174853U,	// SQDMULHv1i32_indexed
    49543U,	// SQDMULHv2i32
    10174855U,	// SQDMULHv2i32_indexed
    57736U,	// SQDMULHv4i16
    10166664U,	// SQDMULHv4i16_indexed
    24966U,	// SQDMULHv4i32
    10174854U,	// SQDMULHv4i32_indexed
    33158U,	// SQDMULHv8i16
    10166662U,	// SQDMULHv8i16_indexed
    261U,	// SQDMULLi16
    261U,	// SQDMULLi32
    10166661U,	// SQDMULLv1i32_indexed
    10174853U,	// SQDMULLv1i64_indexed
    10174855U,	// SQDMULLv2i32_indexed
    49543U,	// SQDMULLv2i32_v2i64
    10166664U,	// SQDMULLv4i16_indexed
    57736U,	// SQDMULLv4i16_v4i32
    10174854U,	// SQDMULLv4i32_indexed
    24966U,	// SQDMULLv4i32_v2i64
    10166662U,	// SQDMULLv8i16_indexed
    33158U,	// SQDMULLv8i16_v4i32
    0U,	// SQINCB_XPiI
    0U,	// SQINCB_XPiWdI
    0U,	// SQINCD_XPiI
    0U,	// SQINCD_XPiWdI
    0U,	// SQINCD_ZPiI
    0U,	// SQINCH_XPiI
    0U,	// SQINCH_XPiWdI
    0U,	// SQINCH_ZPiI
    5573U,	// SQINCP_XPWd_B
    5573U,	// SQINCP_XPWd_D
    5573U,	// SQINCP_XPWd_H
    5573U,	// SQINCP_XPWd_S
    1U,	// SQINCP_XP_B
    1U,	// SQINCP_XP_D
    1U,	// SQINCP_XP_H
    1U,	// SQINCP_XP_S
    1U,	// SQINCP_ZP_D
    0U,	// SQINCP_ZP_H
    1U,	// SQINCP_ZP_S
    0U,	// SQINCW_XPiI
    0U,	// SQINCW_XPiWdI
    0U,	// SQINCW_ZPiI
    1U,	// SQNEGv16i8
    1U,	// SQNEGv1i16
    1U,	// SQNEGv1i32
    1U,	// SQNEGv1i64
    1U,	// SQNEGv1i8
    2U,	// SQNEGv2i32
    2U,	// SQNEGv2i64
    3U,	// SQNEGv4i16
    3U,	// SQNEGv4i32
    4U,	// SQNEGv8i16
    4U,	// SQNEGv8i8
    9118149U,	// SQRDMLAHi16_indexed
    9126341U,	// SQRDMLAHi32_indexed
    2373U,	// SQRDMLAHv1i16
    2373U,	// SQRDMLAHv1i32
    49607U,	// SQRDMLAHv2i32
    9126343U,	// SQRDMLAHv2i32_indexed
    57800U,	// SQRDMLAHv4i16
    9118152U,	// SQRDMLAHv4i16_indexed
    25030U,	// SQRDMLAHv4i32
    9126342U,	// SQRDMLAHv4i32_indexed
    33222U,	// SQRDMLAHv8i16
    9118150U,	// SQRDMLAHv8i16_indexed
    9118149U,	// SQRDMLSHi16_indexed
    9126341U,	// SQRDMLSHi32_indexed
    2373U,	// SQRDMLSHv1i16
    2373U,	// SQRDMLSHv1i32
    49607U,	// SQRDMLSHv2i32
    9126343U,	// SQRDMLSHv2i32_indexed
    57800U,	// SQRDMLSHv4i16
    9118152U,	// SQRDMLSHv4i16_indexed
    25030U,	// SQRDMLSHv4i32
    9126342U,	// SQRDMLSHv4i32_indexed
    33222U,	// SQRDMLSHv8i16
    9118150U,	// SQRDMLSHv8i16_indexed
    261U,	// SQRDMULHv1i16
    10166661U,	// SQRDMULHv1i16_indexed
    261U,	// SQRDMULHv1i32
    10174853U,	// SQRDMULHv1i32_indexed
    49543U,	// SQRDMULHv2i32
    10174855U,	// SQRDMULHv2i32_indexed
    57736U,	// SQRDMULHv4i16
    10166664U,	// SQRDMULHv4i16_indexed
    24966U,	// SQRDMULHv4i32
    10174854U,	// SQRDMULHv4i32_indexed
    33158U,	// SQRDMULHv8i16
    10166662U,	// SQRDMULHv8i16_indexed
    41351U,	// SQRSHLv16i8
    261U,	// SQRSHLv1i16
    261U,	// SQRSHLv1i32
    261U,	// SQRSHLv1i64
    261U,	// SQRSHLv1i8
    49543U,	// SQRSHLv2i32
    16773U,	// SQRSHLv2i64
    57736U,	// SQRSHLv4i16
    24966U,	// SQRSHLv4i32
    33158U,	// SQRSHLv8i16
    65928U,	// SQRSHLv8i8
    261U,	// SQRSHRNb
    261U,	// SQRSHRNh
    261U,	// SQRSHRNs
    2374U,	// SQRSHRNv16i8_shift
    261U,	// SQRSHRNv2i32_shift
    262U,	// SQRSHRNv4i16_shift
    2373U,	// SQRSHRNv4i32_shift
    2374U,	// SQRSHRNv8i16_shift
    262U,	// SQRSHRNv8i8_shift
    261U,	// SQRSHRUNb
    261U,	// SQRSHRUNh
    261U,	// SQRSHRUNs
    2374U,	// SQRSHRUNv16i8_shift
    261U,	// SQRSHRUNv2i32_shift
    262U,	// SQRSHRUNv4i16_shift
    2373U,	// SQRSHRUNv4i32_shift
    2374U,	// SQRSHRUNv8i16_shift
    262U,	// SQRSHRUNv8i8_shift
    261U,	// SQSHLUb
    261U,	// SQSHLUd
    261U,	// SQSHLUh
    261U,	// SQSHLUs
    263U,	// SQSHLUv16i8_shift
    263U,	// SQSHLUv2i32_shift
    261U,	// SQSHLUv2i64_shift
    264U,	// SQSHLUv4i16_shift
    262U,	// SQSHLUv4i32_shift
    262U,	// SQSHLUv8i16_shift
    264U,	// SQSHLUv8i8_shift
    261U,	// SQSHLb
    261U,	// SQSHLd
    261U,	// SQSHLh
    261U,	// SQSHLs
    41351U,	// SQSHLv16i8
    263U,	// SQSHLv16i8_shift
    261U,	// SQSHLv1i16
    261U,	// SQSHLv1i32
    261U,	// SQSHLv1i64
    261U,	// SQSHLv1i8
    49543U,	// SQSHLv2i32
    263U,	// SQSHLv2i32_shift
    16773U,	// SQSHLv2i64
    261U,	// SQSHLv2i64_shift
    57736U,	// SQSHLv4i16
    264U,	// SQSHLv4i16_shift
    24966U,	// SQSHLv4i32
    262U,	// SQSHLv4i32_shift
    33158U,	// SQSHLv8i16
    262U,	// SQSHLv8i16_shift
    65928U,	// SQSHLv8i8
    264U,	// SQSHLv8i8_shift
    261U,	// SQSHRNb
    261U,	// SQSHRNh
    261U,	// SQSHRNs
    2374U,	// SQSHRNv16i8_shift
    261U,	// SQSHRNv2i32_shift
    262U,	// SQSHRNv4i16_shift
    2373U,	// SQSHRNv4i32_shift
    2374U,	// SQSHRNv8i16_shift
    262U,	// SQSHRNv8i8_shift
    261U,	// SQSHRUNb
    261U,	// SQSHRUNh
    261U,	// SQSHRUNs
    2374U,	// SQSHRUNv16i8_shift
    261U,	// SQSHRUNv2i32_shift
    262U,	// SQSHRUNv4i16_shift
    2373U,	// SQSHRUNv4i32_shift
    2374U,	// SQSHRUNv8i16_shift
    262U,	// SQSHRUNv8i8_shift
    709U,	// SQSUB_ZI_B
    773U,	// SQSUB_ZI_D
    9U,	// SQSUB_ZI_H
    837U,	// SQSUB_ZI_S
    901U,	// SQSUB_ZZZ_B
    965U,	// SQSUB_ZZZ_D
    137U,	// SQSUB_ZZZ_H
    1093U,	// SQSUB_ZZZ_S
    41351U,	// SQSUBv16i8
    261U,	// SQSUBv1i16
    261U,	// SQSUBv1i32
    261U,	// SQSUBv1i64
    261U,	// SQSUBv1i8
    49543U,	// SQSUBv2i32
    16773U,	// SQSUBv2i64
    57736U,	// SQSUBv4i16
    24966U,	// SQSUBv4i32
    33158U,	// SQSUBv8i16
    65928U,	// SQSUBv8i8
    4U,	// SQXTNv16i8
    1U,	// SQXTNv1i16
    1U,	// SQXTNv1i32
    1U,	// SQXTNv1i8
    2U,	// SQXTNv2i32
    3U,	// SQXTNv4i16
    2U,	// SQXTNv4i32
    3U,	// SQXTNv8i16
    4U,	// SQXTNv8i8
    4U,	// SQXTUNv16i8
    1U,	// SQXTUNv1i16
    1U,	// SQXTUNv1i32
    1U,	// SQXTUNv1i8
    2U,	// SQXTUNv2i32
    3U,	// SQXTUNv4i16
    2U,	// SQXTUNv4i32
    3U,	// SQXTUNv8i16
    4U,	// SQXTUNv8i8
    41351U,	// SRHADDv16i8
    49543U,	// SRHADDv2i32
    57736U,	// SRHADDv4i16
    24966U,	// SRHADDv4i32
    33158U,	// SRHADDv8i16
    65928U,	// SRHADDv8i8
    2373U,	// SRId
    2375U,	// SRIv16i8_shift
    2375U,	// SRIv2i32_shift
    2373U,	// SRIv2i64_shift
    2376U,	// SRIv4i16_shift
    2374U,	// SRIv4i32_shift
    2374U,	// SRIv8i16_shift
    2376U,	// SRIv8i8_shift
    41351U,	// SRSHLv16i8
    261U,	// SRSHLv1i64
    49543U,	// SRSHLv2i32
    16773U,	// SRSHLv2i64
    57736U,	// SRSHLv4i16
    24966U,	// SRSHLv4i32
    33158U,	// SRSHLv8i16
    65928U,	// SRSHLv8i8
    261U,	// SRSHRd
    263U,	// SRSHRv16i8_shift
    263U,	// SRSHRv2i32_shift
    261U,	// SRSHRv2i64_shift
    264U,	// SRSHRv4i16_shift
    262U,	// SRSHRv4i32_shift
    262U,	// SRSHRv8i16_shift
    264U,	// SRSHRv8i8_shift
    2373U,	// SRSRAd
    2375U,	// SRSRAv16i8_shift
    2375U,	// SRSRAv2i32_shift
    2373U,	// SRSRAv2i64_shift
    2376U,	// SRSRAv4i16_shift
    2374U,	// SRSRAv4i32_shift
    2374U,	// SRSRAv8i16_shift
    2376U,	// SRSRAv8i8_shift
    263U,	// SSHLLv16i8_shift
    263U,	// SSHLLv2i32_shift
    264U,	// SSHLLv4i16_shift
    262U,	// SSHLLv4i32_shift
    262U,	// SSHLLv8i16_shift
    264U,	// SSHLLv8i8_shift
    41351U,	// SSHLv16i8
    261U,	// SSHLv1i64
    49543U,	// SSHLv2i32
    16773U,	// SSHLv2i64
    57736U,	// SSHLv4i16
    24966U,	// SSHLv4i32
    33158U,	// SSHLv8i16
    65928U,	// SSHLv8i8
    261U,	// SSHRd
    263U,	// SSHRv16i8_shift
    263U,	// SSHRv2i32_shift
    261U,	// SSHRv2i64_shift
    264U,	// SSHRv4i16_shift
    262U,	// SSHRv4i32_shift
    262U,	// SSHRv8i16_shift
    264U,	// SSHRv8i8_shift
    2373U,	// SSRAd
    2375U,	// SSRAv16i8_shift
    2375U,	// SSRAv2i32_shift
    2373U,	// SSRAv2i64_shift
    2376U,	// SSRAv4i16_shift
    2374U,	// SSRAv4i32_shift
    2374U,	// SSRAv8i16_shift
    2376U,	// SSRAv8i8_shift
    3397U,	// SST1B_D
    3345U,	// SST1B_D_IMM
    3461U,	// SST1B_D_SXTW
    3525U,	// SST1B_D_UXTW
    3345U,	// SST1B_S_IMM
    3589U,	// SST1B_S_SXTW
    3653U,	// SST1B_S_UXTW
    3397U,	// SST1D
    26U,	// SST1D_IMM
    3717U,	// SST1D_SCALED
    3461U,	// SST1D_SXTW
    3781U,	// SST1D_SXTW_SCALED
    3525U,	// SST1D_UXTW
    3845U,	// SST1D_UXTW_SCALED
    3397U,	// SST1H_D
    27U,	// SST1H_D_IMM
    3909U,	// SST1H_D_SCALED
    3461U,	// SST1H_D_SXTW
    3973U,	// SST1H_D_SXTW_SCALED
    3525U,	// SST1H_D_UXTW
    4037U,	// SST1H_D_UXTW_SCALED
    27U,	// SST1H_S_IMM
    3589U,	// SST1H_S_SXTW
    4101U,	// SST1H_S_SXTW_SCALED
    3653U,	// SST1H_S_UXTW
    4165U,	// SST1H_S_UXTW_SCALED
    3397U,	// SST1W_D
    27U,	// SST1W_D_IMM
    4229U,	// SST1W_D_SCALED
    3461U,	// SST1W_D_SXTW
    4293U,	// SST1W_D_SXTW_SCALED
    3525U,	// SST1W_D_UXTW
    4357U,	// SST1W_D_UXTW_SCALED
    27U,	// SST1W_IMM
    3589U,	// SST1W_SXTW
    4421U,	// SST1W_SXTW_SCALED
    3653U,	// SST1W_UXTW
    4485U,	// SST1W_UXTW_SCALED
    41351U,	// SSUBLv16i8_v8i16
    49543U,	// SSUBLv2i32_v2i64
    57736U,	// SSUBLv4i16_v4i32
    24966U,	// SSUBLv4i32_v2i64
    33158U,	// SSUBLv8i16_v4i32
    65928U,	// SSUBLv8i8_v8i16
    41350U,	// SSUBWv16i8_v8i16
    49541U,	// SSUBWv2i32_v2i64
    57734U,	// SSUBWv4i16_v4i32
    24965U,	// SSUBWv4i32_v2i64
    33158U,	// SSUBWv8i16_v4i32
    65926U,	// SSUBWv8i8_v8i16
    4549U,	// ST1B
    4549U,	// ST1B_D
    256325U,	// ST1B_D_IMM
    4549U,	// ST1B_H
    256325U,	// ST1B_H_IMM
    256325U,	// ST1B_IMM
    4549U,	// ST1B_S
    256325U,	// ST1B_S_IMM
    4613U,	// ST1D
    256325U,	// ST1D_IMM
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    4677U,	// ST1H
    4677U,	// ST1H_D
    256325U,	// ST1H_D_IMM
    256325U,	// ST1H_IMM
    4677U,	// ST1H_S
    256325U,	// ST1H_S_IMM
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    4933U,	// ST1W
    4933U,	// ST1W_D
    256325U,	// ST1W_D_IMM
    256325U,	// ST1W_IMM
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    4549U,	// ST2B
    258757U,	// ST2B_IMM
    4613U,	// ST2D
    258757U,	// ST2D_IMM
    0U,	// ST2GOffset
    1U,	// ST2GPostIndex
    28U,	// ST2GPreIndex
    4677U,	// ST2H
    258757U,	// ST2H_IMM
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    4933U,	// ST2W
    258757U,	// ST2W_IMM
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    4549U,	// ST3B
    5061U,	// ST3B_IMM
    4613U,	// ST3D
    5061U,	// ST3D_IMM
    4677U,	// ST3H
    5061U,	// ST3H_IMM
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    4933U,	// ST3W
    5061U,	// ST3W_IMM
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    4549U,	// ST4B
    258949U,	// ST4B_IMM
    4613U,	// ST4D
    258949U,	// ST4D_IMM
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    4677U,	// ST4H
    258949U,	// ST4H_IMM
    4933U,	// ST4W
    258949U,	// ST4W_IMM
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    0U,	// STGOffset
    11542795U,	// STGPi
    1U,	// STGPostIndex
    13371723U,	// STGPpost
    180889931U,	// STGPpre
    28U,	// STGPreIndex
    28U,	// STGV
    28U,	// STLLRB
    28U,	// STLLRH
    28U,	// STLLRW
    28U,	// STLLRX
    28U,	// STLRB
    28U,	// STLRH
    28U,	// STLRW
    28U,	// STLRX
    114949U,	// STLURBi
    114949U,	// STLURHi
    114949U,	// STLURWi
    114949U,	// STLURXi
    286981U,	// STLXPW
    286981U,	// STLXPX
    114955U,	// STLXRB
    114955U,	// STLXRH
    114955U,	// STLXRW
    114955U,	// STLXRX
    11018507U,	// STNPDi
    11542795U,	// STNPQi
    12067083U,	// STNPSi
    12067083U,	// STNPWi
    11018507U,	// STNPXi
    256325U,	// STNT1B_ZRI
    4549U,	// STNT1B_ZRR
    256325U,	// STNT1D_ZRI
    4613U,	// STNT1D_ZRR
    256325U,	// STNT1H_ZRI
    4677U,	// STNT1H_ZRR
    256325U,	// STNT1W_ZRI
    4933U,	// STNT1W_ZRR
    11018507U,	// STPDi
    12847435U,	// STPDpost
    180365643U,	// STPDpre
    11542795U,	// STPQi
    13371723U,	// STPQpost
    180889931U,	// STPQpre
    12067083U,	// STPSi
    13896011U,	// STPSpost
    181414219U,	// STPSpre
    12067083U,	// STPWi
    13896011U,	// STPWpost
    181414219U,	// STPWpre
    11018507U,	// STPXi
    12847435U,	// STPXpost
    180365643U,	// STPXpre
    29U,	// STRBBpost
    272709U,	// STRBBpre
    14164229U,	// STRBBroW
    14688517U,	// STRBBroX
    5189U,	// STRBBui
    29U,	// STRBpost
    272709U,	// STRBpre
    14164229U,	// STRBroW
    14688517U,	// STRBroX
    5189U,	// STRBui
    29U,	// STRDpost
    272709U,	// STRDpre
    15212805U,	// STRDroW
    15737093U,	// STRDroX
    5253U,	// STRDui
    29U,	// STRHHpost
    272709U,	// STRHHpre
    16261381U,	// STRHHroW
    16785669U,	// STRHHroX
    5317U,	// STRHHui
    29U,	// STRHpost
    272709U,	// STRHpre
    16261381U,	// STRHroW
    16785669U,	// STRHroX
    5317U,	// STRHui
    29U,	// STRQpost
    272709U,	// STRQpre
    17309957U,	// STRQroW
    17834245U,	// STRQroX
    5381U,	// STRQui
    29U,	// STRSpost
    272709U,	// STRSpre
    18358533U,	// STRSroW
    18882821U,	// STRSroX
    5445U,	// STRSui
    29U,	// STRWpost
    272709U,	// STRWpre
    18358533U,	// STRWroW
    18882821U,	// STRWroX
    5445U,	// STRWui
    29U,	// STRXpost
    272709U,	// STRXpre
    15212805U,	// STRXroW
    15737093U,	// STRXroX
    5253U,	// STRXui
    254213U,	// STR_PXI
    254213U,	// STR_ZXI
    114949U,	// STTRBi
    114949U,	// STTRHi
    114949U,	// STTRWi
    114949U,	// STTRXi
    114949U,	// STURBBi
    114949U,	// STURBi
    114949U,	// STURDi
    114949U,	// STURHHi
    114949U,	// STURHi
    114949U,	// STURQi
    114949U,	// STURSi
    114949U,	// STURWi
    114949U,	// STURXi
    286981U,	// STXPW
    286981U,	// STXPX
    114955U,	// STXRB
    114955U,	// STXRH
    114955U,	// STXRW
    114955U,	// STXRX
    0U,	// STZ2GOffset
    1U,	// STZ2GPostIndex
    28U,	// STZ2GPreIndex
    0U,	// STZGOffset
    1U,	// STZGPostIndex
    28U,	// STZGPreIndex
    8517U,	// SUBG
    16773U,	// SUBHNv2i64_v2i32
    16837U,	// SUBHNv2i64_v4i32
    24966U,	// SUBHNv4i32_v4i16
    25030U,	// SUBHNv4i32_v8i16
    33222U,	// SUBHNv8i16_v16i8
    33158U,	// SUBHNv8i16_v8i8
    261U,	// SUBP
    261U,	// SUBPS
    709U,	// SUBR_ZI_B
    773U,	// SUBR_ZI_D
    9U,	// SUBR_ZI_H
    837U,	// SUBR_ZI_S
    533376U,	// SUBR_ZPmZ_B
    1057728U,	// SUBR_ZPmZ_D
    1655817U,	// SUBR_ZPmZ_H
    2106432U,	// SUBR_ZPmZ_S
    517U,	// SUBSWri
    0U,	// SUBSWrr
    581U,	// SUBSWrs
    645U,	// SUBSWrx
    517U,	// SUBSXri
    0U,	// SUBSXrr
    581U,	// SUBSXrs
    645U,	// SUBSXrx
    73989U,	// SUBSXrx64
    517U,	// SUBWri
    0U,	// SUBWrr
    581U,	// SUBWrs
    645U,	// SUBWrx
    517U,	// SUBXri
    0U,	// SUBXrr
    581U,	// SUBXrs
    645U,	// SUBXrx
    73989U,	// SUBXrx64
    709U,	// SUB_ZI_B
    773U,	// SUB_ZI_D
    9U,	// SUB_ZI_H
    837U,	// SUB_ZI_S
    533376U,	// SUB_ZPmZ_B
    1057728U,	// SUB_ZPmZ_D
    1655817U,	// SUB_ZPmZ_H
    2106432U,	// SUB_ZPmZ_S
    901U,	// SUB_ZZZ_B
    965U,	// SUB_ZZZ_D
    137U,	// SUB_ZZZ_H
    1093U,	// SUB_ZZZ_S
    41351U,	// SUBv16i8
    261U,	// SUBv1i64
    49543U,	// SUBv2i32
    16773U,	// SUBv2i64
    57736U,	// SUBv4i16
    24966U,	// SUBv4i32
    33158U,	// SUBv8i16
    65928U,	// SUBv8i8
    1U,	// SUNPKHI_ZZ_D
    0U,	// SUNPKHI_ZZ_H
    1U,	// SUNPKHI_ZZ_S
    1U,	// SUNPKLO_ZZ_D
    0U,	// SUNPKLO_ZZ_H
    1U,	// SUNPKLO_ZZ_S
    1U,	// SUQADDv16i8
    1U,	// SUQADDv1i16
    1U,	// SUQADDv1i32
    1U,	// SUQADDv1i64
    1U,	// SUQADDv1i8
    2U,	// SUQADDv2i32
    2U,	// SUQADDv2i64
    3U,	// SUQADDv4i16
    3U,	// SUQADDv4i32
    4U,	// SUQADDv8i16
    4U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    64U,	// SXTB_ZPmZ_D
    128U,	// SXTB_ZPmZ_H
    192U,	// SXTB_ZPmZ_S
    64U,	// SXTH_ZPmZ_D
    192U,	// SXTH_ZPmZ_S
    64U,	// SXTW_ZPmZ_D
    5637U,	// SYSLxt
    0U,	// SYSxt
    0U,	// SpeculationSafeValueW
    0U,	// SpeculationSafeValueX
    0U,	// TBL_ZZZ_B
    0U,	// TBL_ZZZ_D
    0U,	// TBL_ZZZ_H
    0U,	// TBL_ZZZ_S
    1U,	// TBLv16i8Four
    1U,	// TBLv16i8One
    1U,	// TBLv16i8Three
    1U,	// TBLv16i8Two
    4U,	// TBLv8i8Four
    4U,	// TBLv8i8One
    4U,	// TBLv8i8Three
    4U,	// TBLv8i8Two
    5701U,	// TBNZW
    5701U,	// TBNZX
    1U,	// TBXv16i8Four
    1U,	// TBXv16i8One
    1U,	// TBXv16i8Three
    1U,	// TBXv16i8Two
    4U,	// TBXv8i8Four
    4U,	// TBXv8i8One
    4U,	// TBXv8i8Three
    4U,	// TBXv8i8Two
    5701U,	// TBZW
    5701U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TCRETURNriALL
    0U,	// TCRETURNriBTI
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    901U,	// TRN1_PPP_B
    965U,	// TRN1_PPP_D
    137U,	// TRN1_PPP_H
    1093U,	// TRN1_PPP_S
    901U,	// TRN1_ZZZ_B
    965U,	// TRN1_ZZZ_D
    137U,	// TRN1_ZZZ_H
    1093U,	// TRN1_ZZZ_S
    41351U,	// TRN1v16i8
    49543U,	// TRN1v2i32
    16773U,	// TRN1v2i64
    57736U,	// TRN1v4i16
    24966U,	// TRN1v4i32
    33158U,	// TRN1v8i16
    65928U,	// TRN1v8i8
    901U,	// TRN2_PPP_B
    965U,	// TRN2_PPP_D
    137U,	// TRN2_PPP_H
    1093U,	// TRN2_PPP_S
    901U,	// TRN2_ZZZ_B
    965U,	// TRN2_ZZZ_D
    137U,	// TRN2_ZZZ_H
    1093U,	// TRN2_ZZZ_S
    41351U,	// TRN2v16i8
    49543U,	// TRN2v2i32
    16773U,	// TRN2v2i64
    57736U,	// TRN2v4i16
    24966U,	// TRN2v4i32
    33158U,	// TRN2v8i16
    65928U,	// TRN2v8i8
    0U,	// TSB
    41415U,	// UABALv16i8_v8i16
    49607U,	// UABALv2i32_v2i64
    57800U,	// UABALv4i16_v4i32
    25030U,	// UABALv4i32_v2i64
    33222U,	// UABALv8i16_v4i32
    65992U,	// UABALv8i8_v8i16
    41415U,	// UABAv16i8
    49607U,	// UABAv2i32
    57800U,	// UABAv4i16
    25030U,	// UABAv4i32
    33222U,	// UABAv8i16
    65992U,	// UABAv8i8
    41351U,	// UABDLv16i8_v8i16
    49543U,	// UABDLv2i32_v2i64
    57736U,	// UABDLv4i16_v4i32
    24966U,	// UABDLv4i32_v2i64
    33158U,	// UABDLv8i16_v4i32
    65928U,	// UABDLv8i8_v8i16
    533376U,	// UABD_ZPmZ_B
    1057728U,	// UABD_ZPmZ_D
    1655817U,	// UABD_ZPmZ_H
    2106432U,	// UABD_ZPmZ_S
    41351U,	// UABDv16i8
    49543U,	// UABDv2i32
    57736U,	// UABDv4i16
    24966U,	// UABDv4i32
    33158U,	// UABDv8i16
    65928U,	// UABDv8i8
    1U,	// UADALPv16i8_v8i16
    2U,	// UADALPv2i32_v1i64
    3U,	// UADALPv4i16_v2i32
    3U,	// UADALPv4i32_v2i64
    4U,	// UADALPv8i16_v4i32
    4U,	// UADALPv8i8_v4i16
    1U,	// UADDLPv16i8_v8i16
    2U,	// UADDLPv2i32_v1i64
    3U,	// UADDLPv4i16_v2i32
    3U,	// UADDLPv4i32_v2i64
    4U,	// UADDLPv8i16_v4i32
    4U,	// UADDLPv8i8_v4i16
    1U,	// UADDLVv16i8v
    3U,	// UADDLVv4i16v
    3U,	// UADDLVv4i32v
    4U,	// UADDLVv8i16v
    4U,	// UADDLVv8i8v
    41351U,	// UADDLv16i8_v8i16
    49543U,	// UADDLv2i32_v2i64
    57736U,	// UADDLv4i16_v4i32
    24966U,	// UADDLv4i32_v2i64
    33158U,	// UADDLv8i16_v4i32
    65928U,	// UADDLv8i8_v8i16
    901U,	// UADDV_VPZ_B
    965U,	// UADDV_VPZ_D
    2309U,	// UADDV_VPZ_H
    1093U,	// UADDV_VPZ_S
    41350U,	// UADDWv16i8_v8i16
    49541U,	// UADDWv2i32_v2i64
    57734U,	// UADDWv4i16_v4i32
    24965U,	// UADDWv4i32_v2i64
    33158U,	// UADDWv8i16_v4i32
    65926U,	// UADDWv8i8_v8i16
    8453U,	// UBFMWri
    8453U,	// UBFMXri
    261U,	// UCVTFSWDri
    261U,	// UCVTFSWHri
    261U,	// UCVTFSWSri
    261U,	// UCVTFSXDri
    261U,	// UCVTFSXHri
    261U,	// UCVTFSXSri
    1U,	// UCVTFUWDri
    1U,	// UCVTFUWHri
    1U,	// UCVTFUWSri
    1U,	// UCVTFUXDri
    1U,	// UCVTFUXHri
    1U,	// UCVTFUXSri
    64U,	// UCVTF_ZPmZ_DtoD
    153U,	// UCVTF_ZPmZ_DtoH
    64U,	// UCVTF_ZPmZ_DtoS
    128U,	// UCVTF_ZPmZ_HtoH
    192U,	// UCVTF_ZPmZ_StoD
    152U,	// UCVTF_ZPmZ_StoH
    192U,	// UCVTF_ZPmZ_StoS
    261U,	// UCVTFd
    261U,	// UCVTFh
    261U,	// UCVTFs
    1U,	// UCVTFv1i16
    1U,	// UCVTFv1i32
    1U,	// UCVTFv1i64
    2U,	// UCVTFv2f32
    2U,	// UCVTFv2f64
    263U,	// UCVTFv2i32_shift
    261U,	// UCVTFv2i64_shift
    3U,	// UCVTFv4f16
    3U,	// UCVTFv4f32
    264U,	// UCVTFv4i16_shift
    262U,	// UCVTFv4i32_shift
    4U,	// UCVTFv8f16
    262U,	// UCVTFv8i16_shift
    0U,	// UDF
    1057728U,	// UDIVR_ZPmZ_D
    2106432U,	// UDIVR_ZPmZ_S
    261U,	// UDIVWr
    261U,	// UDIVXr
    1057728U,	// UDIV_ZPmZ_D
    2106432U,	// UDIV_ZPmZ_S
    42U,	// UDOT_ZZZI_D
    42U,	// UDOT_ZZZI_S
    1U,	// UDOT_ZZZ_D
    1U,	// UDOT_ZZZ_S
    278983U,	// UDOTlanev16i8
    278984U,	// UDOTlanev8i8
    41415U,	// UDOTv16i8
    65992U,	// UDOTv8i8
    41351U,	// UHADDv16i8
    49543U,	// UHADDv2i32
    57736U,	// UHADDv4i16
    24966U,	// UHADDv4i32
    33158U,	// UHADDv8i16
    65928U,	// UHADDv8i8
    41351U,	// UHSUBv16i8
    49543U,	// UHSUBv2i32
    57736U,	// UHSUBv4i16
    24966U,	// UHSUBv4i32
    33158U,	// UHSUBv8i16
    65928U,	// UHSUBv8i8
    8453U,	// UMADDLrrr
    41351U,	// UMAXPv16i8
    49543U,	// UMAXPv2i32
    57736U,	// UMAXPv4i16
    24966U,	// UMAXPv4i32
    33158U,	// UMAXPv8i16
    65928U,	// UMAXPv8i8
    901U,	// UMAXV_VPZ_B
    965U,	// UMAXV_VPZ_D
    2309U,	// UMAXV_VPZ_H
    1093U,	// UMAXV_VPZ_S
    1U,	// UMAXVv16i8v
    3U,	// UMAXVv4i16v
    3U,	// UMAXVv4i32v
    4U,	// UMAXVv8i16v
    4U,	// UMAXVv8i8v
    5765U,	// UMAX_ZI_B
    5765U,	// UMAX_ZI_D
    46U,	// UMAX_ZI_H
    5765U,	// UMAX_ZI_S
    533376U,	// UMAX_ZPmZ_B
    1057728U,	// UMAX_ZPmZ_D
    1655817U,	// UMAX_ZPmZ_H
    2106432U,	// UMAX_ZPmZ_S
    41351U,	// UMAXv16i8
    49543U,	// UMAXv2i32
    57736U,	// UMAXv4i16
    24966U,	// UMAXv4i32
    33158U,	// UMAXv8i16
    65928U,	// UMAXv8i8
    41351U,	// UMINPv16i8
    49543U,	// UMINPv2i32
    57736U,	// UMINPv4i16
    24966U,	// UMINPv4i32
    33158U,	// UMINPv8i16
    65928U,	// UMINPv8i8
    901U,	// UMINV_VPZ_B
    965U,	// UMINV_VPZ_D
    2309U,	// UMINV_VPZ_H
    1093U,	// UMINV_VPZ_S
    1U,	// UMINVv16i8v
    3U,	// UMINVv4i16v
    3U,	// UMINVv4i32v
    4U,	// UMINVv8i16v
    4U,	// UMINVv8i8v
    5765U,	// UMIN_ZI_B
    5765U,	// UMIN_ZI_D
    46U,	// UMIN_ZI_H
    5765U,	// UMIN_ZI_S
    533376U,	// UMIN_ZPmZ_B
    1057728U,	// UMIN_ZPmZ_D
    1655817U,	// UMIN_ZPmZ_H
    2106432U,	// UMIN_ZPmZ_S
    41351U,	// UMINv16i8
    49543U,	// UMINv2i32
    57736U,	// UMINv4i16
    24966U,	// UMINv4i32
    33158U,	// UMINv8i16
    65928U,	// UMINv8i8
    41415U,	// UMLALv16i8_v8i16
    9126343U,	// UMLALv2i32_indexed
    49607U,	// UMLALv2i32_v2i64
    9118152U,	// UMLALv4i16_indexed
    57800U,	// UMLALv4i16_v4i32
    9126342U,	// UMLALv4i32_indexed
    25030U,	// UMLALv4i32_v2i64
    9118150U,	// UMLALv8i16_indexed
    33222U,	// UMLALv8i16_v4i32
    65992U,	// UMLALv8i8_v8i16
    41415U,	// UMLSLv16i8_v8i16
    9126343U,	// UMLSLv2i32_indexed
    49607U,	// UMLSLv2i32_v2i64
    9118152U,	// UMLSLv4i16_indexed
    57800U,	// UMLSLv4i16_v4i32
    9126342U,	// UMLSLv4i32_indexed
    25030U,	// UMLSLv4i32_v2i64
    9118150U,	// UMLSLv8i16_indexed
    33222U,	// UMLSLv8i16_v4i32
    65992U,	// UMLSLv8i8_v8i16
    2834U,	// UMOVvi16
    2834U,	// UMOVvi32
    2835U,	// UMOVvi64
    2835U,	// UMOVvi8
    8453U,	// UMSUBLrrr
    533376U,	// UMULH_ZPmZ_B
    1057728U,	// UMULH_ZPmZ_D
    1655817U,	// UMULH_ZPmZ_H
    2106432U,	// UMULH_ZPmZ_S
    261U,	// UMULHrr
    41351U,	// UMULLv16i8_v8i16
    10174855U,	// UMULLv2i32_indexed
    49543U,	// UMULLv2i32_v2i64
    10166664U,	// UMULLv4i16_indexed
    57736U,	// UMULLv4i16_v4i32
    10174854U,	// UMULLv4i32_indexed
    24966U,	// UMULLv4i32_v2i64
    10166662U,	// UMULLv8i16_indexed
    33158U,	// UMULLv8i16_v4i32
    65928U,	// UMULLv8i8_v8i16
    709U,	// UQADD_ZI_B
    773U,	// UQADD_ZI_D
    9U,	// UQADD_ZI_H
    837U,	// UQADD_ZI_S
    901U,	// UQADD_ZZZ_B
    965U,	// UQADD_ZZZ_D
    137U,	// UQADD_ZZZ_H
    1093U,	// UQADD_ZZZ_S
    41351U,	// UQADDv16i8
    261U,	// UQADDv1i16
    261U,	// UQADDv1i32
    261U,	// UQADDv1i64
    261U,	// UQADDv1i8
    49543U,	// UQADDv2i32
    16773U,	// UQADDv2i64
    57736U,	// UQADDv4i16
    24966U,	// UQADDv4i32
    33158U,	// UQADDv8i16
    65928U,	// UQADDv8i8
    0U,	// UQDECB_WPiI
    0U,	// UQDECB_XPiI
    0U,	// UQDECD_WPiI
    0U,	// UQDECD_XPiI
    0U,	// UQDECD_ZPiI
    0U,	// UQDECH_WPiI
    0U,	// UQDECH_XPiI
    0U,	// UQDECH_ZPiI
    1U,	// UQDECP_WP_B
    1U,	// UQDECP_WP_D
    1U,	// UQDECP_WP_H
    1U,	// UQDECP_WP_S
    1U,	// UQDECP_XP_B
    1U,	// UQDECP_XP_D
    1U,	// UQDECP_XP_H
    1U,	// UQDECP_XP_S
    1U,	// UQDECP_ZP_D
    0U,	// UQDECP_ZP_H
    1U,	// UQDECP_ZP_S
    0U,	// UQDECW_WPiI
    0U,	// UQDECW_XPiI
    0U,	// UQDECW_ZPiI
    0U,	// UQINCB_WPiI
    0U,	// UQINCB_XPiI
    0U,	// UQINCD_WPiI
    0U,	// UQINCD_XPiI
    0U,	// UQINCD_ZPiI
    0U,	// UQINCH_WPiI
    0U,	// UQINCH_XPiI
    0U,	// UQINCH_ZPiI
    1U,	// UQINCP_WP_B
    1U,	// UQINCP_WP_D
    1U,	// UQINCP_WP_H
    1U,	// UQINCP_WP_S
    1U,	// UQINCP_XP_B
    1U,	// UQINCP_XP_D
    1U,	// UQINCP_XP_H
    1U,	// UQINCP_XP_S
    1U,	// UQINCP_ZP_D
    0U,	// UQINCP_ZP_H
    1U,	// UQINCP_ZP_S
    0U,	// UQINCW_WPiI
    0U,	// UQINCW_XPiI
    0U,	// UQINCW_ZPiI
    41351U,	// UQRSHLv16i8
    261U,	// UQRSHLv1i16
    261U,	// UQRSHLv1i32
    261U,	// UQRSHLv1i64
    261U,	// UQRSHLv1i8
    49543U,	// UQRSHLv2i32
    16773U,	// UQRSHLv2i64
    57736U,	// UQRSHLv4i16
    24966U,	// UQRSHLv4i32
    33158U,	// UQRSHLv8i16
    65928U,	// UQRSHLv8i8
    261U,	// UQRSHRNb
    261U,	// UQRSHRNh
    261U,	// UQRSHRNs
    2374U,	// UQRSHRNv16i8_shift
    261U,	// UQRSHRNv2i32_shift
    262U,	// UQRSHRNv4i16_shift
    2373U,	// UQRSHRNv4i32_shift
    2374U,	// UQRSHRNv8i16_shift
    262U,	// UQRSHRNv8i8_shift
    261U,	// UQSHLb
    261U,	// UQSHLd
    261U,	// UQSHLh
    261U,	// UQSHLs
    41351U,	// UQSHLv16i8
    263U,	// UQSHLv16i8_shift
    261U,	// UQSHLv1i16
    261U,	// UQSHLv1i32
    261U,	// UQSHLv1i64
    261U,	// UQSHLv1i8
    49543U,	// UQSHLv2i32
    263U,	// UQSHLv2i32_shift
    16773U,	// UQSHLv2i64
    261U,	// UQSHLv2i64_shift
    57736U,	// UQSHLv4i16
    264U,	// UQSHLv4i16_shift
    24966U,	// UQSHLv4i32
    262U,	// UQSHLv4i32_shift
    33158U,	// UQSHLv8i16
    262U,	// UQSHLv8i16_shift
    65928U,	// UQSHLv8i8
    264U,	// UQSHLv8i8_shift
    261U,	// UQSHRNb
    261U,	// UQSHRNh
    261U,	// UQSHRNs
    2374U,	// UQSHRNv16i8_shift
    261U,	// UQSHRNv2i32_shift
    262U,	// UQSHRNv4i16_shift
    2373U,	// UQSHRNv4i32_shift
    2374U,	// UQSHRNv8i16_shift
    262U,	// UQSHRNv8i8_shift
    709U,	// UQSUB_ZI_B
    773U,	// UQSUB_ZI_D
    9U,	// UQSUB_ZI_H
    837U,	// UQSUB_ZI_S
    901U,	// UQSUB_ZZZ_B
    965U,	// UQSUB_ZZZ_D
    137U,	// UQSUB_ZZZ_H
    1093U,	// UQSUB_ZZZ_S
    41351U,	// UQSUBv16i8
    261U,	// UQSUBv1i16
    261U,	// UQSUBv1i32
    261U,	// UQSUBv1i64
    261U,	// UQSUBv1i8
    49543U,	// UQSUBv2i32
    16773U,	// UQSUBv2i64
    57736U,	// UQSUBv4i16
    24966U,	// UQSUBv4i32
    33158U,	// UQSUBv8i16
    65928U,	// UQSUBv8i8
    4U,	// UQXTNv16i8
    1U,	// UQXTNv1i16
    1U,	// UQXTNv1i32
    1U,	// UQXTNv1i8
    2U,	// UQXTNv2i32
    3U,	// UQXTNv4i16
    2U,	// UQXTNv4i32
    3U,	// UQXTNv8i16
    4U,	// UQXTNv8i8
    2U,	// URECPEv2i32
    3U,	// URECPEv4i32
    41351U,	// URHADDv16i8
    49543U,	// URHADDv2i32
    57736U,	// URHADDv4i16
    24966U,	// URHADDv4i32
    33158U,	// URHADDv8i16
    65928U,	// URHADDv8i8
    41351U,	// URSHLv16i8
    261U,	// URSHLv1i64
    49543U,	// URSHLv2i32
    16773U,	// URSHLv2i64
    57736U,	// URSHLv4i16
    24966U,	// URSHLv4i32
    33158U,	// URSHLv8i16
    65928U,	// URSHLv8i8
    261U,	// URSHRd
    263U,	// URSHRv16i8_shift
    263U,	// URSHRv2i32_shift
    261U,	// URSHRv2i64_shift
    264U,	// URSHRv4i16_shift
    262U,	// URSHRv4i32_shift
    262U,	// URSHRv8i16_shift
    264U,	// URSHRv8i8_shift
    2U,	// URSQRTEv2i32
    3U,	// URSQRTEv4i32
    2373U,	// URSRAd
    2375U,	// URSRAv16i8_shift
    2375U,	// URSRAv2i32_shift
    2373U,	// URSRAv2i64_shift
    2376U,	// URSRAv4i16_shift
    2374U,	// URSRAv4i32_shift
    2374U,	// URSRAv8i16_shift
    2376U,	// URSRAv8i8_shift
    263U,	// USHLLv16i8_shift
    263U,	// USHLLv2i32_shift
    264U,	// USHLLv4i16_shift
    262U,	// USHLLv4i32_shift
    262U,	// USHLLv8i16_shift
    264U,	// USHLLv8i8_shift
    41351U,	// USHLv16i8
    261U,	// USHLv1i64
    49543U,	// USHLv2i32
    16773U,	// USHLv2i64
    57736U,	// USHLv4i16
    24966U,	// USHLv4i32
    33158U,	// USHLv8i16
    65928U,	// USHLv8i8
    261U,	// USHRd
    263U,	// USHRv16i8_shift
    263U,	// USHRv2i32_shift
    261U,	// USHRv2i64_shift
    264U,	// USHRv4i16_shift
    262U,	// USHRv4i32_shift
    262U,	// USHRv8i16_shift
    264U,	// USHRv8i8_shift
    1U,	// USQADDv16i8
    1U,	// USQADDv1i16
    1U,	// USQADDv1i32
    1U,	// USQADDv1i64
    1U,	// USQADDv1i8
    2U,	// USQADDv2i32
    2U,	// USQADDv2i64
    3U,	// USQADDv4i16
    3U,	// USQADDv4i32
    4U,	// USQADDv8i16
    4U,	// USQADDv8i8
    2373U,	// USRAd
    2375U,	// USRAv16i8_shift
    2375U,	// USRAv2i32_shift
    2373U,	// USRAv2i64_shift
    2376U,	// USRAv4i16_shift
    2374U,	// USRAv4i32_shift
    2374U,	// USRAv8i16_shift
    2376U,	// USRAv8i8_shift
    41351U,	// USUBLv16i8_v8i16
    49543U,	// USUBLv2i32_v2i64
    57736U,	// USUBLv4i16_v4i32
    24966U,	// USUBLv4i32_v2i64
    33158U,	// USUBLv8i16_v4i32
    65928U,	// USUBLv8i8_v8i16
    41350U,	// USUBWv16i8_v8i16
    49541U,	// USUBWv2i32_v2i64
    57734U,	// USUBWv4i16_v4i32
    24965U,	// USUBWv4i32_v2i64
    33158U,	// USUBWv8i16_v4i32
    65926U,	// USUBWv8i8_v8i16
    1U,	// UUNPKHI_ZZ_D
    0U,	// UUNPKHI_ZZ_H
    1U,	// UUNPKHI_ZZ_S
    1U,	// UUNPKLO_ZZ_D
    0U,	// UUNPKLO_ZZ_H
    1U,	// UUNPKLO_ZZ_S
    64U,	// UXTB_ZPmZ_D
    128U,	// UXTB_ZPmZ_H
    192U,	// UXTB_ZPmZ_S
    64U,	// UXTH_ZPmZ_D
    192U,	// UXTH_ZPmZ_S
    64U,	// UXTW_ZPmZ_D
    901U,	// UZP1_PPP_B
    965U,	// UZP1_PPP_D
    137U,	// UZP1_PPP_H
    1093U,	// UZP1_PPP_S
    901U,	// UZP1_ZZZ_B
    965U,	// UZP1_ZZZ_D
    137U,	// UZP1_ZZZ_H
    1093U,	// UZP1_ZZZ_S
    41351U,	// UZP1v16i8
    49543U,	// UZP1v2i32
    16773U,	// UZP1v2i64
    57736U,	// UZP1v4i16
    24966U,	// UZP1v4i32
    33158U,	// UZP1v8i16
    65928U,	// UZP1v8i8
    901U,	// UZP2_PPP_B
    965U,	// UZP2_PPP_D
    137U,	// UZP2_PPP_H
    1093U,	// UZP2_PPP_S
    901U,	// UZP2_ZZZ_B
    965U,	// UZP2_ZZZ_D
    137U,	// UZP2_ZZZ_H
    1093U,	// UZP2_ZZZ_S
    41351U,	// UZP2v16i8
    49543U,	// UZP2v2i32
    16773U,	// UZP2v2i64
    57736U,	// UZP2v4i16
    24966U,	// UZP2v4i32
    33158U,	// UZP2v8i16
    65928U,	// UZP2v8i8
    261U,	// WHILELE_PWW_B
    261U,	// WHILELE_PWW_D
    11U,	// WHILELE_PWW_H
    261U,	// WHILELE_PWW_S
    261U,	// WHILELE_PXX_B
    261U,	// WHILELE_PXX_D
    11U,	// WHILELE_PXX_H
    261U,	// WHILELE_PXX_S
    261U,	// WHILELO_PWW_B
    261U,	// WHILELO_PWW_D
    11U,	// WHILELO_PWW_H
    261U,	// WHILELO_PWW_S
    261U,	// WHILELO_PXX_B
    261U,	// WHILELO_PXX_D
    11U,	// WHILELO_PXX_H
    261U,	// WHILELO_PXX_S
    261U,	// WHILELS_PWW_B
    261U,	// WHILELS_PWW_D
    11U,	// WHILELS_PWW_H
    261U,	// WHILELS_PWW_S
    261U,	// WHILELS_PXX_B
    261U,	// WHILELS_PXX_D
    11U,	// WHILELS_PXX_H
    261U,	// WHILELS_PXX_S
    261U,	// WHILELT_PWW_B
    261U,	// WHILELT_PWW_D
    11U,	// WHILELT_PWW_H
    261U,	// WHILELT_PWW_S
    261U,	// WHILELT_PXX_B
    261U,	// WHILELT_PXX_D
    11U,	// WHILELT_PXX_H
    261U,	// WHILELT_PXX_S
    0U,	// WRFFR
    0U,	// XAFLAG
    156037U,	// XAR
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    4U,	// XTNv16i8
    2U,	// XTNv2i32
    3U,	// XTNv4i16
    2U,	// XTNv4i32
    3U,	// XTNv8i16
    4U,	// XTNv8i8
    901U,	// ZIP1_PPP_B
    965U,	// ZIP1_PPP_D
    137U,	// ZIP1_PPP_H
    1093U,	// ZIP1_PPP_S
    901U,	// ZIP1_ZZZ_B
    965U,	// ZIP1_ZZZ_D
    137U,	// ZIP1_ZZZ_H
    1093U,	// ZIP1_ZZZ_S
    41351U,	// ZIP1v16i8
    49543U,	// ZIP1v2i32
    16773U,	// ZIP1v2i64
    57736U,	// ZIP1v4i16
    24966U,	// ZIP1v4i32
    33158U,	// ZIP1v8i16
    65928U,	// ZIP1v8i8
    901U,	// ZIP2_PPP_B
    965U,	// ZIP2_PPP_D
    137U,	// ZIP2_PPP_H
    1093U,	// ZIP2_PPP_S
    901U,	// ZIP2_ZZZ_B
    965U,	// ZIP2_ZZZ_D
    137U,	// ZIP2_ZZZ_H
    1093U,	// ZIP2_ZZZ_S
    41351U,	// ZIP2v16i8
    49543U,	// ZIP2v2i32
    16773U,	// ZIP2v2i64
    57736U,	// ZIP2v4i16
    24966U,	// ZIP2v4i32
    33158U,	// ZIP2v8i16
    65928U,	// ZIP2v8i8
    901U,	// anonymous_1359
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 6 bits for 54 unique commands.
  switch ((Bits >> 13) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // ABS_ZPmZ_B, ADD_ZI_B, ADD_ZPmZ_B, ADD_ZZZ_B, ANDS_PPzPP, AND_PPzPP, AN...
    printSVERegOp<'b'>(MI, 0, STI, O);
    break;
  case 2:
    // ABS_ZPmZ_D, ADD_ZI_D, ADD_ZPmZ_D, ADD_ZZZ_D, ADR_LSL_ZZZ_D_0, ADR_LSL_...
    printSVERegOp<'d'>(MI, 0, STI, O);
    break;
  case 3:
    // ABS_ZPmZ_H, ADD_ZI_H, ADD_ZPmZ_H, ADD_ZZZ_H, AND_ZPmZ_H, ASRD_ZPmI_H, ...
    printSVERegOp<'h'>(MI, 0, STI, O);
    O << ", ";
    break;
  case 4:
    // ABS_ZPmZ_S, ADD_ZI_S, ADD_ZPmZ_S, ADD_ZZZ_S, ADR_LSL_ZZZ_S_0, ADR_LSL_...
    printSVERegOp<'s'>(MI, 0, STI, O);
    break;
  case 5:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O);
    break;
  case 6:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDG, ADDPL_XXI, ADDPv2i64p, A...
    printOperand(MI, 0, STI, O);
    break;
  case 7:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 8:
    // B, BL
    printAlignedLabel(MI, 0, STI, O);
    return;
    break;
  case 9:
    // BRK, DCPS1, DCPS2, DCPS3, HLT, HVC, SMC, SVC
    printImmHex(MI, 0, STI, O);
    return;
    break;
  case 10:
    // Bcc
    printCondCode(MI, 0, STI, O);
    O << "\t";
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 11:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    printOperand(MI, 1, STI, O);
    break;
  case 12:
    // CASPALW, CASPAW, CASPLW, CASPW
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // CASPALX, CASPAX, CASPLX, CASPX
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // DMB, DSB, ISB, TSB
    printBarrierOption(MI, 0, STI, O);
    return;
    break;
  case 15:
    // DUP_ZZI_Q
    printSVERegOp<'q'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'q'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 16:
    // GLD1B_D_IMM_REAL, GLD1B_D_REAL, GLD1B_D_SXTW_REAL, GLD1B_D_UXTW_REAL, ...
    printTypedVectorList<0,'d'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 17:
    // GLD1B_S_IMM_REAL, GLD1B_S_SXTW_REAL, GLD1B_S_UXTW_REAL, GLD1H_S_IMM_RE...
    printTypedVectorList<0,'s'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 18:
    // HINT
    printImm(MI, 0, STI, O);
    return;
    break;
  case 19:
    // LD1B, LD1B_IMM_REAL, LD1RB_IMM, LD1RQ_B, LD1RQ_B_IMM, LD2B, LD2B_IMM, ...
    printTypedVectorList<0,'b'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 20:
    // LD1B_H, LD1B_H_IMM_REAL, LD1H, LD1H_IMM_REAL, LD1RB_H_IMM, LD1RH_IMM, ...
    printTypedVectorList<0,'h'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 21:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 23:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 24:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 25:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 26:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 27:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 28:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 29:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 30:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 31:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 32:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 33:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 34:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 35:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 36:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 37:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 38:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 39:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 40:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 41:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 42:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 43:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 44:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 45:
    // LDR_PXI, LDR_ZXI, MOVPRFX_ZZ, PTEST_PP, STR_PXI, STR_ZXI
    printSVERegOp<>(MI, 0, STI, O);
    break;
  case 46:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 47:
    // MSRpstateImm1, MSRpstateImm4
    printSystemPStateField(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 48:
    // PRFB_D_PZI, PRFB_D_SCALED, PRFB_D_SXTW_SCALED, PRFB_D_UXTW_SCALED, PRF...
    printPrefetchOp<true>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    O << ", [";
    break;
  case 49:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O);
    break;
  case 50:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 51:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 52:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 53:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 56 unique commands.
  switch ((Bits >> 19) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABS_ZPmZ_B, ABS_ZPmZ_D, ABS_ZPmZ_S, ABSv1i64, ADCSWr, ADCSXr, ADCWr, A...
    O << ", ";
    break;
  case 1:
    // ABS_ZPmZ_H, CLS_ZPmZ_H, CLZ_ZPmZ_H, CNOT_ZPmZ_H, CNT_ZPmZ_H, CPY_ZPmI_...
    printSVERegOp<>(MI, 2, STI, O);
    break;
  case 2:
    // ABSv16i8, ADDHNv8i16_v16i8, ADDPv16i8, ADDv16i8, AESDrr, AESErr, AESIM...
    O << ".16b, ";
    break;
  case 3:
    // ABSv2i32, ADDHNv2i64_v2i32, ADDPv2i32, ADDv2i32, BICv2i32, CLSv2i32, C...
    O << ".2s, ";
    break;
  case 4:
    // ABSv2i64, ADDPv2i64, ADDv2i64, CMEQv2i64, CMEQv2i64rz, CMGEv2i64, CMGE...
    O << ".2d, ";
    break;
  case 5:
    // ABSv4i16, ADDHNv4i32_v4i16, ADDPv4i16, ADDv4i16, BICv4i16, CLSv4i16, C...
    O << ".4h, ";
    break;
  case 6:
    // ABSv4i32, ADDHNv2i64_v4i32, ADDPv4i32, ADDv4i32, BICv4i32, CLSv4i32, C...
    O << ".4s, ";
    break;
  case 7:
    // ABSv8i16, ADDHNv4i32_v8i16, ADDPv8i16, ADDv8i16, BICv8i16, CLSv8i16, C...
    O << ".8h, ";
    break;
  case 8:
    // ABSv8i8, ADDHNv8i16_v8i8, ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8...
    O << ".8b, ";
    break;
  case 9:
    // ADD_ZI_H, ADD_ZZZ_H, ASR_WIDE_ZZZ_H, ASR_ZZI_H, DUP_ZZI_H, FADD_ZZZ_H,...
    printSVERegOp<'h'>(MI, 1, STI, O);
    break;
  case 10:
    // ADD_ZPmZ_H, AND_ZPmZ_H, ASRD_ZPmI_H, ASRR_ZPmZ_H, ASR_WIDE_ZPmZ_H, ASR...
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 11:
    // ADR_LSL_ZZZ_D_0, ADR_LSL_ZZZ_D_1, ADR_LSL_ZZZ_D_2, ADR_LSL_ZZZ_D_3, AD...
    O << ", [";
    break;
  case 12:
    // AUTDZA, AUTDZB, AUTIZA, AUTIZB, BLR, BLRAAZ, BLRABZ, BR, BRAAZ, BRABZ,...
    return;
    break;
  case 13:
    // DECH_ZPiI, INCH_ZPiI, SQDECH_ZPiI, SQINCH_ZPiI, UQDECH_ZPiI, UQINCH_ZP...
    printSVEPattern(MI, 2, STI, O);
    O << ", mul ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 14:
    // DUP_ZI_H
    printImm8OptLsl<int16_t>(MI, 1, STI, O);
    return;
    break;
  case 15:
    // DUP_ZR_H, INDEX_II_H, INDEX_IR_H, INDEX_RI_H, INDEX_RR_H, WHILELE_PWW_...
    printOperand(MI, 1, STI, O);
    break;
  case 16:
    // FCMLA_ZZZI_H, FMLA_ZZZI_H, FMLS_ZZZI_H
    printSVERegOp<'h'>(MI, 2, STI, O);
    O << ", ";
    printSVERegOp<'h'>(MI, 3, STI, O);
    printVectorIndex(MI, 4, STI, O);
    break;
  case 17:
    // FCMPDri, FCMPEDri, FCMPEHri, FCMPESri, FCMPHri, FCMPSri
    O << ", #0.0";
    return;
    break;
  case 18:
    // FDUP_ZI_H
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 19:
    // FMOVXDHighr, INSvi64gpr, INSvi64lane
    O << ".d";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 20:
    // GLD1B_D_IMM_REAL, GLD1B_D_REAL, GLD1B_D_SXTW_REAL, GLD1B_D_UXTW_REAL, ...
    O << "/z, [";
    break;
  case 21:
    // INSR_ZR_H, INSR_ZV_H, PRFB_D_SCALED, PRFB_D_SXTW_SCALED, PRFB_D_UXTW_S...
    printOperand(MI, 2, STI, O);
    break;
  case 22:
    // INSvi16gpr, INSvi16lane
    O << ".h";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 23:
    // INSvi32gpr, INSvi32lane
    O << ".s";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 24:
    // INSvi8gpr, INSvi8lane
    O << ".b";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 25:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O);
    return;
    break;
  case 26:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O);
    return;
    break;
  case 27:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O);
    return;
    break;
  case 28:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O);
    return;
    break;
  case 29:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O);
    return;
    break;
  case 30:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O);
    return;
    break;
  case 31:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O);
    return;
    break;
  case 32:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O);
    return;
    break;
  case 33:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O);
    return;
    break;
  case 34:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']';
    return;
    break;
  case 35:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O);
    return;
    break;
  case 36:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O);
    return;
    break;
  case 37:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O);
    return;
    break;
  case 38:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O);
    return;
    break;
  case 39:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O);
    return;
    break;
  case 40:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O);
    return;
    break;
  case 41:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O);
    return;
    break;
  case 42:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O);
    return;
    break;
  case 43:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O);
    return;
    break;
  case 44:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O);
    return;
    break;
  case 45:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O);
    return;
    break;
  case 46:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O);
    return;
    break;
  case 47:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O);
    return;
    break;
  case 48:
    // PMULLv1i64, PMULLv2i64
    O << ".1q, ";
    printVRegOperand(MI, 1, STI, O);
    break;
  case 49:
    // PRFB_D_PZI, PRFD_D_PZI, PRFH_D_PZI, PRFW_D_PZI
    printSVERegOp<'d'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 50:
    // PRFB_S_PZI, PRFD_S_PZI, PRFH_S_PZI, PRFW_S_PZI
    printSVERegOp<'s'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 51:
    // PTRUES_H, PTRUE_H
    printSVEPattern(MI, 1, STI, O);
    return;
    break;
  case 52:
    // PUNPKHI_PP, PUNPKLO_PP, SUNPKHI_ZZ_H, SUNPKLO_ZZ_H, UUNPKHI_ZZ_H, UUNP...
    printSVERegOp<'b'>(MI, 1, STI, O);
    return;
    break;
  case 53:
    // SADALPv2i32_v1i64, SADDLPv2i32_v1i64, UADALPv2i32_v1i64, UADDLPv2i32_v...
    O << ".1d, ";
    break;
  case 54:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2GPostIndex, ST2i...
    O << "], ";
    break;
  case 55:
    // TBL_ZZZ_H
    printTypedVectorList<0,'h'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'h'>(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 2 encoded into 6 bits for 59 unique commands.
  switch ((Bits >> 25) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABS_ZPmZ_B, ABS_ZPmZ_D, ABS_ZPmZ_S, BRKA_PPmP, BRKB_PPmP, CLS_ZPmZ_B, ...
    printSVERegOp<>(MI, 2, STI, O);
    break;
  case 1:
    // ABS_ZPmZ_H, ADD_ZPmZ_H, AND_ZPmZ_H, ASRD_ZPmI_H, ASRR_ZPmZ_H, ASR_WIDE...
    O << "/m, ";
    break;
  case 2:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 3:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDG, ADDPL_XXI, ADDSWri, ADDS...
    printOperand(MI, 1, STI, O);
    break;
  case 4:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 5:
    // ADD_ZI_B, ADD_ZZZ_B, ASR_WIDE_ZZZ_B, ASR_ZZI_B, DECP_XP_B, DUP_ZZI_B, ...
    printSVERegOp<'b'>(MI, 1, STI, O);
    break;
  case 6:
    // ADD_ZI_D, ADD_ZZZ_D, ADR_LSL_ZZZ_D_0, ADR_LSL_ZZZ_D_1, ADR_LSL_ZZZ_D_2...
    printSVERegOp<'d'>(MI, 1, STI, O);
    break;
  case 7:
    // ADD_ZI_H, ADD_ZZZ_H, ASR_WIDE_ZZZ_H, ASR_ZZI_H, CLASTA_ZPZ_H, CLASTB_Z...
    O << ", ";
    break;
  case 8:
    // ADD_ZI_S, ADD_ZZZ_S, ADR_LSL_ZZZ_S_0, ADR_LSL_ZZZ_S_1, ADR_LSL_ZZZ_S_2...
    printSVERegOp<'s'>(MI, 1, STI, O);
    break;
  case 9:
    // ADD_ZPmZ_B, ADD_ZPmZ_D, ADD_ZPmZ_S, ANDS_PPzPP, ANDV_VPZ_B, ANDV_VPZ_D...
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 10:
    // ADRP
    printAdrpLabel(MI, 1, STI, O);
    return;
    break;
  case 11:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 2, STI, O);
    break;
  case 12:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printImm(MI, 2, STI, O);
    printShifter(MI, 3, STI, O);
    return;
    break;
  case 13:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 14:
    // CMPEQ_PPzZI_H, CMPEQ_PPzZZ_H, CMPEQ_WIDE_PPzZZ_H, CMPGE_PPzZI_H, CMPGE...
    O << "/z, ";
    break;
  case 15:
    // CNTB_XPiI, CNTD_XPiI, CNTH_XPiI, CNTW_XPiI, PTRUES_B, PTRUES_D, PTRUES...
    printSVEPattern(MI, 1, STI, O);
    break;
  case 16:
    // DECB_XPiI, DECD_XPiI, DECD_ZPiI, DECH_XPiI, DECW_XPiI, DECW_ZPiI, INCB...
    printSVEPattern(MI, 2, STI, O);
    O << ", mul ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 17:
    // DECP_XP_H, INCP_XP_H, SQDECP_XPWd_H, SQDECP_XP_H, SQINCP_XPWd_H, SQINC...
    printSVERegOp<'h'>(MI, 1, STI, O);
    break;
  case 18:
    // DECP_ZP_H, DUP_ZR_H, FEXPA_ZZ_H, FMLA_ZZZI_H, FMLS_ZZZI_H, FRECPE_ZZ_H...
    return;
    break;
  case 19:
    // DUPM_ZI
    printLogicalImm<int64_t>(MI, 1, STI, O);
    return;
    break;
  case 20:
    // DUP_ZI_B
    printImm8OptLsl<int8_t>(MI, 1, STI, O);
    return;
    break;
  case 21:
    // DUP_ZI_D
    printImm8OptLsl<int64_t>(MI, 1, STI, O);
    return;
    break;
  case 22:
    // DUP_ZI_S
    printImm8OptLsl<int32_t>(MI, 1, STI, O);
    return;
    break;
  case 23:
    // DUP_ZZI_H
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 24:
    // FCMLA_ZZZI_S, FMLA_ZZZI_S, FMLS_ZZZI_S, GLD1B_S_IMM_REAL, GLD1H_S_IMM_...
    printSVERegOp<'s'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 25:
    // FDUP_ZI_D, FDUP_ZI_S, FMOVDi, FMOVHi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_...
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 26:
    // FMLA_ZZZI_D, FMLS_ZZZI_D, GLD1B_D_IMM_REAL, GLD1D_IMM_REAL, GLD1H_D_IM...
    printSVERegOp<'d'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 27:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr, PRFB_D_PZI, PRFB_S_PZI
    printOperand(MI, 3, STI, O);
    break;
  case 28:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O);
    break;
  case 29:
    // LDADDAB, LDADDAH, LDADDALB, LDADDALH, LDADDALW, LDADDALX, LDADDAW, LDA...
    printOperand(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 30:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O);
    return;
    break;
  case 31:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printImm(MI, 1, STI, O);
    break;
  case 32:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O);
    return;
    break;
  case 33:
    // PMULLv1i64
    O << ".1d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".1d";
    return;
    break;
  case 34:
    // PMULLv2i64
    O << ".2d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".2d";
    return;
    break;
  case 35:
    // PRFD_D_PZI, PRFD_S_PZI
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 36:
    // PRFH_D_PZI, PRFH_S_PZI
    printImmScale<2>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 37:
    // PRFW_D_PZI, PRFW_S_PZI
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 38:
    // SDOT_ZZZI_D, SDOT_ZZZ_D, UDOT_ZZZI_D, UDOT_ZZZ_D
    printSVERegOp<'h'>(MI, 2, STI, O);
    O << ", ";
    printSVERegOp<'h'>(MI, 3, STI, O);
    break;
  case 39:
    // SDOT_ZZZI_S, SDOT_ZZZ_S, UDOT_ZZZI_S, UDOT_ZZZ_S
    printSVERegOp<'b'>(MI, 2, STI, O);
    O << ", ";
    printSVERegOp<'b'>(MI, 3, STI, O);
    break;
  case 40:
    // SQDECB_XPiWdI, SQDECD_XPiWdI, SQDECH_XPiWdI, SQDECW_XPiWdI, SQINCB_XPi...
    printGPR64as32(MI, 1, STI, O);
    O << ", ";
    printSVEPattern(MI, 2, STI, O);
    O << ", mul ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 41:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O);
    return;
    break;
  case 42:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O);
    return;
    break;
  case 43:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O);
    return;
    break;
  case 44:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O);
    return;
    break;
  case 45:
    // ST2GOffset, STGOffset, STZ2GOffset, STZGOffset
    printImmScale<16>(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 46:
    // ST2GPostIndex, ST2GPreIndex, STGPostIndex, STGPreIndex, STZ2GPostIndex...
    printImmScale<16>(MI, 2, STI, O);
    break;
  case 47:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O);
    return;
    break;
  case 48:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O);
    return;
    break;
  case 49:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O);
    return;
    break;
  case 50:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O);
    return;
    break;
  case 51:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O);
    return;
    break;
  case 52:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O);
    return;
    break;
  case 53:
    // SYSxt
    printSysCROperand(MI, 1, STI, O);
    O << ", ";
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 54:
    // TBL_ZZZ_B
    printTypedVectorList<0,'b'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'b'>(MI, 2, STI, O);
    return;
    break;
  case 55:
    // TBL_ZZZ_D
    printTypedVectorList<0,'d'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'d'>(MI, 2, STI, O);
    return;
    break;
  case 56:
    // TBL_ZZZ_S
    printTypedVectorList<0,'s'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'s'>(MI, 2, STI, O);
    return;
    break;
  case 57:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", ";
    printVRegOperand(MI, 2, STI, O);
    break;
  case 58:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O);
    O << ", ";
    printVRegOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 7 bits for 93 unique commands.
  switch ((Bits >> 31) & 127) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABS_ZPmZ_B, ABS_ZPmZ_D, ABS_ZPmZ_S, ADD_ZPmZ_B, ADD_ZPmZ_D, ADD_ZPmZ_S...
    O << "/m, ";
    break;
  case 1:
    // ABS_ZPmZ_H, CLS_ZPmZ_H, CLZ_ZPmZ_H, CNOT_ZPmZ_H, CNT_ZPmZ_H, FABS_ZPmZ...
    printSVERegOp<'h'>(MI, 3, STI, O);
    break;
  case 2:
    // ABSv16i8, ADDVv16i8v, AESDrr, AESErr, AESIMCrr, AESMCrr, CLSv16i8, CLZ...
    O << ".16b";
    return;
    break;
  case 3:
    // ABSv1i64, ADR, AUTDA, AUTDB, AUTIA, AUTIB, BLRAA, BLRAB, BRAA, BRAB, C...
    return;
    break;
  case 4:
    // ABSv2i32, CLSv2i32, CLZv2i32, FABSv2f32, FADDPv2i32p, FCVTASv2f32, FCV...
    O << ".2s";
    return;
    break;
  case 5:
    // ABSv2i64, ADDPv2i64p, FABSv2f64, FADDPv2i64p, FCVTASv2f64, FCVTAUv2f64...
    O << ".2d";
    return;
    break;
  case 6:
    // ABSv4i16, ADDVv4i16v, CLSv4i16, CLZv4i16, FABSv4f16, FCVTASv4f16, FCVT...
    O << ".4h";
    return;
    break;
  case 7:
    // ABSv4i32, ADDVv4i32v, CLSv4i32, CLZv4i32, FABSv4f32, FCVTASv4f32, FCVT...
    O << ".4s";
    return;
    break;
  case 8:
    // ABSv8i16, ADDVv8i16v, CLSv8i16, CLZv8i16, FABSv8f16, FCVTASv8f16, FCVT...
    O << ".8h";
    return;
    break;
  case 9:
    // ABSv8i8, ADDVv8i8v, CLSv8i8, CLZv8i8, CNTv8i8, NEGv8i8, NOTv8i8, RBITv...
    O << ".8b";
    return;
    break;
  case 10:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDG, ADDPL_XXI, ADDSWri, ADDSWrs, ADDSW...
    O << ", ";
    break;
  case 11:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d, ";
    break;
  case 12:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s, ";
    break;
  case 13:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h, ";
    break;
  case 14:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BCAX, BICv16i8, BIFv16i8, BITv16i8, BSL...
    O << ".16b, ";
    break;
  case 15:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s, ";
    break;
  case 16:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h, ";
    break;
  case 17:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b, ";
    break;
  case 18:
    // ADD_ZI_H, SQADD_ZI_H, SQSUB_ZI_H, SUBR_ZI_H, SUB_ZI_H, UQADD_ZI_H, UQS...
    printImm8OptLsl<uint16_t>(MI, 2, STI, O);
    return;
    break;
  case 19:
    // ADD_ZPmZ_H, ADD_ZZZ_H, AND_ZPmZ_H, ASRD_ZPmI_H, ASRR_ZPmZ_H, ASR_WIDE_...
    printSVERegOp<'h'>(MI, 2, STI, O);
    break;
  case 20:
    // ANDS_PPzPP, AND_PPzPP, BICS_PPzPP, BIC_PPzPP, BRKAS_PPzP, BRKA_PPzP, B...
    O << "/z, ";
    break;
  case 21:
    // ASR_WIDE_ZZZ_H, LSL_WIDE_ZZZ_H, LSR_WIDE_ZZZ_H
    printSVERegOp<'d'>(MI, 2, STI, O);
    return;
    break;
  case 22:
    // ASR_ZZI_H, INDEX_II_H, INDEX_IR_H, INDEX_RI_H, INDEX_RR_H, LSL_ZZI_H, ...
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 23:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ", [";
    break;
  case 24:
    // CMEQv16i8rz, CMGEv16i8rz, CMGTv16i8rz, CMLEv16i8rz, CMLTv16i8rz
    O << ".16b, #0";
    return;
    break;
  case 25:
    // CMEQv1i64rz, CMGEv1i64rz, CMGTv1i64rz, CMLEv1i64rz, CMLTv1i64rz
    O << ", #0";
    return;
    break;
  case 26:
    // CMEQv2i32rz, CMGEv2i32rz, CMGTv2i32rz, CMLEv2i32rz, CMLTv2i32rz
    O << ".2s, #0";
    return;
    break;
  case 27:
    // CMEQv2i64rz, CMGEv2i64rz, CMGTv2i64rz, CMLEv2i64rz, CMLTv2i64rz
    O << ".2d, #0";
    return;
    break;
  case 28:
    // CMEQv4i16rz, CMGEv4i16rz, CMGTv4i16rz, CMLEv4i16rz, CMLTv4i16rz
    O << ".4h, #0";
    return;
    break;
  case 29:
    // CMEQv4i32rz, CMGEv4i32rz, CMGTv4i32rz, CMLEv4i32rz, CMLTv4i32rz
    O << ".4s, #0";
    return;
    break;
  case 30:
    // CMEQv8i16rz, CMGEv8i16rz, CMGTv8i16rz, CMLEv8i16rz, CMLTv8i16rz
    O << ".8h, #0";
    return;
    break;
  case 31:
    // CMEQv8i8rz, CMGEv8i8rz, CMGTv8i8rz, CMLEv8i8rz, CMLTv8i8rz
    O << ".8b, #0";
    return;
    break;
  case 32:
    // CNTB_XPiI, CNTD_XPiI, CNTH_XPiI, CNTW_XPiI
    O << ", mul ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 33:
    // CPY_ZPmI_H
    printImm8OptLsl<int16_t>(MI, 3, STI, O);
    return;
    break;
  case 34:
    // CPY_ZPmR_H, CPY_ZPmV_H, GLD1B_D_IMM_REAL, GLD1B_S_IMM_REAL, GLD1SB_D_I...
    printOperand(MI, 3, STI, O);
    break;
  case 35:
    // CPY_ZPzI_H
    printImm8OptLsl<int16_t>(MI, 2, STI, O);
    return;
    break;
  case 36:
    // CPYi16, DUPv4i16lane, DUPv8i16lane, INSvi16lane, SMOVvi16to32, SMOVvi1...
    O << ".h";
    break;
  case 37:
    // CPYi32, DUPv2i32lane, DUPv4i32lane, INSvi32lane, SMOVvi32to64, UMOVvi3...
    O << ".s";
    break;
  case 38:
    // CPYi64, DUPv2i64lane, FMOVDXHighr, INSvi64lane, UMOVvi64
    O << ".d";
    break;
  case 39:
    // CPYi8, DUPv16i8lane, DUPv8i8lane, INSvi8lane, SMOVvi8to32, SMOVvi8to64...
    O << ".b";
    break;
  case 40:
    // DUP_ZZI_B, DUP_ZZI_D, DUP_ZZI_S
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 41:
    // FADDPv2i16p, FMAXNMPv2i16p, FMAXPv2i16p, FMINNMPv2i16p, FMINPv2i16p
    O << ".2h";
    return;
    break;
  case 42:
    // FCMEQv1i16rz, FCMEQv1i32rz, FCMEQv1i64rz, FCMGEv1i16rz, FCMGEv1i32rz, ...
    O << ", #0.0";
    return;
    break;
  case 43:
    // FCMEQv2i32rz, FCMGEv2i32rz, FCMGTv2i32rz, FCMLEv2i32rz, FCMLTv2i32rz
    O << ".2s, #0.0";
    return;
    break;
  case 44:
    // FCMEQv2i64rz, FCMGEv2i64rz, FCMGTv2i64rz, FCMLEv2i64rz, FCMLTv2i64rz
    O << ".2d, #0.0";
    return;
    break;
  case 45:
    // FCMEQv4i16rz, FCMGEv4i16rz, FCMGTv4i16rz, FCMLEv4i16rz, FCMLTv4i16rz
    O << ".4h, #0.0";
    return;
    break;
  case 46:
    // FCMEQv4i32rz, FCMGEv4i32rz, FCMGTv4i32rz, FCMLEv4i32rz, FCMLTv4i32rz
    O << ".4s, #0.0";
    return;
    break;
  case 47:
    // FCMEQv8i16rz, FCMGEv8i16rz, FCMGTv8i16rz, FCMLEv8i16rz, FCMLTv8i16rz
    O << ".8h, #0.0";
    return;
    break;
  case 48:
    // FCMLA_ZZZI_H
    printComplexRotationOp<90, 0>(MI, 5, STI, O);
    return;
    break;
  case 49:
    // FCMLA_ZZZI_S, FCVT_ZPmZ_StoH, FMLA_ZZZI_S, FMLS_ZZZI_S, SCVTF_ZPmZ_Sto...
    printSVERegOp<'s'>(MI, 3, STI, O);
    break;
  case 50:
    // FCPY_ZPmI_H
    printFPImmOperand(MI, 3, STI, O);
    return;
    break;
  case 51:
    // FCVT_ZPmZ_DtoH, FMLA_ZZZI_D, FMLS_ZZZI_D, SCVTF_ZPmZ_DtoH, UCVTF_ZPmZ_...
    printSVERegOp<'d'>(MI, 3, STI, O);
    break;
  case 52:
    // FMLAL2lanev4f16, FMLAL2v4f16, FMLALlanev4f16, FMLALv4f16, FMLSL2lanev4...
    O << ".2h, ";
    printVRegOperand(MI, 3, STI, O);
    break;
  case 53:
    // GLD1D_IMM_REAL, GLDFF1D_IMM_REAL, SST1D_IMM
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 54:
    // GLD1H_D_IMM_REAL, GLD1H_S_IMM_REAL, GLD1SH_D_IMM_REAL, GLD1SH_S_IMM_RE...
    printImmScale<2>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 55:
    // GLD1SW_D_IMM_REAL, GLD1W_D_IMM_REAL, GLD1W_IMM_REAL, GLDFF1SW_D_IMM_RE...
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 56:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ']';
    return;
    break;
  case 57:
    // LDGV, ST2GPreIndex, STGPreIndex, STGV, STZ2GPreIndex, STZGPreIndex
    O << "]!";
    return;
    break;
  case 58:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 59:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O);
    return;
    break;
  case 60:
    // PRFB_D_SCALED
    printRegWithShiftExtend<false, 8, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 61:
    // PRFB_D_SXTW_SCALED
    printRegWithShiftExtend<true, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 62:
    // PRFB_D_UXTW_SCALED
    printRegWithShiftExtend<false, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 63:
    // PRFB_PRR
    printRegWithShiftExtend<false, 8, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 64:
    // PRFB_S_SXTW_SCALED
    printRegWithShiftExtend<true, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 65:
    // PRFB_S_UXTW_SCALED
    printRegWithShiftExtend<false, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 66:
    // PRFD_D_SCALED
    printRegWithShiftExtend<false, 64, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 67:
    // PRFD_D_SXTW_SCALED
    printRegWithShiftExtend<true, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 68:
    // PRFD_D_UXTW_SCALED
    printRegWithShiftExtend<false, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 69:
    // PRFD_PRR
    printRegWithShiftExtend<false, 64, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 70:
    // PRFD_S_SXTW_SCALED
    printRegWithShiftExtend<true, 64, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 71:
    // PRFD_S_UXTW_SCALED
    printRegWithShiftExtend<false, 64, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 72:
    // PRFH_D_SCALED
    printRegWithShiftExtend<false, 16, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 73:
    // PRFH_D_SXTW_SCALED
    printRegWithShiftExtend<true, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 74:
    // PRFH_D_UXTW_SCALED
    printRegWithShiftExtend<false, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 75:
    // PRFH_PRR
    printRegWithShiftExtend<false, 16, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 76:
    // PRFH_S_SXTW_SCALED
    printRegWithShiftExtend<true, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 77:
    // PRFH_S_UXTW_SCALED
    printRegWithShiftExtend<false, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 78:
    // PRFS_PRR
    printRegWithShiftExtend<false, 32, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 79:
    // PRFW_D_SCALED
    printRegWithShiftExtend<false, 32, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 80:
    // PRFW_D_SXTW_SCALED
    printRegWithShiftExtend<true, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 81:
    // PRFW_D_UXTW_SCALED
    printRegWithShiftExtend<false, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 82:
    // PRFW_S_SXTW_SCALED
    printRegWithShiftExtend<true, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 83:
    // PRFW_S_UXTW_SCALED
    printRegWithShiftExtend<false, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 84:
    // RDFFRS_PPz, RDFFR_PPz
    O << "/z";
    return;
    break;
  case 85:
    // SDOT_ZZZI_D, SDOT_ZZZI_S, UDOT_ZZZI_D, UDOT_ZZZI_S
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 86:
    // SHLLv16i8
    O << ".16b, #8";
    return;
    break;
  case 87:
    // SHLLv2i32
    O << ".2s, #32";
    return;
    break;
  case 88:
    // SHLLv4i16
    O << ".4h, #16";
    return;
    break;
  case 89:
    // SHLLv4i32
    O << ".4s, #32";
    return;
    break;
  case 90:
    // SHLLv8i16
    O << ".8h, #16";
    return;
    break;
  case 91:
    // SHLLv8i8
    O << ".8b, #8";
    return;
    break;
  case 92:
    // UMAX_ZI_H, UMIN_ZI_H
    printImm(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 4 encoded into 7 bits for 91 unique commands.
  switch ((Bits >> 38) & 127) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABS_ZPmZ_B, BRKA_PPmP, BRKB_PPmP, CLS_ZPmZ_B, CLZ_ZPmZ_B, CNOT_ZPmZ_B,...
    printSVERegOp<'b'>(MI, 3, STI, O);
    break;
  case 1:
    // ABS_ZPmZ_D, CLS_ZPmZ_D, CLZ_ZPmZ_D, CNOT_ZPmZ_D, CNT_ZPmZ_D, FABS_ZPmZ...
    printSVERegOp<'d'>(MI, 3, STI, O);
    break;
  case 2:
    // ABS_ZPmZ_H, ADD_ZZZ_H, CLS_ZPmZ_H, CLZ_ZPmZ_H, CNOT_ZPmZ_H, CNT_ZPmZ_H...
    return;
    break;
  case 3:
    // ABS_ZPmZ_S, CLS_ZPmZ_S, CLZ_ZPmZ_S, CNOT_ZPmZ_S, CNT_ZPmZ_S, FABS_ZPmZ...
    printSVERegOp<'s'>(MI, 3, STI, O);
    break;
  case 4:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPL_XXI, ADDSXrx64, ADDVL_XXI, ADDXrx6...
    printOperand(MI, 2, STI, O);
    break;
  case 5:
    // ADDG, LDG, SUBG
    printImmScale<16>(MI, 2, STI, O);
    break;
  case 6:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 7:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O);
    break;
  case 8:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O);
    return;
    break;
  case 9:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O);
    return;
    break;
  case 10:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O);
    return;
    break;
  case 11:
    // ADD_ZI_B, SQADD_ZI_B, SQSUB_ZI_B, SUBR_ZI_B, SUB_ZI_B, UQADD_ZI_B, UQS...
    printImm8OptLsl<uint8_t>(MI, 2, STI, O);
    return;
    break;
  case 12:
    // ADD_ZI_D, SQADD_ZI_D, SQSUB_ZI_D, SUBR_ZI_D, SUB_ZI_D, UQADD_ZI_D, UQS...
    printImm8OptLsl<uint64_t>(MI, 2, STI, O);
    return;
    break;
  case 13:
    // ADD_ZI_S, SQADD_ZI_S, SQSUB_ZI_S, SUBR_ZI_S, SUB_ZI_S, UQADD_ZI_S, UQS...
    printImm8OptLsl<uint32_t>(MI, 2, STI, O);
    return;
    break;
  case 14:
    // ADD_ZPmZ_B, ADD_ZZZ_B, ANDS_PPzPP, ANDV_VPZ_B, AND_PPzPP, AND_ZPmZ_B, ...
    printSVERegOp<'b'>(MI, 2, STI, O);
    break;
  case 15:
    // ADD_ZPmZ_D, ADD_ZZZ_D, ANDV_VPZ_D, AND_ZPmZ_D, AND_ZZZ, ASRD_ZPmI_D, A...
    printSVERegOp<'d'>(MI, 2, STI, O);
    break;
  case 16:
    // ADD_ZPmZ_H, AND_ZPmZ_H, ASRD_ZPmI_H, ASRR_ZPmZ_H, ASR_WIDE_ZPmZ_H, ASR...
    O << ", ";
    break;
  case 17:
    // ADD_ZPmZ_S, ADD_ZZZ_S, ANDV_VPZ_S, AND_ZPmZ_S, ASRD_ZPmI_S, ASRR_ZPmZ_...
    printSVERegOp<'s'>(MI, 2, STI, O);
    break;
  case 18:
    // ADR_LSL_ZZZ_D_0
    printRegWithShiftExtend<false, 8, 'x', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // ADR_LSL_ZZZ_D_1
    printRegWithShiftExtend<false, 16, 'x', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 20:
    // ADR_LSL_ZZZ_D_2
    printRegWithShiftExtend<false, 32, 'x', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // ADR_LSL_ZZZ_D_3
    printRegWithShiftExtend<false, 64, 'x', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // ADR_LSL_ZZZ_S_0
    printRegWithShiftExtend<false, 8, 'x', 's'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // ADR_LSL_ZZZ_S_1
    printRegWithShiftExtend<false, 16, 'x', 's'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 24:
    // ADR_LSL_ZZZ_S_2
    printRegWithShiftExtend<false, 32, 'x', 's'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 25:
    // ADR_LSL_ZZZ_S_3
    printRegWithShiftExtend<false, 64, 'x', 's'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 26:
    // ADR_SXTW_ZZZ_D_0
    printRegWithShiftExtend<true, 8, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 27:
    // ADR_SXTW_ZZZ_D_1
    printRegWithShiftExtend<true, 16, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 28:
    // ADR_SXTW_ZZZ_D_2
    printRegWithShiftExtend<true, 32, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 29:
    // ADR_SXTW_ZZZ_D_3
    printRegWithShiftExtend<true, 64, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 30:
    // ADR_UXTW_ZZZ_D_0
    printRegWithShiftExtend<false, 8, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 31:
    // ADR_UXTW_ZZZ_D_1
    printRegWithShiftExtend<false, 16, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 32:
    // ADR_UXTW_ZZZ_D_2
    printRegWithShiftExtend<false, 32, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 33:
    // ADR_UXTW_ZZZ_D_3
    printRegWithShiftExtend<false, 64, 'w', 'd'>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 34:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm<int32_t>(MI, 2, STI, O);
    return;
    break;
  case 35:
    // ANDSXri, ANDXri, AND_ZI, EORXri, EOR_ZI, ORRXri, ORR_ZI
    printLogicalImm<int64_t>(MI, 2, STI, O);
    return;
    break;
  case 36:
    // ANDV_VPZ_H, CNTP_XPP_H, EORV_VPZ_H, FADDV_VPZ_H, FMAXNMV_VPZ_H, FMAXV_...
    printSVERegOp<'h'>(MI, 2, STI, O);
    return;
    break;
  case 37:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 3, STI, O);
    break;
  case 38:
    // CPY_ZPmI_B
    printImm8OptLsl<int8_t>(MI, 3, STI, O);
    return;
    break;
  case 39:
    // CPY_ZPmI_D
    printImm8OptLsl<int64_t>(MI, 3, STI, O);
    return;
    break;
  case 40:
    // CPY_ZPmI_S
    printImm8OptLsl<int32_t>(MI, 3, STI, O);
    return;
    break;
  case 41:
    // CPY_ZPzI_B
    printImm8OptLsl<int8_t>(MI, 2, STI, O);
    return;
    break;
  case 42:
    // CPY_ZPzI_D
    printImm8OptLsl<int64_t>(MI, 2, STI, O);
    return;
    break;
  case 43:
    // CPY_ZPzI_S
    printImm8OptLsl<int32_t>(MI, 2, STI, O);
    return;
    break;
  case 44:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 45:
    // FCMEQ_PPzZ0_H, FCMGE_PPzZ0_H, FCMGT_PPzZ0_H, FCMLE_PPzZ0_H, FCMLT_PPzZ...
    O << ", #0.0";
    return;
    break;
  case 46:
    // FCMLA_ZZZI_S, FMLA_ZZZI_D, FMLA_ZZZI_S, FMLS_ZZZI_D, FMLS_ZZZI_S, INSv...
    printVectorIndex(MI, 4, STI, O);
    break;
  case 47:
    // FCPY_ZPmI_D, FCPY_ZPmI_S
    printFPImmOperand(MI, 3, STI, O);
    return;
    break;
  case 48:
    // FCVTZS_ZPmZ_HtoD, FCVTZS_ZPmZ_HtoS, FCVTZU_ZPmZ_HtoD, FCVTZU_ZPmZ_HtoS...
    printSVERegOp<'h'>(MI, 3, STI, O);
    return;
    break;
  case 49:
    // FMLAL2lanev4f16, FMLALlanev4f16, FMLSL2lanev4f16, FMLSLlanev4f16
    O << ".h";
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 50:
    // FMLAL2v4f16, FMLALv4f16, FMLSL2v4f16, FMLSLv4f16
    O << ".2h";
    return;
    break;
  case 51:
    // FMUL_ZZZI_H
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 52:
    // GLD1B_D_IMM_REAL, GLD1B_S_IMM_REAL, GLD1SB_D_IMM_REAL, GLD1SB_S_IMM_RE...
    O << ']';
    return;
    break;
  case 53:
    // GLD1B_D_REAL, GLD1D_REAL, GLD1H_D_REAL, GLD1SB_D_REAL, GLD1SH_D_REAL, ...
    printRegWithShiftExtend<false, 8, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 54:
    // GLD1B_D_SXTW_REAL, GLD1D_SXTW_REAL, GLD1H_D_SXTW_REAL, GLD1SB_D_SXTW_R...
    printRegWithShiftExtend<true, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 55:
    // GLD1B_D_UXTW_REAL, GLD1D_UXTW_REAL, GLD1H_D_UXTW_REAL, GLD1SB_D_UXTW_R...
    printRegWithShiftExtend<false, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 56:
    // GLD1B_S_SXTW_REAL, GLD1H_S_SXTW_REAL, GLD1SB_S_SXTW_REAL, GLD1SH_S_SXT...
    printRegWithShiftExtend<true, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 57:
    // GLD1B_S_UXTW_REAL, GLD1H_S_UXTW_REAL, GLD1SB_S_UXTW_REAL, GLD1SH_S_UXT...
    printRegWithShiftExtend<false, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 58:
    // GLD1D_SCALED_REAL, GLDFF1D_SCALED_REAL, SST1D_SCALED
    printRegWithShiftExtend<false, 64, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 59:
    // GLD1D_SXTW_SCALED_REAL, GLDFF1D_SXTW_SCALED_REAL, SST1D_SXTW_SCALED
    printRegWithShiftExtend<true, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 60:
    // GLD1D_UXTW_SCALED_REAL, GLDFF1D_UXTW_SCALED_REAL, SST1D_UXTW_SCALED
    printRegWithShiftExtend<false, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 61:
    // GLD1H_D_SCALED_REAL, GLD1SH_D_SCALED_REAL, GLDFF1H_D_SCALED_REAL, GLDF...
    printRegWithShiftExtend<false, 16, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 62:
    // GLD1H_D_SXTW_SCALED_REAL, GLD1SH_D_SXTW_SCALED_REAL, GLDFF1H_D_SXTW_SC...
    printRegWithShiftExtend<true, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 63:
    // GLD1H_D_UXTW_SCALED_REAL, GLD1SH_D_UXTW_SCALED_REAL, GLDFF1H_D_UXTW_SC...
    printRegWithShiftExtend<false, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 64:
    // GLD1H_S_SXTW_SCALED_REAL, GLD1SH_S_SXTW_SCALED_REAL, GLDFF1H_S_SXTW_SC...
    printRegWithShiftExtend<true, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 65:
    // GLD1H_S_UXTW_SCALED_REAL, GLD1SH_S_UXTW_SCALED_REAL, GLDFF1H_S_UXTW_SC...
    printRegWithShiftExtend<false, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 66:
    // GLD1SW_D_SCALED_REAL, GLD1W_D_SCALED_REAL, GLDFF1SW_D_SCALED_REAL, GLD...
    printRegWithShiftExtend<false, 32, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 67:
    // GLD1SW_D_SXTW_SCALED_REAL, GLD1W_D_SXTW_SCALED_REAL, GLDFF1SW_D_SXTW_S...
    printRegWithShiftExtend<true, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 68:
    // GLD1SW_D_UXTW_SCALED_REAL, GLD1W_D_UXTW_SCALED_REAL, GLDFF1SW_D_UXTW_S...
    printRegWithShiftExtend<false, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 69:
    // GLD1W_SXTW_SCALED_REAL, GLDFF1W_SXTW_SCALED_REAL, SST1W_SXTW_SCALED
    printRegWithShiftExtend<true, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 70:
    // GLD1W_UXTW_SCALED_REAL, GLDFF1W_UXTW_SCALED_REAL, SST1W_UXTW_SCALED
    printRegWithShiftExtend<false, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 71:
    // LD1B, LD1B_D, LD1B_H, LD1B_S, LD1RQ_B, LD1SB_D, LD1SB_H, LD1SB_S, LD2B...
    printRegWithShiftExtend<false, 8, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 72:
    // LD1D, LD1RQ_D, LD2D, LD3D, LD4D, LDFF1D_REAL, LDNT1D_ZRR, ST1D, ST2D, ...
    printRegWithShiftExtend<false, 64, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 73:
    // LD1H, LD1H_D, LD1H_S, LD1RQ_H, LD1SH_D, LD1SH_S, LD2H, LD3H, LD4H, LDF...
    printRegWithShiftExtend<false, 16, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 74:
    // LD1RD_IMM, LDRAAwriteback, LDRABwriteback
    printImmScale<8>(MI, 3, STI, O);
    break;
  case 75:
    // LD1RH_D_IMM, LD1RH_IMM, LD1RH_S_IMM, LD1RSH_D_IMM, LD1RSH_S_IMM, LD2B_...
    printImmScale<2>(MI, 3, STI, O);
    break;
  case 76:
    // LD1RQ_B_IMM, LD1RQ_D_IMM, LD1RQ_H_IMM, LD1RQ_W_IMM
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 77:
    // LD1RQ_W, LD1SW_D, LD1W, LD1W_D, LD2W, LD3W, LD4W, LDFF1SW_D_REAL, LDFF...
    printRegWithShiftExtend<false, 32, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 78:
    // LD1RSW_IMM, LD1RW_D_IMM, LD1RW_IMM, LD4B_IMM, LD4D_IMM, LD4H_IMM, LD4W...
    printImmScale<4>(MI, 3, STI, O);
    break;
  case 79:
    // LD3B_IMM, LD3D_IMM, LD3H_IMM, LD3W_IMM, ST3B_IMM, ST3D_IMM, ST3H_IMM, ...
    printImmScale<3>(MI, 3, STI, O);
    O << ", mul vl]";
    return;
    break;
  case 80:
    // LDRAAindexed, LDRABindexed
    printImmScale<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 81:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 82:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 83:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 84:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 85:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 86:
    // PRFB_PRI, PRFD_PRI, PRFH_PRI, PRFW_PRI
    O << ", mul vl]";
    return;
    break;
  case 87:
    // SQDECP_XPWd_B, SQDECP_XPWd_D, SQDECP_XPWd_H, SQDECP_XPWd_S, SQINCP_XPW...
    printGPR64as32(MI, 2, STI, O);
    return;
    break;
  case 88:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printSysCROperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 89:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O);
    return;
    break;
  case 90:
    // UMAX_ZI_B, UMAX_ZI_D, UMAX_ZI_S, UMIN_ZI_B, UMIN_ZI_D, UMIN_ZI_S
    printImm(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 45) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABS_ZPmZ_B, ABS_ZPmZ_D, ABS_ZPmZ_S, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDP...
    return;
    break;
  case 1:
    // ADDG, ADD_ZPmZ_B, ADD_ZPmZ_D, ADD_ZPmZ_S, ANDS_PPzPP, AND_PPzPP, AND_Z...
    O << ", ";
    break;
  case 2:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d";
    return;
    break;
  case 3:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s";
    return;
    break;
  case 4:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h";
    return;
    break;
  case 5:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BICv16i8, BIFv16i8, BITv16i8, BSLv16i8,...
    O << ".16b";
    return;
    break;
  case 6:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s";
    return;
    break;
  case 7:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h";
    return;
    break;
  case 8:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b";
    return;
    break;
  case 9:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O);
    return;
    break;
  case 10:
    // ADD_ZPmZ_H, AND_ZPmZ_H, ASRR_ZPmZ_H, ASR_ZPmZ_H, BIC_ZPmZ_H, CLASTA_ZP...
    printSVERegOp<'h'>(MI, 3, STI, O);
    break;
  case 11:
    // ASRD_ZPmI_H, ASR_ZPmI_H, CMPEQ_PPzZI_H, CMPGE_PPzZI_H, CMPGT_PPzZI_H, ...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 12:
    // ASR_WIDE_ZPmZ_H, CMPEQ_WIDE_PPzZZ_H, CMPGE_WIDE_PPzZZ_H, CMPGT_WIDE_PP...
    printSVERegOp<'d'>(MI, 3, STI, O);
    return;
    break;
  case 13:
    // BCAX, EOR3, EXTv16i8
    O << ".16b, ";
    break;
  case 14:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ']';
    return;
    break;
  case 15:
    // CMPHI_PPzZI_H, CMPHS_PPzZI_H, CMPLO_PPzZI_H, CMPLS_PPzZI_H
    printImm(MI, 3, STI, O);
    return;
    break;
  case 16:
    // EXTv8i8
    O << ".8b, ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 17:
    // FADD_ZPmI_H, FSUBR_ZPmI_H, FSUB_ZPmI_H
    printExactFPImm<AArch64ExactFPImm::half, AArch64ExactFPImm::one>(MI, 3, STI, O);
    return;
    break;
  case 18:
    // FCADDv2f32, FCMLAv2f32
    O << ".2s, ";
    break;
  case 19:
    // FCADDv2f64, FCMLAv2f64, XAR
    O << ".2d, ";
    break;
  case 20:
    // FCADDv4f16, FCMLAv4f16
    O << ".4h, ";
    break;
  case 21:
    // FCADDv4f32, FCMLAv4f32, SM3SS1
    O << ".4s, ";
    break;
  case 22:
    // FCADDv8f16, FCMLAv8f16
    O << ".8h, ";
    break;
  case 23:
    // FCMEQ_PPzZ0_D, FCMEQ_PPzZ0_S, FCMGE_PPzZ0_D, FCMGE_PPzZ0_S, FCMGT_PPzZ...
    O << ", #0.0";
    return;
    break;
  case 24:
    // FCMLA_ZPmZZ_H, FMAD_ZPmZZ_H, FMLA_ZPmZZ_H, FMLS_ZPmZZ_H, FMSB_ZPmZZ_H,...
    printSVERegOp<'h'>(MI, 4, STI, O);
    break;
  case 25:
    // FCMLAv4f16_indexed, FCMLAv8f16_indexed, FMLAL2lanev8f16, FMLALlanev8f1...
    O << ".h";
    break;
  case 26:
    // FCMLAv4f32_indexed, FMLAv1i32_indexed, FMLAv2i32_indexed, FMLAv4i32_in...
    O << ".s";
    break;
  case 27:
    // FMAXNM_ZPmI_H, FMAX_ZPmI_H, FMINNM_ZPmI_H, FMIN_ZPmI_H
    printExactFPImm<AArch64ExactFPImm::zero, AArch64ExactFPImm::one>(MI, 3, STI, O);
    return;
    break;
  case 28:
    // FMLAv1i64_indexed, FMLAv2i64_indexed, FMLSv1i64_indexed, FMLSv2i64_ind...
    O << ".d";
    break;
  case 29:
    // FMUL_ZPmI_H
    printExactFPImm<AArch64ExactFPImm::half, AArch64ExactFPImm::two>(MI, 3, STI, O);
    return;
    break;
  case 30:
    // FMUL_ZZZI_D, FMUL_ZZZI_S
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 31:
    // LD1B_D_IMM_REAL, LD1B_H_IMM_REAL, LD1B_IMM_REAL, LD1B_S_IMM_REAL, LD1D...
    O << ", mul vl]";
    return;
    break;
  case 32:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STGPpost,...
    O << "], ";
    break;
  case 33:
    // LDRAAwriteback, LDRABwriteback, LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, ...
    O << "]!";
    return;
    break;
  case 34:
    // SDOTlanev16i8, SDOTlanev8i8, UDOTlanev16i8, UDOTlanev8i8
    O << ".4b";
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 35:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 6 bits for 38 unique commands.
  switch ((Bits >> 51) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADDG, ASRD_ZPmI_B, ASRD_ZPmI_D, ASRD_ZPmI_S, ASR_ZPmI_B, ASR_ZPmI_D, A...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 1:
    // ADD_ZPmZ_B, ANDS_PPzPP, AND_PPzPP, AND_ZPmZ_B, ASRR_ZPmZ_B, ASR_ZPmZ_B...
    printSVERegOp<'b'>(MI, 3, STI, O);
    return;
    break;
  case 2:
    // ADD_ZPmZ_D, AND_ZPmZ_D, ASRR_ZPmZ_D, ASR_WIDE_ZPmZ_B, ASR_WIDE_ZPmZ_S,...
    printSVERegOp<'d'>(MI, 3, STI, O);
    break;
  case 3:
    // ADD_ZPmZ_H, AND_ZPmZ_H, ASRR_ZPmZ_H, ASR_ZPmZ_H, BIC_ZPmZ_H, CLASTA_ZP...
    return;
    break;
  case 4:
    // ADD_ZPmZ_S, AND_ZPmZ_S, ASRR_ZPmZ_S, ASR_ZPmZ_S, BIC_ZPmZ_S, CLASTA_RP...
    printSVERegOp<'s'>(MI, 3, STI, O);
    break;
  case 5:
    // BCAX, EOR3, SM3SS1
    printVRegOperand(MI, 3, STI, O);
    break;
  case 6:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 7:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O);
    return;
    break;
  case 8:
    // CLASTA_RPZ_H, CLASTA_VPZ_H, CLASTB_RPZ_H, CLASTB_VPZ_H, FADDA_VPZ_H
    printSVERegOp<'h'>(MI, 3, STI, O);
    return;
    break;
  case 9:
    // CMPHI_PPzZI_B, CMPHI_PPzZI_D, CMPHI_PPzZI_S, CMPHS_PPzZI_B, CMPHS_PPzZ...
    printImm(MI, 3, STI, O);
    return;
    break;
  case 10:
    // FADD_ZPmI_D, FADD_ZPmI_S, FSUBR_ZPmI_D, FSUBR_ZPmI_S, FSUB_ZPmI_D, FSU...
    printExactFPImm<AArch64ExactFPImm::half, AArch64ExactFPImm::one>(MI, 3, STI, O);
    return;
    break;
  case 11:
    // FCADD_ZPmZ_H, FCMLA_ZPmZZ_H
    O << ", ";
    break;
  case 12:
    // FCADDv2f32, FCADDv2f64, FCADDv4f16, FCADDv4f32, FCADDv8f16
    printComplexRotationOp<180, 90>(MI, 3, STI, O);
    return;
    break;
  case 13:
    // FCMLA_ZPmZZ_D, FMAD_ZPmZZ_D, FMLA_ZPmZZ_D, FMLS_ZPmZZ_D, FMSB_ZPmZZ_D,...
    printSVERegOp<'d'>(MI, 4, STI, O);
    break;
  case 14:
    // FCMLA_ZPmZZ_S, FMAD_ZPmZZ_S, FMLA_ZPmZZ_S, FMLS_ZPmZZ_S, FMSB_ZPmZZ_S,...
    printSVERegOp<'s'>(MI, 4, STI, O);
    break;
  case 15:
    // FCMLA_ZZZI_S
    printComplexRotationOp<90, 0>(MI, 5, STI, O);
    return;
    break;
  case 16:
    // FCMLAv2f32, FCMLAv2f64, FCMLAv4f16, FCMLAv4f32, FCMLAv8f16
    printComplexRotationOp<90, 0>(MI, 4, STI, O);
    return;
    break;
  case 17:
    // FCMLAv4f16_indexed, FCMLAv4f32_indexed, FCMLAv8f16_indexed, FMLAL2lane...
    printVectorIndex(MI, 4, STI, O);
    break;
  case 18:
    // FMAXNM_ZPmI_D, FMAXNM_ZPmI_S, FMAX_ZPmI_D, FMAX_ZPmI_S, FMINNM_ZPmI_D,...
    printExactFPImm<AArch64ExactFPImm::zero, AArch64ExactFPImm::one>(MI, 3, STI, O);
    return;
    break;
  case 19:
    // FMULXv1i16_indexed, FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 20:
    // FMUL_ZPmI_D, FMUL_ZPmI_S
    printExactFPImm<AArch64ExactFPImm::half, AArch64ExactFPImm::two>(MI, 3, STI, O);
    return;
    break;
  case 21:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // LDNPQi, LDPQi, STGPi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 24:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O);
    break;
  case 25:
    // LDPQpost, LDPQpre, STGPpost, STGPpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O);
    break;
  case 26:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O);
    break;
  case 27:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 28:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 29:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 30:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 31:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 32:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 33:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 34:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 35:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 36:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 37:
    // MAD_ZPmZZ_B, MLA_ZPmZZ_B, MLS_ZPmZZ_B, MSB_ZPmZZ_B
    printSVERegOp<'b'>(MI, 4, STI, O);
    return;
    break;
  }


  // Fragment 7 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 57) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD_ZPmZ_D, ADD_ZPmZ_S, AND_ZPmZ_D, AND_ZPmZ_S, ASRR_ZPmZ_D, ASRR_ZPmZ...
    return;
    break;
  case 1:
    // BCAX, EOR3
    O << ".16b";
    return;
    break;
  case 2:
    // FCADD_ZPmZ_D, FCADD_ZPmZ_S, FCMLA_ZPmZZ_D, FCMLA_ZPmZZ_S, FCMLAv4f16_i...
    O << ", ";
    break;
  case 3:
    // FCADD_ZPmZ_H
    printComplexRotationOp<180, 90>(MI, 4, STI, O);
    return;
    break;
  case 4:
    // FCMLA_ZPmZZ_H
    printComplexRotationOp<90, 0>(MI, 5, STI, O);
    return;
    break;
  case 5:
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STGPpre, STPDpr...
    O << "]!";
    return;
    break;
  case 6:
    // SM3SS1
    O << ".4s";
    return;
    break;
  }


  // Fragment 8 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 60) & 1) {
    // FCMLA_ZPmZZ_D, FCMLA_ZPmZZ_S, FCMLAv4f16_indexed, FCMLAv4f32_indexed, ...
    printComplexRotationOp<90, 0>(MI, 5, STI, O);
    return;
  } else {
    // FCADD_ZPmZ_D, FCADD_ZPmZ_S
    printComplexRotationOp<180, 90>(MI, 4, STI, O);
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64InstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 629 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'Z', '7', '_', 'Z', '8', '_', 'Z', '9', '_', 'Z', '1', '0', 0,
  /* 39 */ 'b', '1', '0', 0,
  /* 43 */ 'd', '1', '0', 0,
  /* 47 */ 'h', '1', '0', 0,
  /* 51 */ 'p', '1', '0', 0,
  /* 55 */ 'q', '1', '0', 0,
  /* 59 */ 's', '1', '0', 0,
  /* 63 */ 'w', '1', '0', 0,
  /* 67 */ 'x', '1', '0', 0,
  /* 71 */ 'z', '1', '0', 0,
  /* 75 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 91 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 107 */ 'Z', '1', '7', '_', 'Z', '1', '8', '_', 'Z', '1', '9', '_', 'Z', '2', '0', 0,
  /* 123 */ 'b', '2', '0', 0,
  /* 127 */ 'd', '2', '0', 0,
  /* 131 */ 'h', '2', '0', 0,
  /* 135 */ 'q', '2', '0', 0,
  /* 139 */ 's', '2', '0', 0,
  /* 143 */ 'w', '2', '0', 0,
  /* 147 */ 'x', '2', '0', 0,
  /* 151 */ 'z', '2', '0', 0,
  /* 155 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 171 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 187 */ 'Z', '2', '7', '_', 'Z', '2', '8', '_', 'Z', '2', '9', '_', 'Z', '3', '0', 0,
  /* 203 */ 'b', '3', '0', 0,
  /* 207 */ 'd', '3', '0', 0,
  /* 211 */ 'h', '3', '0', 0,
  /* 215 */ 'q', '3', '0', 0,
  /* 219 */ 's', '3', '0', 0,
  /* 223 */ 'w', '3', '0', 0,
  /* 227 */ 'x', '3', '0', 0,
  /* 231 */ 'z', '3', '0', 0,
  /* 235 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 250 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 265 */ 'Z', '2', '9', '_', 'Z', '3', '0', '_', 'Z', '3', '1', '_', 'Z', '0', 0,
  /* 280 */ 'b', '0', 0,
  /* 283 */ 'd', '0', 0,
  /* 286 */ 'h', '0', 0,
  /* 289 */ 'p', '0', 0,
  /* 292 */ 'q', '0', 0,
  /* 295 */ 's', '0', 0,
  /* 298 */ 'w', '0', 0,
  /* 301 */ 'x', '0', 0,
  /* 304 */ 'z', '0', 0,
  /* 307 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 321 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 335 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 343 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 351 */ 'Z', '8', '_', 'Z', '9', '_', 'Z', '1', '0', '_', 'Z', '1', '1', 0,
  /* 365 */ 'b', '1', '1', 0,
  /* 369 */ 'd', '1', '1', 0,
  /* 373 */ 'h', '1', '1', 0,
  /* 377 */ 'p', '1', '1', 0,
  /* 381 */ 'q', '1', '1', 0,
  /* 385 */ 's', '1', '1', 0,
  /* 389 */ 'w', '1', '1', 0,
  /* 393 */ 'x', '1', '1', 0,
  /* 397 */ 'z', '1', '1', 0,
  /* 401 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 417 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 433 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 441 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 449 */ 'Z', '1', '8', '_', 'Z', '1', '9', '_', 'Z', '2', '0', '_', 'Z', '2', '1', 0,
  /* 465 */ 'b', '2', '1', 0,
  /* 469 */ 'd', '2', '1', 0,
  /* 473 */ 'h', '2', '1', 0,
  /* 477 */ 'q', '2', '1', 0,
  /* 481 */ 's', '2', '1', 0,
  /* 485 */ 'w', '2', '1', 0,
  /* 489 */ 'x', '2', '1', 0,
  /* 493 */ 'z', '2', '1', 0,
  /* 497 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 513 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 529 */ 'Z', '2', '8', '_', 'Z', '2', '9', '_', 'Z', '3', '0', '_', 'Z', '3', '1', 0,
  /* 545 */ 'b', '3', '1', 0,
  /* 549 */ 'd', '3', '1', 0,
  /* 553 */ 'h', '3', '1', 0,
  /* 557 */ 'q', '3', '1', 0,
  /* 561 */ 's', '3', '1', 0,
  /* 565 */ 'z', '3', '1', 0,
  /* 569 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 583 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 597 */ 'W', '0', '_', 'W', '1', 0,
  /* 603 */ 'X', '0', '_', 'X', '1', 0,
  /* 609 */ 'Z', '3', '0', '_', 'Z', '3', '1', '_', 'Z', '0', '_', 'Z', '1', 0,
  /* 623 */ 'b', '1', 0,
  /* 626 */ 'd', '1', 0,
  /* 629 */ 'h', '1', 0,
  /* 632 */ 'p', '1', 0,
  /* 635 */ 'q', '1', 0,
  /* 638 */ 's', '1', 0,
  /* 641 */ 'w', '1', 0,
  /* 644 */ 'x', '1', 0,
  /* 647 */ 'z', '1', 0,
  /* 650 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 665 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 680 */ 'Z', '9', '_', 'Z', '1', '0', '_', 'Z', '1', '1', '_', 'Z', '1', '2', 0,
  /* 695 */ 'b', '1', '2', 0,
  /* 699 */ 'd', '1', '2', 0,
  /* 703 */ 'h', '1', '2', 0,
  /* 707 */ 'p', '1', '2', 0,
  /* 711 */ 'q', '1', '2', 0,
  /* 715 */ 's', '1', '2', 0,
  /* 719 */ 'w', '1', '2', 0,
  /* 723 */ 'x', '1', '2', 0,
  /* 727 */ 'z', '1', '2', 0,
  /* 731 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 747 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 763 */ 'Z', '1', '9', '_', 'Z', '2', '0', '_', 'Z', '2', '1', '_', 'Z', '2', '2', 0,
  /* 779 */ 'b', '2', '2', 0,
  /* 783 */ 'd', '2', '2', 0,
  /* 787 */ 'h', '2', '2', 0,
  /* 791 */ 'q', '2', '2', 0,
  /* 795 */ 's', '2', '2', 0,
  /* 799 */ 'w', '2', '2', 0,
  /* 803 */ 'x', '2', '2', 0,
  /* 807 */ 'z', '2', '2', 0,
  /* 811 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 824 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 837 */ 'Z', '3', '1', '_', 'Z', '0', '_', 'Z', '1', '_', 'Z', '2', 0,
  /* 850 */ 'b', '2', 0,
  /* 853 */ 'd', '2', 0,
  /* 856 */ 'h', '2', 0,
  /* 859 */ 'p', '2', 0,
  /* 862 */ 'q', '2', 0,
  /* 865 */ 's', '2', 0,
  /* 868 */ 'w', '2', 0,
  /* 871 */ 'x', '2', 0,
  /* 874 */ 'z', '2', 0,
  /* 877 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 893 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 909 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 917 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 925 */ 'Z', '1', '0', '_', 'Z', '1', '1', '_', 'Z', '1', '2', '_', 'Z', '1', '3', 0,
  /* 941 */ 'b', '1', '3', 0,
  /* 945 */ 'd', '1', '3', 0,
  /* 949 */ 'h', '1', '3', 0,
  /* 953 */ 'p', '1', '3', 0,
  /* 957 */ 'q', '1', '3', 0,
  /* 961 */ 's', '1', '3', 0,
  /* 965 */ 'w', '1', '3', 0,
  /* 969 */ 'x', '1', '3', 0,
  /* 973 */ 'z', '1', '3', 0,
  /* 977 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 993 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 1009 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 1017 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 1025 */ 'Z', '2', '0', '_', 'Z', '2', '1', '_', 'Z', '2', '2', '_', 'Z', '2', '3', 0,
  /* 1041 */ 'b', '2', '3', 0,
  /* 1045 */ 'd', '2', '3', 0,
  /* 1049 */ 'h', '2', '3', 0,
  /* 1053 */ 'q', '2', '3', 0,
  /* 1057 */ 's', '2', '3', 0,
  /* 1061 */ 'w', '2', '3', 0,
  /* 1065 */ 'x', '2', '3', 0,
  /* 1069 */ 'z', '2', '3', 0,
  /* 1073 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 1085 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 1097 */ 'W', '2', '_', 'W', '3', 0,
  /* 1103 */ 'X', '2', '_', 'X', '3', 0,
  /* 1109 */ 'Z', '0', '_', 'Z', '1', '_', 'Z', '2', '_', 'Z', '3', 0,
  /* 1121 */ 'b', '3', 0,
  /* 1124 */ 'd', '3', 0,
  /* 1127 */ 'h', '3', 0,
  /* 1130 */ 'p', '3', 0,
  /* 1133 */ 'q', '3', 0,
  /* 1136 */ 's', '3', 0,
  /* 1139 */ 'w', '3', 0,
  /* 1142 */ 'x', '3', 0,
  /* 1145 */ 'z', '3', 0,
  /* 1148 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 1164 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 1180 */ 'Z', '1', '1', '_', 'Z', '1', '2', '_', 'Z', '1', '3', '_', 'Z', '1', '4', 0,
  /* 1196 */ 'b', '1', '4', 0,
  /* 1200 */ 'd', '1', '4', 0,
  /* 1204 */ 'h', '1', '4', 0,
  /* 1208 */ 'p', '1', '4', 0,
  /* 1212 */ 'q', '1', '4', 0,
  /* 1216 */ 's', '1', '4', 0,
  /* 1220 */ 'w', '1', '4', 0,
  /* 1224 */ 'x', '1', '4', 0,
  /* 1228 */ 'z', '1', '4', 0,
  /* 1232 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1248 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1264 */ 'Z', '2', '1', '_', 'Z', '2', '2', '_', 'Z', '2', '3', '_', 'Z', '2', '4', 0,
  /* 1280 */ 'b', '2', '4', 0,
  /* 1284 */ 'd', '2', '4', 0,
  /* 1288 */ 'h', '2', '4', 0,
  /* 1292 */ 'q', '2', '4', 0,
  /* 1296 */ 's', '2', '4', 0,
  /* 1300 */ 'w', '2', '4', 0,
  /* 1304 */ 'x', '2', '4', 0,
  /* 1308 */ 'z', '2', '4', 0,
  /* 1312 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1324 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1336 */ 'Z', '1', '_', 'Z', '2', '_', 'Z', '3', '_', 'Z', '4', 0,
  /* 1348 */ 'b', '4', 0,
  /* 1351 */ 'd', '4', 0,
  /* 1354 */ 'h', '4', 0,
  /* 1357 */ 'p', '4', 0,
  /* 1360 */ 'q', '4', 0,
  /* 1363 */ 's', '4', 0,
  /* 1366 */ 'w', '4', 0,
  /* 1369 */ 'x', '4', 0,
  /* 1372 */ 'z', '4', 0,
  /* 1375 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1391 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1407 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1415 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1423 */ 'Z', '1', '2', '_', 'Z', '1', '3', '_', 'Z', '1', '4', '_', 'Z', '1', '5', 0,
  /* 1439 */ 'b', '1', '5', 0,
  /* 1443 */ 'd', '1', '5', 0,
  /* 1447 */ 'h', '1', '5', 0,
  /* 1451 */ 'p', '1', '5', 0,
  /* 1455 */ 'q', '1', '5', 0,
  /* 1459 */ 's', '1', '5', 0,
  /* 1463 */ 'w', '1', '5', 0,
  /* 1467 */ 'x', '1', '5', 0,
  /* 1471 */ 'z', '1', '5', 0,
  /* 1475 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1491 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1507 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1515 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1523 */ 'Z', '2', '2', '_', 'Z', '2', '3', '_', 'Z', '2', '4', '_', 'Z', '2', '5', 0,
  /* 1539 */ 'b', '2', '5', 0,
  /* 1543 */ 'd', '2', '5', 0,
  /* 1547 */ 'h', '2', '5', 0,
  /* 1551 */ 'q', '2', '5', 0,
  /* 1555 */ 's', '2', '5', 0,
  /* 1559 */ 'w', '2', '5', 0,
  /* 1563 */ 'x', '2', '5', 0,
  /* 1567 */ 'z', '2', '5', 0,
  /* 1571 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1583 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1595 */ 'W', '4', '_', 'W', '5', 0,
  /* 1601 */ 'X', '4', '_', 'X', '5', 0,
  /* 1607 */ 'Z', '2', '_', 'Z', '3', '_', 'Z', '4', '_', 'Z', '5', 0,
  /* 1619 */ 'b', '5', 0,
  /* 1622 */ 'd', '5', 0,
  /* 1625 */ 'h', '5', 0,
  /* 1628 */ 'p', '5', 0,
  /* 1631 */ 'q', '5', 0,
  /* 1634 */ 's', '5', 0,
  /* 1637 */ 'w', '5', 0,
  /* 1640 */ 'x', '5', 0,
  /* 1643 */ 'z', '5', 0,
  /* 1646 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1662 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1678 */ 'Z', '1', '3', '_', 'Z', '1', '4', '_', 'Z', '1', '5', '_', 'Z', '1', '6', 0,
  /* 1694 */ 'b', '1', '6', 0,
  /* 1698 */ 'd', '1', '6', 0,
  /* 1702 */ 'h', '1', '6', 0,
  /* 1706 */ 'q', '1', '6', 0,
  /* 1710 */ 's', '1', '6', 0,
  /* 1714 */ 'w', '1', '6', 0,
  /* 1718 */ 'x', '1', '6', 0,
  /* 1722 */ 'z', '1', '6', 0,
  /* 1726 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1742 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1758 */ 'Z', '2', '3', '_', 'Z', '2', '4', '_', 'Z', '2', '5', '_', 'Z', '2', '6', 0,
  /* 1774 */ 'b', '2', '6', 0,
  /* 1778 */ 'd', '2', '6', 0,
  /* 1782 */ 'h', '2', '6', 0,
  /* 1786 */ 'q', '2', '6', 0,
  /* 1790 */ 's', '2', '6', 0,
  /* 1794 */ 'w', '2', '6', 0,
  /* 1798 */ 'x', '2', '6', 0,
  /* 1802 */ 'z', '2', '6', 0,
  /* 1806 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1818 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1830 */ 'Z', '3', '_', 'Z', '4', '_', 'Z', '5', '_', 'Z', '6', 0,
  /* 1842 */ 'b', '6', 0,
  /* 1845 */ 'd', '6', 0,
  /* 1848 */ 'h', '6', 0,
  /* 1851 */ 'p', '6', 0,
  /* 1854 */ 'q', '6', 0,
  /* 1857 */ 's', '6', 0,
  /* 1860 */ 'w', '6', 0,
  /* 1863 */ 'x', '6', 0,
  /* 1866 */ 'z', '6', 0,
  /* 1869 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1885 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1901 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 1909 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 1917 */ 'Z', '1', '4', '_', 'Z', '1', '5', '_', 'Z', '1', '6', '_', 'Z', '1', '7', 0,
  /* 1933 */ 'b', '1', '7', 0,
  /* 1937 */ 'd', '1', '7', 0,
  /* 1941 */ 'h', '1', '7', 0,
  /* 1945 */ 'q', '1', '7', 0,
  /* 1949 */ 's', '1', '7', 0,
  /* 1953 */ 'w', '1', '7', 0,
  /* 1957 */ 'x', '1', '7', 0,
  /* 1961 */ 'z', '1', '7', 0,
  /* 1965 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1981 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1997 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 2005 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 2013 */ 'Z', '2', '4', '_', 'Z', '2', '5', '_', 'Z', '2', '6', '_', 'Z', '2', '7', 0,
  /* 2029 */ 'b', '2', '7', 0,
  /* 2033 */ 'd', '2', '7', 0,
  /* 2037 */ 'h', '2', '7', 0,
  /* 2041 */ 'q', '2', '7', 0,
  /* 2045 */ 's', '2', '7', 0,
  /* 2049 */ 'w', '2', '7', 0,
  /* 2053 */ 'x', '2', '7', 0,
  /* 2057 */ 'z', '2', '7', 0,
  /* 2061 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 2073 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 2085 */ 'W', '6', '_', 'W', '7', 0,
  /* 2091 */ 'X', '6', '_', 'X', '7', 0,
  /* 2097 */ 'Z', '4', '_', 'Z', '5', '_', 'Z', '6', '_', 'Z', '7', 0,
  /* 2109 */ 'b', '7', 0,
  /* 2112 */ 'd', '7', 0,
  /* 2115 */ 'h', '7', 0,
  /* 2118 */ 'p', '7', 0,
  /* 2121 */ 'q', '7', 0,
  /* 2124 */ 's', '7', 0,
  /* 2127 */ 'w', '7', 0,
  /* 2130 */ 'x', '7', 0,
  /* 2133 */ 'z', '7', 0,
  /* 2136 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 2152 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 2168 */ 'Z', '1', '5', '_', 'Z', '1', '6', '_', 'Z', '1', '7', '_', 'Z', '1', '8', 0,
  /* 2184 */ 'b', '1', '8', 0,
  /* 2188 */ 'd', '1', '8', 0,
  /* 2192 */ 'h', '1', '8', 0,
  /* 2196 */ 'q', '1', '8', 0,
  /* 2200 */ 's', '1', '8', 0,
  /* 2204 */ 'w', '1', '8', 0,
  /* 2208 */ 'x', '1', '8', 0,
  /* 2212 */ 'z', '1', '8', 0,
  /* 2216 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 2232 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 2248 */ 'Z', '2', '5', '_', 'Z', '2', '6', '_', 'Z', '2', '7', '_', 'Z', '2', '8', 0,
  /* 2264 */ 'b', '2', '8', 0,
  /* 2268 */ 'd', '2', '8', 0,
  /* 2272 */ 'h', '2', '8', 0,
  /* 2276 */ 'q', '2', '8', 0,
  /* 2280 */ 's', '2', '8', 0,
  /* 2284 */ 'w', '2', '8', 0,
  /* 2288 */ 'x', '2', '8', 0,
  /* 2292 */ 'z', '2', '8', 0,
  /* 2296 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 2308 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 2320 */ 'Z', '5', '_', 'Z', '6', '_', 'Z', '7', '_', 'Z', '8', 0,
  /* 2332 */ 'b', '8', 0,
  /* 2335 */ 'd', '8', 0,
  /* 2338 */ 'h', '8', 0,
  /* 2341 */ 'p', '8', 0,
  /* 2344 */ 'q', '8', 0,
  /* 2347 */ 's', '8', 0,
  /* 2350 */ 'w', '8', 0,
  /* 2353 */ 'x', '8', 0,
  /* 2356 */ 'z', '8', 0,
  /* 2359 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2375 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2391 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2399 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2407 */ 'Z', '1', '6', '_', 'Z', '1', '7', '_', 'Z', '1', '8', '_', 'Z', '1', '9', 0,
  /* 2423 */ 'b', '1', '9', 0,
  /* 2427 */ 'd', '1', '9', 0,
  /* 2431 */ 'h', '1', '9', 0,
  /* 2435 */ 'q', '1', '9', 0,
  /* 2439 */ 's', '1', '9', 0,
  /* 2443 */ 'w', '1', '9', 0,
  /* 2447 */ 'x', '1', '9', 0,
  /* 2451 */ 'z', '1', '9', 0,
  /* 2455 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2471 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2487 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2495 */ 'Z', '2', '6', '_', 'Z', '2', '7', '_', 'Z', '2', '8', '_', 'Z', '2', '9', 0,
  /* 2511 */ 'b', '2', '9', 0,
  /* 2515 */ 'd', '2', '9', 0,
  /* 2519 */ 'h', '2', '9', 0,
  /* 2523 */ 'q', '2', '9', 0,
  /* 2527 */ 's', '2', '9', 0,
  /* 2531 */ 'w', '2', '9', 0,
  /* 2535 */ 'x', '2', '9', 0,
  /* 2539 */ 'z', '2', '9', 0,
  /* 2543 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2555 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2567 */ 'W', '8', '_', 'W', '9', 0,
  /* 2573 */ 'X', '8', '_', 'X', '9', 0,
  /* 2579 */ 'Z', '6', '_', 'Z', '7', '_', 'Z', '8', '_', 'Z', '9', 0,
  /* 2591 */ 'b', '9', 0,
  /* 2594 */ 'd', '9', 0,
  /* 2597 */ 'h', '9', 0,
  /* 2600 */ 'p', '9', 0,
  /* 2603 */ 'q', '9', 0,
  /* 2606 */ 's', '9', 0,
  /* 2609 */ 'w', '9', 0,
  /* 2612 */ 'x', '9', 0,
  /* 2615 */ 'z', '9', 0,
  /* 2618 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2625 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2633 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2640 */ 'z', '1', '0', '_', 'h', 'i', 0,
  /* 2647 */ 'z', '2', '0', '_', 'h', 'i', 0,
  /* 2654 */ 'z', '3', '0', '_', 'h', 'i', 0,
  /* 2661 */ 'z', '0', '_', 'h', 'i', 0,
  /* 2667 */ 'z', '1', '1', '_', 'h', 'i', 0,
  /* 2674 */ 'z', '2', '1', '_', 'h', 'i', 0,
  /* 2681 */ 'z', '3', '1', '_', 'h', 'i', 0,
  /* 2688 */ 'z', '1', '_', 'h', 'i', 0,
  /* 2694 */ 'z', '1', '2', '_', 'h', 'i', 0,
  /* 2701 */ 'z', '2', '2', '_', 'h', 'i', 0,
  /* 2708 */ 'z', '2', '_', 'h', 'i', 0,
  /* 2714 */ 'z', '1', '3', '_', 'h', 'i', 0,
  /* 2721 */ 'z', '2', '3', '_', 'h', 'i', 0,
  /* 2728 */ 'z', '3', '_', 'h', 'i', 0,
  /* 2734 */ 'z', '1', '4', '_', 'h', 'i', 0,
  /* 2741 */ 'z', '2', '4', '_', 'h', 'i', 0,
  /* 2748 */ 'z', '4', '_', 'h', 'i', 0,
  /* 2754 */ 'z', '1', '5', '_', 'h', 'i', 0,
  /* 2761 */ 'z', '2', '5', '_', 'h', 'i', 0,
  /* 2768 */ 'z', '5', '_', 'h', 'i', 0,
  /* 2774 */ 'z', '1', '6', '_', 'h', 'i', 0,
  /* 2781 */ 'z', '2', '6', '_', 'h', 'i', 0,
  /* 2788 */ 'z', '6', '_', 'h', 'i', 0,
  /* 2794 */ 'z', '1', '7', '_', 'h', 'i', 0,
  /* 2801 */ 'z', '2', '7', '_', 'h', 'i', 0,
  /* 2808 */ 'z', '7', '_', 'h', 'i', 0,
  /* 2814 */ 'z', '1', '8', '_', 'h', 'i', 0,
  /* 2821 */ 'z', '2', '8', '_', 'h', 'i', 0,
  /* 2828 */ 'z', '8', '_', 'h', 'i', 0,
  /* 2834 */ 'z', '1', '9', '_', 'h', 'i', 0,
  /* 2841 */ 'z', '2', '9', '_', 'h', 'i', 0,
  /* 2848 */ 'z', '9', '_', 'h', 'i', 0,
  /* 2854 */ 'w', 's', 'p', 0,
  /* 2858 */ 'f', 'f', 'r', 0,
  /* 2862 */ 'w', 'z', 'r', 0,
  /* 2866 */ 'x', 'z', 'r', 0,
  /* 2870 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    2858, 2535, 227, 2870, 2855, 2854, 2862, 2866, 280, 623, 850, 1121, 1348, 1619, 
    1842, 2109, 2332, 2591, 39, 365, 695, 941, 1196, 1439, 1694, 1933, 2184, 2423, 
    123, 465, 779, 1041, 1280, 1539, 1774, 2029, 2264, 2511, 203, 545, 283, 626, 
    853, 1124, 1351, 1622, 1845, 2112, 2335, 2594, 43, 369, 699, 945, 1200, 1443, 
    1698, 1937, 2188, 2427, 127, 469, 783, 1045, 1284, 1543, 1778, 2033, 2268, 2515, 
    207, 549, 286, 629, 856, 1127, 1354, 1625, 1848, 2115, 2338, 2597, 47, 373, 
    703, 949, 1204, 1447, 1702, 1941, 2192, 2431, 131, 473, 787, 1049, 1288, 1547, 
    1782, 2037, 2272, 2519, 211, 553, 289, 632, 859, 1130, 1357, 1628, 1851, 2118, 
    2341, 2600, 51, 377, 707, 953, 1208, 1451, 292, 635, 862, 1133, 1360, 1631, 
    1854, 2121, 2344, 2603, 55, 381, 711, 957, 1212, 1455, 1706, 1945, 2196, 2435, 
    135, 477, 791, 1053, 1292, 1551, 1786, 2041, 2276, 2523, 215, 557, 295, 638, 
    865, 1136, 1363, 1634, 1857, 2124, 2347, 2606, 59, 385, 715, 961, 1216, 1459, 
    1710, 1949, 2200, 2439, 139, 481, 795, 1057, 1296, 1555, 1790, 2045, 2280, 2527, 
    219, 561, 298, 641, 868, 1139, 1366, 1637, 1860, 2127, 2350, 2609, 63, 389, 
    719, 965, 1220, 1463, 1714, 1953, 2204, 2443, 143, 485, 799, 1061, 1300, 1559, 
    1794, 2049, 2284, 2531, 223, 301, 644, 871, 1142, 1369, 1640, 1863, 2130, 2353, 
    2612, 67, 393, 723, 969, 1224, 1467, 1718, 1957, 2208, 2447, 147, 489, 803, 
    1065, 1304, 1563, 1798, 2053, 2288, 304, 647, 874, 1145, 1372, 1643, 1866, 2133, 
    2356, 2615, 71, 397, 727, 973, 1228, 1471, 1722, 1961, 2212, 2451, 151, 493, 
    807, 1069, 1308, 1567, 1802, 2057, 2292, 2539, 231, 565, 2661, 2688, 2708, 2728, 
    2748, 2768, 2788, 2808, 2828, 2848, 2640, 2667, 2694, 2714, 2734, 2754, 2774, 2794, 
    2814, 2834, 2647, 2674, 2701, 2721, 2741, 2761, 2781, 2801, 2821, 2841, 2654, 2681, 
    577, 818, 1079, 1318, 1577, 1812, 2067, 2302, 2549, 6, 313, 657, 885, 1156, 
    1383, 1654, 1877, 2144, 2367, 83, 409, 739, 985, 1240, 1483, 1734, 1973, 2224, 
    2463, 163, 505, 243, 1073, 1312, 1571, 1806, 2061, 2296, 2543, 0, 307, 650, 
    877, 1148, 1375, 1646, 1869, 2136, 2359, 75, 401, 731, 977, 1232, 1475, 1726, 
    1965, 2216, 2455, 155, 497, 235, 569, 811, 815, 1076, 1315, 1574, 1809, 2064, 
    2299, 2546, 3, 310, 653, 881, 1152, 1379, 1650, 1873, 2140, 2363, 79, 405, 
    735, 981, 1236, 1479, 1730, 1969, 2220, 2459, 159, 501, 239, 573, 591, 831, 
    1091, 1330, 1589, 1824, 2079, 2314, 2561, 19, 327, 672, 901, 1172, 1399, 1670, 
    1893, 2160, 2383, 99, 425, 755, 1001, 1256, 1499, 1750, 1989, 2240, 2479, 179, 
    521, 258, 1085, 1324, 1583, 1818, 2073, 2308, 2555, 13, 321, 665, 893, 1164, 
    1391, 1662, 1885, 2152, 2375, 91, 417, 747, 993, 1248, 1491, 1742, 1981, 2232, 
    2471, 171, 513, 250, 583, 824, 828, 1088, 1327, 1586, 1821, 2076, 2311, 2558, 
    16, 324, 668, 897, 1168, 1395, 1666, 1889, 2156, 2379, 95, 421, 751, 997, 
    1252, 1495, 1746, 1985, 2236, 2475, 175, 517, 254, 587, 2625, 597, 1097, 1595, 
    2085, 2567, 335, 909, 1407, 1901, 2391, 433, 1009, 1507, 1997, 2487, 2633, 2618, 
    603, 1103, 1601, 2091, 2573, 343, 917, 1415, 1909, 2399, 441, 1017, 1515, 2005, 
    617, 844, 1115, 1342, 1613, 1836, 2103, 2326, 2585, 32, 357, 687, 933, 1188, 
    1431, 1686, 1925, 2176, 2415, 115, 457, 771, 1033, 1272, 1531, 1766, 2021, 2256, 
    2503, 195, 537, 273, 1109, 1336, 1607, 1830, 2097, 2320, 2579, 26, 351, 680, 
    925, 1180, 1423, 1678, 1917, 2168, 2407, 107, 449, 763, 1025, 1264, 1523, 1758, 
    2013, 2248, 2495, 187, 529, 265, 609, 837, 841, 1112, 1339, 1610, 1833, 2100, 
    2323, 2582, 29, 354, 683, 929, 1184, 1427, 1682, 1921, 2172, 2411, 111, 453, 
    767, 1029, 1268, 1527, 1762, 2017, 2252, 2499, 191, 533, 269, 613, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 
    38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 
    74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 
    8, 23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 
    82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 
    4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 
    52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 
    100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 
    0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 
    56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 
    82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 
    4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 
    38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 
    74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 
    8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 
    30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 
    78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 
    104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 
    34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool AArch64InstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDS_PPzPP:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(2).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ANDS_PPzPP PPR8:$Pd, PPRAny:$Pg, PPR8:$Pn, PPR8:$Pn)
      AsmString = "movs $\xFF\x01\x06, $\xFF\x02\x07/z, $\xFF\x03\x06";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::AND_PPzPP:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(2).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (AND_PPzPP PPR8:$Pd, PPRAny:$Pg, PPR8:$Pn, PPR8:$Pn)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x07/z, $\xFF\x03\x06";
      break;
    }
    return false;
  case AArch64::AND_ZI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (AND_ZI ZPR8:$Zdn, sve_logical_imm8:$imm)
      AsmString = "and	$\xFF\x01\x06, $\xFF\x01\x06, $\xFF\x03\x08";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (AND_ZI ZPR16:$Zdn, sve_logical_imm16:$imm)
      AsmString = "and	$\xFF\x01\x09, $\xFF\x01\x09, $\xFF\x03\x0A";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (AND_ZI ZPR32:$Zdn, sve_logical_imm32:$imm)
      AsmString = "and	$\xFF\x01\x0B, $\xFF\x01\x0B, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CNTB_XPiI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTB_XPiI GPR64:$Rd, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "cntb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTB_XPiI GPR64:$Rd, sve_pred_enum:$pattern, 1)
      AsmString = "cntb	$\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case AArch64::CNTD_XPiI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTD_XPiI GPR64:$Rd, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "cntd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTD_XPiI GPR64:$Rd, sve_pred_enum:$pattern, 1)
      AsmString = "cntd	$\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case AArch64::CNTH_XPiI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTH_XPiI GPR64:$Rd, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "cnth	$\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTH_XPiI GPR64:$Rd, sve_pred_enum:$pattern, 1)
      AsmString = "cnth	$\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case AArch64::CNTW_XPiI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTW_XPiI GPR64:$Rd, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "cntw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CNTW_XPiI GPR64:$Rd, sve_pred_enum:$pattern, 1)
      AsmString = "cntw	$\x01, $\xFF\x02\x0E";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_B:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_B ZPR8:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i8:$imm)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x03\x07/m, $\xFF\x04\x0F";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_D:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_D ZPR64:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i64:$imm)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x03\x07/m, $\xFF\x04\x11";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_H:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_H ZPR16:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i16:$imm)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x03\x07/m, $\xFF\x04\x12";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_S:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_S ZPR32:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i32:$imm)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x03\x07/m, $\xFF\x04\x13";
      break;
    }
    return false;
  case AArch64::CPY_ZPmR_B:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmR_B ZPR8:$Zd, PPR3bAny:$Pg, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPmR_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmR_D ZPR64:$Zd, PPR3bAny:$Pg, GPR64sp:$Rn)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPmR_H:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmR_H ZPR16:$Zd, PPR3bAny:$Pg, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPmR_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmR_S ZPR32:$Zd, PPR3bAny:$Pg, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPmV_B:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmV_B ZPR8:$Zd, PPR3bAny:$Pg, FPR8:$Vn)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPmV_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmV_D ZPR64:$Zd, PPR3bAny:$Pg, FPR64:$Vn)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPmV_H:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmV_H ZPR16:$Zd, PPR3bAny:$Pg, FPR16:$Vn)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPmV_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmV_S ZPR32:$Zd, PPR3bAny:$Pg, FPR32:$Vn)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x03\x07/m, $\x04";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_B:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_B ZPR8:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i8:$imm)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x07/z, $\xFF\x03\x0F";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_D ZPR64:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i64:$imm)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x02\x07/z, $\xFF\x03\x11";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_H:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_H ZPR16:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i16:$imm)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x02\x07/z, $\xFF\x03\x12";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_S ZPR32:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i32:$imm)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x02\x07/z, $\xFF\x03\x13";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x14";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x14";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x14";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x14";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x14";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x14";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x14";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x14";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x14";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x14";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::DECB_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECB_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "decb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECB_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "decb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::DECD_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECD_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "decd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECD_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "decd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::DECD_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECD_ZPiI ZPR64:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "decd	$\xFF\x01\x10";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECD_ZPiI ZPR64:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "decd	$\xFF\x01\x10, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::DECH_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECH_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "dech	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECH_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "dech	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::DECH_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECH_ZPiI ZPR16:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "dech	$\xFF\x01\x09";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECH_ZPiI ZPR16:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "dech	$\xFF\x01\x09, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::DECW_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECW_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "decw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECW_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "decw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::DECW_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECW_ZPiI ZPR32:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "decw	$\xFF\x01\x0B";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DECW_ZPiI ZPR32:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "decw	$\xFF\x01\x0B, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DSB 0)
      AsmString = "ssbb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (DSB 4)
      AsmString = "pssbb";
      break;
    }
    return false;
  case AArch64::DUPM_ZI:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 5) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR16:$Zd, sve_preferred_logical_imm16:$imm)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x02\x15";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 6) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR32:$Zd, sve_preferred_logical_imm32:$imm)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x02\x16";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 7) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR64:$Zd, sve_preferred_logical_imm64:$imm)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x02\x17";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR8:$Zd, sve_logical_imm8:$imm)
      AsmString = "dupm $\xFF\x01\x06, $\xFF\x02\x08";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR16:$Zd, sve_logical_imm16:$imm)
      AsmString = "dupm $\xFF\x01\x09, $\xFF\x02\x0A";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR32:$Zd, sve_logical_imm32:$imm)
      AsmString = "dupm $\xFF\x01\x0B, $\xFF\x02\x04";
      break;
    }
    return false;
  case AArch64::DUP_ZI_B:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_B ZPR8:$Zd, cpy_imm8_opt_lsl_i8:$imm)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x0F";
      break;
    }
    return false;
  case AArch64::DUP_ZI_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_D ZPR64:$Zd, cpy_imm8_opt_lsl_i64:$imm)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x02\x11";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_D ZPR64:$Zd, 0, 0)
      AsmString = "fmov $\xFF\x01\x10, #0.0";
      break;
    }
    return false;
  case AArch64::DUP_ZI_H:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_H ZPR16:$Zd, cpy_imm8_opt_lsl_i16:$imm)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x02\x12";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_H ZPR16:$Zd, 0, 0)
      AsmString = "fmov $\xFF\x01\x09, #0.0";
      break;
    }
    return false;
  case AArch64::DUP_ZI_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_S ZPR32:$Zd, cpy_imm8_opt_lsl_i32:$imm)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x02\x13";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_S ZPR32:$Zd, 0, 0)
      AsmString = "fmov $\xFF\x01\x0B, #0.0";
      break;
    }
    return false;
  case AArch64::DUP_ZR_B:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_B ZPR8:$Zd, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x06, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZR_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_D ZPR64:$Zd, GPR64sp:$Rn)
      AsmString = "mov $\xFF\x01\x10, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZR_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_H ZPR16:$Zd, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x09, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZR_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_S ZPR32:$Zd, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x0B, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_B:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_B ZPR8:$Zd, FPR8asZPR:$Bn, 0)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x18";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_B ZPR8:$Zd, ZPR8:$Zn, sve_elm_idx_extdup_b:$idx)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x06$\xFF\x03\x19";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_D ZPR64:$Zd, FPR64asZPR:$Dn, 0)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x02\x1A";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_D ZPR64:$Zd, ZPR64:$Zn, sve_elm_idx_extdup_d:$idx)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x02\x10$\xFF\x03\x19";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_H:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_H ZPR16:$Zd, FPR16asZPR:$Hn, 0)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x02\x1B";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_H ZPR16:$Zd, ZPR16:$Zn, sve_elm_idx_extdup_h:$idx)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x02\x09$\xFF\x03\x19";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_Q:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_Q ZPR128:$Zd, FPR128asZPR:$Qn, 0)
      AsmString = "mov $\xFF\x01\x1C, $\xFF\x02\x1D";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_Q ZPR128:$Zd, ZPR128:$Zn, sve_elm_idx_extdup_q:$idx)
      AsmString = "mov $\xFF\x01\x1C, $\xFF\x02\x1C$\xFF\x03\x19";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_S ZPR32:$Zd, FPR32asZPR:$Sn, 0)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x02\x1E";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_S ZPR32:$Zd, ZPR32:$Zn, sve_elm_idx_extdup_s:$idx)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x02\x0B$\xFF\x03\x19";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORS_PPzPP:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EORS_PPzPP PPR8:$Pd, PPRAny:$Pg, PPR8:$Pn, PPRAny:$Pg)
      AsmString = "nots $\xFF\x01\x06, $\xFF\x02\x07/z, $\xFF\x03\x06";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EOR_PPzPP:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EOR_PPzPP PPR8:$Pd, PPRAny:$Pg, PPR8:$Pn, PPRAny:$Pg)
      AsmString = "not $\xFF\x01\x06, $\xFF\x02\x07/z, $\xFF\x03\x06";
      break;
    }
    return false;
  case AArch64::EOR_ZI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EOR_ZI ZPR8:$Zdn, sve_logical_imm8:$imm)
      AsmString = "eor	$\xFF\x01\x06, $\xFF\x01\x06, $\xFF\x03\x08";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EOR_ZI ZPR16:$Zdn, sve_logical_imm16:$imm)
      AsmString = "eor	$\xFF\x01\x09, $\xFF\x01\x09, $\xFF\x03\x0A";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EOR_ZI ZPR32:$Zdn, sve_logical_imm32:$imm)
      AsmString = "eor	$\xFF\x01\x0B, $\xFF\x01\x0B, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::FCPY_ZPmI_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FCPY_ZPmI_D ZPR64:$Zd, PPRAny:$Pg, fpimm64:$imm8)
      AsmString = "fmov $\xFF\x01\x10, $\xFF\x03\x07/m, $\xFF\x04\x1F";
      break;
    }
    return false;
  case AArch64::FCPY_ZPmI_H:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FCPY_ZPmI_H ZPR16:$Zd, PPRAny:$Pg, fpimm16:$imm8)
      AsmString = "fmov $\xFF\x01\x09, $\xFF\x03\x07/m, $\xFF\x04\x1F";
      break;
    }
    return false;
  case AArch64::FCPY_ZPmI_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FCPY_ZPmI_S ZPR32:$Zd, PPRAny:$Pg, fpimm32:$imm8)
      AsmString = "fmov $\xFF\x01\x0B, $\xFF\x03\x07/m, $\xFF\x04\x1F";
      break;
    }
    return false;
  case AArch64::FDUP_ZI_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FDUP_ZI_D ZPR64:$Zd, fpimm64:$imm8)
      AsmString = "fmov $\xFF\x01\x10, $\xFF\x02\x1F";
      break;
    }
    return false;
  case AArch64::FDUP_ZI_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FDUP_ZI_H ZPR16:$Zd, fpimm16:$imm8)
      AsmString = "fmov $\xFF\x01\x09, $\xFF\x02\x1F";
      break;
    }
    return false;
  case AArch64::FDUP_ZI_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FDUP_ZI_S ZPR32:$Zd, fpimm32:$imm8)
      AsmString = "fmov $\xFF\x01\x0B, $\xFF\x02\x1F";
      break;
    }
    return false;
  case AArch64::GLD1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1b	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLD1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1b	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLD1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLD1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1h	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLD1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1h	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLD1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1sb	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLD1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1sb	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLD1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1sh	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLD1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1sh	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLD1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1sw	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLD1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1w	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLD1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLDFF1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1b	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLDFF1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1b	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLDFF1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLDFF1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1h	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLDFF1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1h	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLDFF1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1sb	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLDFF1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1sb	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLDFF1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1sh	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLDFF1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1sh	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::GLDFF1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1sw	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLDFF1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1w	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::GLDFF1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        STI.getFeatureBits()[AArch64::FeatureRAS]) {
      // (HINT { 1, 0, 0, 0, 0 })
      AsmString = "esb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 20) {
      // (HINT 20)
      AsmString = "csdb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 32 &&
        STI.getFeatureBits()[AArch64::FeatureBranchTargetId]) {
      // (HINT 32)
      AsmString = "bti";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(0), STI, 8) &&
        STI.getFeatureBits()[AArch64::FeatureBranchTargetId]) {
      // (HINT btihint_op:$op)
      AsmString = "bti $\xFF\x01\x22";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(0), STI, 9) &&
        STI.getFeatureBits()[AArch64::FeatureSPE]) {
      // (HINT psbhint_op:$op)
      AsmString = "psb $\xFF\x01\x23";
      break;
    }
    return false;
  case AArch64::INCB_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCB_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "incb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCB_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "incb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::INCD_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCD_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "incd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCD_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "incd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::INCD_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCD_ZPiI ZPR64:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "incd	$\xFF\x01\x10";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCD_ZPiI ZPR64:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "incd	$\xFF\x01\x10, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::INCH_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCH_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "inch	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCH_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "inch	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::INCH_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCH_ZPiI ZPR16:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "inch	$\xFF\x01\x09";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCH_ZPiI ZPR16:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "inch	$\xFF\x01\x09, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::INCW_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCW_XPiI GPR64:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "incw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCW_XPiI GPR64:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "incw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::INCW_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCW_ZPiI ZPR32:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "incw	$\xFF\x01\x0B";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (INCW_ZPiI ZPR32:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "incw	$\xFF\x01\x0B, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x0C.h$\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov	$\xFF\x01\x0C.h$\xFF\x03\x19, $\xFF\x04\x0C.h$\xFF\x05\x19";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x0C.s$\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov	$\xFF\x01\x0C.s$\xFF\x03\x19, $\xFF\x04\x0C.s$\xFF\x05\x19";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov	$\xFF\x01\x0C.d$\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov	$\xFF\x01\x0C.d$\xFF\x03\x19, $\xFF\x04\x0C.d$\xFF\x05\x19";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x0C.b$\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov	$\xFF\x01\x0C.b$\xFF\x03\x19, $\xFF\x04\x0C.b$\xFF\x05\x19";
      break;
    }
    return false;
  case AArch64::IRG:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureMTE]) {
      // (IRG GPR64sp:$dst, GPR64sp:$src, XZR)
      AsmString = "irg $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1B_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1B_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_IMM_REAL Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1h	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1h	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1h	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1RB_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RB_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RB_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_IMM Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RB_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RD_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RD_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rd	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RH_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RH_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rh	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RH_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RH_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rh	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RH_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RH_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rh	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_B_IMM Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqb	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqd	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqh	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_W_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqw	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSB_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSB_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsb	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSB_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSB_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsb	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSB_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSB_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsb	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSH_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSH_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsh	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSH_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSH_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsh	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSW_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSW_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsw	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RW_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RW_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rw	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RW_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RW_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rw	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x26, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x27, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x28, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x29, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x2A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x2B, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x2C, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x2D, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sb	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SB_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SB_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sb	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sb	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sh	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sh	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sw	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1w	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x2E$\xFF\x04\x19, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x2F$\xFF\x04\x19, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x30$\xFF\x04\x19, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x31$\xFF\x04\x19, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2B_IMM ZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2b	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2D_IMM ZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2H_IMM ZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2h	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x26, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x28, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x29, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x2A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x2B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x2C, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x2D, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x2C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x2D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2W_IMM ZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x2E$\xFF\x04\x19, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x2F$\xFF\x04\x19, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x30$\xFF\x04\x19, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x31$\xFF\x04\x19, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3B_IMM ZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3b	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3D_IMM ZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3H_IMM ZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3h	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x26, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x27, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x28, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x29, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x2A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x2B, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x2C, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x2D, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x28, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x29, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x2C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x2D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3W_IMM ZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x2E$\xFF\x04\x19, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x2F$\xFF\x04\x19, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x30$\xFF\x04\x19, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x31$\xFF\x04\x19, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4B_IMM ZZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4b	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4D_IMM ZZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x28, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x2C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x2D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4H_IMM ZZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4h	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x26, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x27, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x2A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x2B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x2C, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x2D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4W_IMM ZZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x2E$\xFF\x04\x19, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x2F$\xFF\x04\x19, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x30$\xFF\x04\x19, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x31$\xFF\x04\x19, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDAPURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDAPURi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (LDAPURi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldapur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDCLRB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_H_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_H_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_REAL Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1H_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1H_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1h	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1H_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1H_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1h	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1H_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1H_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1h	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SB_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SB_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sb	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SB_H_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SB_H_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sb	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SB_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SB_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sb	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SH_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SH_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sh	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SH_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SH_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sh	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SW_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SW_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sw	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1W_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1W_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1w	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1W_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1W_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDG:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureMTE]) {
      // (LDG GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldg $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDNF1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1B_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1B_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_IMM_REAL Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1h	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1h	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1h	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sb	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SB_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SB_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sb	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sb	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sh	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sh	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sw	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1w	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1B_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1B_ZRI Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1b	$\xFF\x01\x25, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1D_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1D_ZRI Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1d	$\xFF\x01\x20, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1H_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1H_ZRI Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1h	$\xFF\x01\x24, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1W_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1W_ZRI Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1w	$\xFF\x01\x21, $\xFF\x02\x07/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRAAindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeaturePA]) {
      // (LDRAAindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldraa	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRABindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeaturePA]) {
      // (LDRABindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrab	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDR_PXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDR_PXI PPRAny:$Pt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\xFF\x01\x07, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDR_ZXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDR_ZXI ZPRAny:$Zt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\xFF\x01\x07, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn $\xFF\x01\x0C.16b, $\xFF\x02\x0C.16b";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn $\xFF\x01\x0C.8b, $\xFF\x02\x0C.8b";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRS_PPzPP:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORRS_PPzPP PPR8:$Pd, PPR8:$Pn, PPR8:$Pn, PPR8:$Pn)
      AsmString = "movs $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORR_PPzPP:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_PPzPP PPR8:$Pd, PPR8:$Pn, PPR8:$Pn, PPR8:$Pn)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORR_ZI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZI ZPR8:$Zdn, sve_logical_imm8:$imm)
      AsmString = "orr	$\xFF\x01\x06, $\xFF\x01\x06, $\xFF\x03\x08";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZI ZPR16:$Zdn, sve_logical_imm16:$imm)
      AsmString = "orr	$\xFF\x01\x09, $\xFF\x01\x09, $\xFF\x03\x0A";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZI ZPR32:$Zdn, sve_logical_imm32:$imm)
      AsmString = "orr	$\xFF\x01\x0B, $\xFF\x01\x0B, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ORR_ZZZ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZZZ ZPR64:$Zd, ZPR64:$Zn, ZPR64:$Zn)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x02\x10";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov	$\xFF\x01\x0C.16b, $\xFF\x02\x0C.16b";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov	$\xFF\x01\x0C.8b, $\xFF\x02\x0C.8b";
      break;
    }
    return false;
  case AArch64::PRFB_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFB_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfb	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::PRFB_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFB_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfb	$\xFF\x01\x33, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFB_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFB_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfb	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::PRFD_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFD_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfd	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::PRFD_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFD_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfd	$\xFF\x01\x33, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFD_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFD_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfd	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::PRFH_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFH_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfh	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::PRFH_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFH_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfh	$\xFF\x01\x33, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFH_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFH_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfh	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x34, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x34, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum	$\xFF\x01\x34, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFW_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFW_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfw	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::PRFW_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFW_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfw	$\xFF\x01\x33, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFW_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFW_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfw	$\xFF\x01\x33, $\xFF\x02\x07, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::PTRUES_B:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_B PPR8:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x06";
      break;
    }
    return false;
  case AArch64::PTRUES_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_D PPR64:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x10";
      break;
    }
    return false;
  case AArch64::PTRUES_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_H PPR16:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x09";
      break;
    }
    return false;
  case AArch64::PTRUES_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_S PPR32:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x0B";
      break;
    }
    return false;
  case AArch64::PTRUE_B:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_B PPR8:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x06";
      break;
    }
    return false;
  case AArch64::PTRUE_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_D PPR64:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x10";
      break;
    }
    return false;
  case AArch64::PTRUE_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_H PPR16:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x09";
      break;
    }
    return false;
  case AArch64::PTRUE_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_S PPR32:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x0B";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SEL_PPPP:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(0).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SEL_PPPP PPR8:$Pd, PPRAny:$Pg, PPR8:$Pn, PPR8:$Pd)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x07/m, $\xFF\x03\x06";
      break;
    }
    return false;
  case AArch64::SEL_ZPZZ_B:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(0).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SEL_ZPZZ_B ZPR8:$Zd, PPRAny:$Pg, ZPR8:$Zn, ZPR8:$Zd)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x07/m, $\xFF\x03\x06";
      break;
    }
    return false;
  case AArch64::SEL_ZPZZ_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(0).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SEL_ZPZZ_D ZPR64:$Zd, PPRAny:$Pg, ZPR64:$Zn, ZPR64:$Zd)
      AsmString = "mov $\xFF\x01\x10, $\xFF\x02\x07/m, $\xFF\x03\x10";
      break;
    }
    return false;
  case AArch64::SEL_ZPZZ_H:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(0).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SEL_ZPZZ_H ZPR16:$Zd, PPRAny:$Pg, ZPR16:$Zn, ZPR16:$Zd)
      AsmString = "mov $\xFF\x01\x09, $\xFF\x02\x07/m, $\xFF\x03\x09";
      break;
    }
    return false;
  case AArch64::SEL_ZPZZ_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MI->getOperand(3).getReg() == MI->getOperand(0).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SEL_ZPZZ_S ZPR32:$Zd, PPRAny:$Pg, ZPR32:$Zn, ZPR32:$Zd)
      AsmString = "mov $\xFF\x01\x0B, $\xFF\x02\x07/m, $\xFF\x03\x0B";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SQDECB_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECB_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECB_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECB_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECB_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecb	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECB_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecb	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECD_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECD_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECD_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECD_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECD_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecd	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECD_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecd	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECD_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECD_ZPiI ZPR64:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecd	$\xFF\x01\x10";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECD_ZPiI ZPR64:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecd	$\xFF\x01\x10, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECH_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECH_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdech	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECH_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdech	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECH_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECH_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdech	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECH_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdech	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECH_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECH_ZPiI ZPR16:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdech	$\xFF\x01\x09";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECH_ZPiI ZPR16:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdech	$\xFF\x01\x09, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECW_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECW_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECW_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECW_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECW_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecw	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECW_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecw	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQDECW_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECW_ZPiI ZPR32:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqdecw	$\xFF\x01\x0B";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQDECW_ZPiI ZPR32:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqdecw	$\xFF\x01\x0B, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCB_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCB_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCB_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCB_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCB_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincb	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCB_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincb	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCD_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCD_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCD_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCD_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCD_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincd	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCD_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincd	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCD_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCD_ZPiI ZPR64:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincd	$\xFF\x01\x10";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCD_ZPiI ZPR64:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincd	$\xFF\x01\x10, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCH_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCH_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqinch	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCH_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqinch	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCH_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCH_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqinch	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCH_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqinch	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCH_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCH_ZPiI ZPR16:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqinch	$\xFF\x01\x09";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCH_ZPiI ZPR16:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqinch	$\xFF\x01\x09, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCW_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCW_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCW_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCW_XPiWdI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCW_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincw	$\x01, $\xFF\x02\x35";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCW_XPiWdI GPR64z:$Rd, GPR64as32:$Rn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincw	$\x01, $\xFF\x02\x35, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SQINCW_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCW_ZPiI ZPR32:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "sqincw	$\xFF\x01\x0B";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SQINCW_ZPiI ZPR32:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "sqincw	$\xFF\x01\x0B, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::SST1B_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1B_D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1b	$\xFF\x01\x20, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::SST1B_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1B_S_IMM Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "st1b	$\xFF\x01\x21, $\xFF\x02\x07, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::SST1D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1d	$\xFF\x01\x20, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::SST1H_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1H_D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1h	$\xFF\x01\x20, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::SST1H_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1H_S_IMM Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "st1h	$\xFF\x01\x21, $\xFF\x02\x07, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::SST1W_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1W_D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1w	$\xFF\x01\x20, $\xFF\x02\x07, [$\xFF\x03\x10]";
      break;
    }
    return false;
  case AArch64::SST1W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1W_IMM Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "st1w	$\xFF\x01\x21, $\xFF\x02\x07, [$\xFF\x03\x0B]";
      break;
    }
    return false;
  case AArch64::ST1B_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1B_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x24, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_IMM Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x25, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1B_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x21, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1d	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1H_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1H_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1h	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1h	$\xFF\x01\x24, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1H_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1H_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1h	$\xFF\x01\x21, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1W_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1W_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1w	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1W_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1w	$\xFF\x01\x21, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x2E$\xFF\x03\x19, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x2F$\xFF\x03\x19, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x30$\xFF\x03\x19, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x31$\xFF\x03\x19, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2B_IMM ZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2b	$\xFF\x01\x25, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2D_IMM ZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2d	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2GOffset:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureMTE]) {
      // (ST2GOffset GPR64sp:$Rn, 0)
      AsmString = "st2g	[$\x01]";
      break;
    }
    return false;
  case AArch64::ST2H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2H_IMM ZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2h	$\xFF\x01\x24, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x2C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x2D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2W_IMM ZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2w	$\xFF\x01\x21, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x2E$\xFF\x03\x19, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x2F$\xFF\x03\x19, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x30$\xFF\x03\x19, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x31$\xFF\x03\x19, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3B_IMM ZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3b	$\xFF\x01\x25, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3D_IMM ZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3d	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3H_IMM ZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3h	$\xFF\x01\x24, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x28, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x29, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x2C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x2D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3W_IMM ZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3w	$\xFF\x01\x21, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x2E$\xFF\x03\x19, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x2F$\xFF\x03\x19, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x30$\xFF\x03\x19, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x31$\xFF\x03\x19, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4B_IMM ZZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4b	$\xFF\x01\x25, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4D_IMM ZZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4d	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x28, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x2C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x2D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4H_IMM ZZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4h	$\xFF\x01\x24, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4W_IMM ZZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4w	$\xFF\x01\x21, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x2E$\xFF\x03\x19, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x2F$\xFF\x03\x19, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x30$\xFF\x03\x19, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x31$\xFF\x03\x19, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STGOffset:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureMTE]) {
      // (STGOffset GPR64sp:$Rn, 0)
      AsmString = "stg	[$\x01]";
      break;
    }
    return false;
  case AArch64::STGPi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureMTE]) {
      // (STGPi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stgp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STLURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (STLURBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stlurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STLURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (STLURHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stlurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STLURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (STLURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stlur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STLURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureRCPC_IMMO]) {
      // (STLURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stlur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1B_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1B_ZRI Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1b	$\xFF\x01\x25, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1D_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1D_ZRI Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1d	$\xFF\x01\x20, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1H_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1H_ZRI Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1h	$\xFF\x01\x24, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1W_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1W_ZRI Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1w	$\xFF\x01\x21, $\xFF\x02\x07, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STR_PXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STR_PXI PPRAny:$Pt, GPR64sp:$Rn, 0)
      AsmString = "str	$\xFF\x01\x07, [$\x02]";
      break;
    }
    return false;
  case AArch64::STR_ZXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STR_ZXI ZPRAny:$Zt, GPR64sp:$Rn, 0)
      AsmString = "str	$\xFF\x01\x07, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STZ2GOffset:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureMTE]) {
      // (STZ2GOffset GPR64sp:$Rn, 0)
      AsmString = "stz2g	[$\x01]";
      break;
    }
    return false;
  case AArch64::STZGOffset:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureMTE]) {
      // (STZGOffset GPR64sp:$Rn, 0)
      AsmString = "stzg	[$\x01]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x36, $\xFF\x03\x36, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x0C.s$\xFF\x03\x19";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x0C.d$\xFF\x03\x19";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UQDECB_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECB_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECB_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECB_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECB_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECB_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECD_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECD_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECD_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECD_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECD_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECD_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECD_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECD_ZPiI ZPR64:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecd	$\xFF\x01\x10";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECD_ZPiI ZPR64:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecd	$\xFF\x01\x10, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECH_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECH_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdech	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECH_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdech	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECH_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECH_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdech	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECH_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdech	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECH_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECH_ZPiI ZPR16:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdech	$\xFF\x01\x09";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECH_ZPiI ZPR16:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdech	$\xFF\x01\x09, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECW_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECW_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECW_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECW_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECW_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECW_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQDECW_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECW_ZPiI ZPR32:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqdecw	$\xFF\x01\x0B";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQDECW_ZPiI ZPR32:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqdecw	$\xFF\x01\x0B, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCB_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCB_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCB_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCB_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCB_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincb	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCB_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincb	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCD_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCD_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCD_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCD_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCD_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincd	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCD_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincd	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCD_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCD_ZPiI ZPR64:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincd	$\xFF\x01\x10";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCD_ZPiI ZPR64:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincd	$\xFF\x01\x10, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCH_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCH_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqinch	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCH_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqinch	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCH_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCH_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqinch	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCH_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqinch	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCH_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCH_ZPiI ZPR16:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqinch	$\xFF\x01\x09";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCH_ZPiI ZPR16:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqinch	$\xFF\x01\x09, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCW_WPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCW_WPiI GPR32z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCW_WPiI GPR32z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCW_XPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCW_XPiI GPR64z:$Rdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincw	$\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCW_XPiI GPR64z:$Rdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincw	$\x01, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::UQINCW_ZPiI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 31 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCW_ZPiI ZPR32:$Zdn, { 1, 1, 1, 1, 1 }, 1)
      AsmString = "uqincw	$\xFF\x01\x0B";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (UQINCW_ZPiI ZPR32:$Zdn, sve_pred_enum:$pattern, 1)
      AsmString = "uqincw	$\xFF\x01\x0B, $\xFF\x03\x0E";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64InstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm<int32_t>(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm<int64_t>(MI, OpIdx, STI, OS);
    break;
  case 5:
    printSVERegOp<'b'>(MI, OpIdx, STI, OS);
    break;
  case 6:
    printSVERegOp<>(MI, OpIdx, STI, OS);
    break;
  case 7:
    printLogicalImm<int8_t>(MI, OpIdx, STI, OS);
    break;
  case 8:
    printSVERegOp<'h'>(MI, OpIdx, STI, OS);
    break;
  case 9:
    printLogicalImm<int16_t>(MI, OpIdx, STI, OS);
    break;
  case 10:
    printSVERegOp<'s'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 12:
    printImm(MI, OpIdx, STI, OS);
    break;
  case 13:
    printSVEPattern(MI, OpIdx, STI, OS);
    break;
  case 14:
    printImm8OptLsl<int8_t>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printSVERegOp<'d'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printImm8OptLsl<int64_t>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printImm8OptLsl<int16_t>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printImm8OptLsl<int32_t>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 20:
    printSVELogicalImm<int16_t>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printSVELogicalImm<int32_t>(MI, OpIdx, STI, OS);
    break;
  case 22:
    printSVELogicalImm<int64_t>(MI, OpIdx, STI, OS);
    break;
  case 23:
    printZPRasFPR<8>(MI, OpIdx, STI, OS);
    break;
  case 24:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 25:
    printZPRasFPR<64>(MI, OpIdx, STI, OS);
    break;
  case 26:
    printZPRasFPR<16>(MI, OpIdx, STI, OS);
    break;
  case 27:
    printSVERegOp<'q'>(MI, OpIdx, STI, OS);
    break;
  case 28:
    printZPRasFPR<128>(MI, OpIdx, STI, OS);
    break;
  case 29:
    printZPRasFPR<32>(MI, OpIdx, STI, OS);
    break;
  case 30:
    printFPImmOperand(MI, OpIdx, STI, OS);
    break;
  case 31:
    printTypedVectorList<0,'d'>(MI, OpIdx, STI, OS);
    break;
  case 32:
    printTypedVectorList<0,'s'>(MI, OpIdx, STI, OS);
    break;
  case 33:
    printBTIHintOp(MI, OpIdx, STI, OS);
    break;
  case 34:
    printPSBHintOp(MI, OpIdx, STI, OS);
    break;
  case 35:
    printTypedVectorList<0,'h'>(MI, OpIdx, STI, OS);
    break;
  case 36:
    printTypedVectorList<0,'b'>(MI, OpIdx, STI, OS);
    break;
  case 37:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 38:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 39:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 40:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 41:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 42:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 43:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 44:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 45:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 46:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 47:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 48:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 49:
    printImmHex(MI, OpIdx, STI, OS);
    break;
  case 50:
    printPrefetchOp<true>(MI, OpIdx, STI, OS);
    break;
  case 51:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 52:
    printGPR64as32(MI, OpIdx, STI, OS);
    break;
  case 53:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int8_t>(Val);
  
    }
  case 2: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int16_t>(Val);
  
    }
  case 3: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int32_t>(Val);
  
    }
  case 4: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  case 5: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int16_t>(Val) &&
           AArch64_AM::isSVEMoveMaskPreferredLogicalImmediate(Val);
  
    }
  case 6: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int32_t>(Val) &&
           AArch64_AM::isSVEMoveMaskPreferredLogicalImmediate(Val);
  
    }
  case 7: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int64_t>(Val) &&
           AArch64_AM::isSVEMoveMaskPreferredLogicalImmediate(Val);
  
    }
  case 8: {

    // "bti" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64BTIHint::lookupBTIByEncoding((MCOp.getImm() ^ 32) >> 1) != nullptr;
  
    }
  case 9: {

    // Check, if operand is valid, to fix exhaustive aliasing in disassembly.
    // "psb" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64PSBHint::lookupPSBByEncoding(MCOp.getImm()) != nullptr;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
